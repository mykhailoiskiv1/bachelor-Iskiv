generator client {
  provider = "prisma-client-js"
  output   = "./prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  role            Role             @default(CLIENT)
  name            String?
  address         String?
  phone           String?
  lastLogin       DateTime?
  isConfirmed     Boolean          @default(false)
  isActive        Boolean          @default(true) 

  warranties      Warranty[]
  certificates    Certificate[]
  notifications   Notification[]   // ДОДАЄМО ЦЕ
}

model Review {
  id            Int           @id @default(autoincrement())
  clientName    String
  rating        Int      
  content       String
  status        ReviewStatus  @default(PENDING)
  companyReply  String? 
  createdAt     DateTime      @default(now())
}

model Service {
  id             Int        @id @default(autoincrement())
  title          String
  category       String
  description    String?
  icon           String
  isFeatured     Boolean    @default(false)
  sortOrder      Int        @default(0)
  isHot          Boolean    @default(false)
  createdAt      DateTime   @default(now())
  deletedAt      DateTime?
}

enum Role {
  USER
  CLIENT
  ADMIN
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Warranty {
  id           Int      @id @default(autoincrement())
  projectId Int?
  clientId     String
  startDate    DateTime
  durationMonths Int
  projectName  String
  createdAt    DateTime @default(now())
  
  client       User     @relation(fields: [clientId], references: [id])
}

model Certificate {
  id           Int      @id @default(autoincrement())
  clientId     String
  fileUrl      String
  title        String
  issuedDate   DateTime
  createdAt    DateTime @default(now())

  client       User     @relation(fields: [clientId], references: [id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  clientId    String
  client      User     @relation(fields: [clientId], references: [id])
  title       String
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Post {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  category        String
  content         String
  imagePath       String
  seoTitle        String?
  seoDescription  String?
  seoKeywords     String?
  published       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ChatSession {
  id         Int       @id @default(autoincrement())
  userId     Int?      // Якщо користувач авторизований
  sessionKey String?   // Для гостей (можна зберігати session id)
  messages   Message[]
  createdAt  DateTime  @default(now())
}

model Message {
  id            Int       @id @default(autoincrement())
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])
  chatSessionId Int
  sender        String    // 'user', 'bot', 'admin'
  content       String
  isTransferred Boolean   @default(false)  // Позначка для передачі адміну
  createdAt     DateTime  @default(now())
}

model KnowledgeBase {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
}
