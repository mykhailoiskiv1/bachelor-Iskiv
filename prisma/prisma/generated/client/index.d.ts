
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model Warranty
 * 
 */
export type Warranty = $Result.DefaultSelection<Prisma.$WarrantyPayload>
/**
 * Model Certificate
 * 
 */
export type Certificate = $Result.DefaultSelection<Prisma.$CertificatePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model ChatSession
 * 
 */
export type ChatSession = $Result.DefaultSelection<Prisma.$ChatSessionPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model KnowledgeBase
 * 
 */
export type KnowledgeBase = $Result.DefaultSelection<Prisma.$KnowledgeBasePayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model ProjectType
 * 
 */
export type ProjectType = $Result.DefaultSelection<Prisma.$ProjectTypePayload>
/**
 * Model WorkPackage
 * 
 */
export type WorkPackage = $Result.DefaultSelection<Prisma.$WorkPackagePayload>
/**
 * Model ServiceItem
 * 
 */
export type ServiceItem = $Result.DefaultSelection<Prisma.$ServiceItemPayload>
/**
 * Model ServiceOption
 * 
 */
export type ServiceOption = $Result.DefaultSelection<Prisma.$ServiceOptionPayload>
/**
 * Model FollowUp
 * 
 */
export type FollowUp = $Result.DefaultSelection<Prisma.$FollowUpPayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model ClientProject
 * 
 */
export type ClientProject = $Result.DefaultSelection<Prisma.$ClientProjectPayload>
/**
 * Model ClientProjectHistory
 * 
 */
export type ClientProjectHistory = $Result.DefaultSelection<Prisma.$ClientProjectHistoryPayload>
/**
 * Model AiChatThread
 * 
 */
export type AiChatThread = $Result.DefaultSelection<Prisma.$AiChatThreadPayload>
/**
 * Model AiChatMessage
 * 
 */
export type AiChatMessage = $Result.DefaultSelection<Prisma.$AiChatMessagePayload>
/**
 * Model AiChatEscalation
 * 
 */
export type AiChatEscalation = $Result.DefaultSelection<Prisma.$AiChatEscalationPayload>
/**
 * Model CalcCategory
 * 
 */
export type CalcCategory = $Result.DefaultSelection<Prisma.$CalcCategoryPayload>
/**
 * Model CalcItem
 * 
 */
export type CalcItem = $Result.DefaultSelection<Prisma.$CalcItemPayload>
/**
 * Model CalcSettings
 * 
 */
export type CalcSettings = $Result.DefaultSelection<Prisma.$CalcSettingsPayload>
/**
 * Model CalcRequest
 * 
 */
export type CalcRequest = $Result.DefaultSelection<Prisma.$CalcRequestPayload>
/**
 * Model CalcProjectType
 * 
 */
export type CalcProjectType = $Result.DefaultSelection<Prisma.$CalcProjectTypePayload>
/**
 * Model CalcCondition
 * 
 */
export type CalcCondition = $Result.DefaultSelection<Prisma.$CalcConditionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  CLIENT: 'CLIENT',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const ReviewStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type ReviewStatus = (typeof ReviewStatus)[keyof typeof ReviewStatus]


export const CalcUnitType: {
  M2: 'M2',
  ITEM: 'ITEM',
  HOUR: 'HOUR',
  FIXED: 'FIXED'
};

export type CalcUnitType = (typeof CalcUnitType)[keyof typeof CalcUnitType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type ReviewStatus = $Enums.ReviewStatus

export const ReviewStatus: typeof $Enums.ReviewStatus

export type CalcUnitType = $Enums.CalcUnitType

export const CalcUnitType: typeof $Enums.CalcUnitType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.warranty`: Exposes CRUD operations for the **Warranty** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Warranties
    * const warranties = await prisma.warranty.findMany()
    * ```
    */
  get warranty(): Prisma.WarrantyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificate`: Exposes CRUD operations for the **Certificate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Certificates
    * const certificates = await prisma.certificate.findMany()
    * ```
    */
  get certificate(): Prisma.CertificateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatSession`: Exposes CRUD operations for the **ChatSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatSessions
    * const chatSessions = await prisma.chatSession.findMany()
    * ```
    */
  get chatSession(): Prisma.ChatSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.knowledgeBase`: Exposes CRUD operations for the **KnowledgeBase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KnowledgeBases
    * const knowledgeBases = await prisma.knowledgeBase.findMany()
    * ```
    */
  get knowledgeBase(): Prisma.KnowledgeBaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projectType`: Exposes CRUD operations for the **ProjectType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectTypes
    * const projectTypes = await prisma.projectType.findMany()
    * ```
    */
  get projectType(): Prisma.ProjectTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workPackage`: Exposes CRUD operations for the **WorkPackage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkPackages
    * const workPackages = await prisma.workPackage.findMany()
    * ```
    */
  get workPackage(): Prisma.WorkPackageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceItem`: Exposes CRUD operations for the **ServiceItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceItems
    * const serviceItems = await prisma.serviceItem.findMany()
    * ```
    */
  get serviceItem(): Prisma.ServiceItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serviceOption`: Exposes CRUD operations for the **ServiceOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceOptions
    * const serviceOptions = await prisma.serviceOption.findMany()
    * ```
    */
  get serviceOption(): Prisma.ServiceOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.followUp`: Exposes CRUD operations for the **FollowUp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FollowUps
    * const followUps = await prisma.followUp.findMany()
    * ```
    */
  get followUp(): Prisma.FollowUpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clientProject`: Exposes CRUD operations for the **ClientProject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientProjects
    * const clientProjects = await prisma.clientProject.findMany()
    * ```
    */
  get clientProject(): Prisma.ClientProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clientProjectHistory`: Exposes CRUD operations for the **ClientProjectHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientProjectHistories
    * const clientProjectHistories = await prisma.clientProjectHistory.findMany()
    * ```
    */
  get clientProjectHistory(): Prisma.ClientProjectHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aiChatThread`: Exposes CRUD operations for the **AiChatThread** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AiChatThreads
    * const aiChatThreads = await prisma.aiChatThread.findMany()
    * ```
    */
  get aiChatThread(): Prisma.AiChatThreadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aiChatMessage`: Exposes CRUD operations for the **AiChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AiChatMessages
    * const aiChatMessages = await prisma.aiChatMessage.findMany()
    * ```
    */
  get aiChatMessage(): Prisma.AiChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aiChatEscalation`: Exposes CRUD operations for the **AiChatEscalation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AiChatEscalations
    * const aiChatEscalations = await prisma.aiChatEscalation.findMany()
    * ```
    */
  get aiChatEscalation(): Prisma.AiChatEscalationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calcCategory`: Exposes CRUD operations for the **CalcCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalcCategories
    * const calcCategories = await prisma.calcCategory.findMany()
    * ```
    */
  get calcCategory(): Prisma.CalcCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calcItem`: Exposes CRUD operations for the **CalcItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalcItems
    * const calcItems = await prisma.calcItem.findMany()
    * ```
    */
  get calcItem(): Prisma.CalcItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calcSettings`: Exposes CRUD operations for the **CalcSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalcSettings
    * const calcSettings = await prisma.calcSettings.findMany()
    * ```
    */
  get calcSettings(): Prisma.CalcSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calcRequest`: Exposes CRUD operations for the **CalcRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalcRequests
    * const calcRequests = await prisma.calcRequest.findMany()
    * ```
    */
  get calcRequest(): Prisma.CalcRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calcProjectType`: Exposes CRUD operations for the **CalcProjectType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalcProjectTypes
    * const calcProjectTypes = await prisma.calcProjectType.findMany()
    * ```
    */
  get calcProjectType(): Prisma.CalcProjectTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calcCondition`: Exposes CRUD operations for the **CalcCondition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalcConditions
    * const calcConditions = await prisma.calcCondition.findMany()
    * ```
    */
  get calcCondition(): Prisma.CalcConditionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Review: 'Review',
    Service: 'Service',
    Warranty: 'Warranty',
    Certificate: 'Certificate',
    Notification: 'Notification',
    Post: 'Post',
    ChatSession: 'ChatSession',
    Message: 'Message',
    KnowledgeBase: 'KnowledgeBase',
    Project: 'Project',
    ProjectType: 'ProjectType',
    WorkPackage: 'WorkPackage',
    ServiceItem: 'ServiceItem',
    ServiceOption: 'ServiceOption',
    FollowUp: 'FollowUp',
    Invoice: 'Invoice',
    ClientProject: 'ClientProject',
    ClientProjectHistory: 'ClientProjectHistory',
    AiChatThread: 'AiChatThread',
    AiChatMessage: 'AiChatMessage',
    AiChatEscalation: 'AiChatEscalation',
    CalcCategory: 'CalcCategory',
    CalcItem: 'CalcItem',
    CalcSettings: 'CalcSettings',
    CalcRequest: 'CalcRequest',
    CalcProjectType: 'CalcProjectType',
    CalcCondition: 'CalcCondition'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "review" | "service" | "warranty" | "certificate" | "notification" | "post" | "chatSession" | "message" | "knowledgeBase" | "project" | "projectType" | "workPackage" | "serviceItem" | "serviceOption" | "followUp" | "invoice" | "clientProject" | "clientProjectHistory" | "aiChatThread" | "aiChatMessage" | "aiChatEscalation" | "calcCategory" | "calcItem" | "calcSettings" | "calcRequest" | "calcProjectType" | "calcCondition"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      Warranty: {
        payload: Prisma.$WarrantyPayload<ExtArgs>
        fields: Prisma.WarrantyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WarrantyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WarrantyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload>
          }
          findFirst: {
            args: Prisma.WarrantyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WarrantyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload>
          }
          findMany: {
            args: Prisma.WarrantyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload>[]
          }
          create: {
            args: Prisma.WarrantyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload>
          }
          createMany: {
            args: Prisma.WarrantyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WarrantyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload>[]
          }
          delete: {
            args: Prisma.WarrantyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload>
          }
          update: {
            args: Prisma.WarrantyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload>
          }
          deleteMany: {
            args: Prisma.WarrantyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WarrantyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WarrantyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload>[]
          }
          upsert: {
            args: Prisma.WarrantyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarrantyPayload>
          }
          aggregate: {
            args: Prisma.WarrantyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWarranty>
          }
          groupBy: {
            args: Prisma.WarrantyGroupByArgs<ExtArgs>
            result: $Utils.Optional<WarrantyGroupByOutputType>[]
          }
          count: {
            args: Prisma.WarrantyCountArgs<ExtArgs>
            result: $Utils.Optional<WarrantyCountAggregateOutputType> | number
          }
        }
      }
      Certificate: {
        payload: Prisma.$CertificatePayload<ExtArgs>
        fields: Prisma.CertificateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findFirst: {
            args: Prisma.CertificateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findMany: {
            args: Prisma.CertificateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          create: {
            args: Prisma.CertificateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          createMany: {
            args: Prisma.CertificateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CertificateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          delete: {
            args: Prisma.CertificateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          update: {
            args: Prisma.CertificateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          deleteMany: {
            args: Prisma.CertificateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CertificateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          upsert: {
            args: Prisma.CertificateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          aggregate: {
            args: Prisma.CertificateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificate>
          }
          groupBy: {
            args: Prisma.CertificateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      ChatSession: {
        payload: Prisma.$ChatSessionPayload<ExtArgs>
        fields: Prisma.ChatSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findFirst: {
            args: Prisma.ChatSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          findMany: {
            args: Prisma.ChatSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          create: {
            args: Prisma.ChatSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          createMany: {
            args: Prisma.ChatSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          delete: {
            args: Prisma.ChatSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          update: {
            args: Prisma.ChatSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          deleteMany: {
            args: Prisma.ChatSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>[]
          }
          upsert: {
            args: Prisma.ChatSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatSessionPayload>
          }
          aggregate: {
            args: Prisma.ChatSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatSession>
          }
          groupBy: {
            args: Prisma.ChatSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ChatSessionCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      KnowledgeBase: {
        payload: Prisma.$KnowledgeBasePayload<ExtArgs>
        fields: Prisma.KnowledgeBaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KnowledgeBaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KnowledgeBaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          findFirst: {
            args: Prisma.KnowledgeBaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KnowledgeBaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          findMany: {
            args: Prisma.KnowledgeBaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>[]
          }
          create: {
            args: Prisma.KnowledgeBaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          createMany: {
            args: Prisma.KnowledgeBaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KnowledgeBaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>[]
          }
          delete: {
            args: Prisma.KnowledgeBaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          update: {
            args: Prisma.KnowledgeBaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          deleteMany: {
            args: Prisma.KnowledgeBaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KnowledgeBaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KnowledgeBaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>[]
          }
          upsert: {
            args: Prisma.KnowledgeBaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeBasePayload>
          }
          aggregate: {
            args: Prisma.KnowledgeBaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKnowledgeBase>
          }
          groupBy: {
            args: Prisma.KnowledgeBaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<KnowledgeBaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.KnowledgeBaseCountArgs<ExtArgs>
            result: $Utils.Optional<KnowledgeBaseCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      ProjectType: {
        payload: Prisma.$ProjectTypePayload<ExtArgs>
        fields: Prisma.ProjectTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload>
          }
          findFirst: {
            args: Prisma.ProjectTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload>
          }
          findMany: {
            args: Prisma.ProjectTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload>[]
          }
          create: {
            args: Prisma.ProjectTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload>
          }
          createMany: {
            args: Prisma.ProjectTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload>[]
          }
          delete: {
            args: Prisma.ProjectTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload>
          }
          update: {
            args: Prisma.ProjectTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload>
          }
          deleteMany: {
            args: Prisma.ProjectTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload>[]
          }
          upsert: {
            args: Prisma.ProjectTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectTypePayload>
          }
          aggregate: {
            args: Prisma.ProjectTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectType>
          }
          groupBy: {
            args: Prisma.ProjectTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectTypeCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectTypeCountAggregateOutputType> | number
          }
        }
      }
      WorkPackage: {
        payload: Prisma.$WorkPackagePayload<ExtArgs>
        fields: Prisma.WorkPackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkPackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkPackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload>
          }
          findFirst: {
            args: Prisma.WorkPackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkPackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload>
          }
          findMany: {
            args: Prisma.WorkPackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload>[]
          }
          create: {
            args: Prisma.WorkPackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload>
          }
          createMany: {
            args: Prisma.WorkPackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkPackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload>[]
          }
          delete: {
            args: Prisma.WorkPackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload>
          }
          update: {
            args: Prisma.WorkPackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload>
          }
          deleteMany: {
            args: Prisma.WorkPackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkPackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkPackageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload>[]
          }
          upsert: {
            args: Prisma.WorkPackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkPackagePayload>
          }
          aggregate: {
            args: Prisma.WorkPackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkPackage>
          }
          groupBy: {
            args: Prisma.WorkPackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkPackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkPackageCountArgs<ExtArgs>
            result: $Utils.Optional<WorkPackageCountAggregateOutputType> | number
          }
        }
      }
      ServiceItem: {
        payload: Prisma.$ServiceItemPayload<ExtArgs>
        fields: Prisma.ServiceItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload>
          }
          findFirst: {
            args: Prisma.ServiceItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload>
          }
          findMany: {
            args: Prisma.ServiceItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload>[]
          }
          create: {
            args: Prisma.ServiceItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload>
          }
          createMany: {
            args: Prisma.ServiceItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload>[]
          }
          delete: {
            args: Prisma.ServiceItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload>
          }
          update: {
            args: Prisma.ServiceItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload>
          }
          deleteMany: {
            args: Prisma.ServiceItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload>[]
          }
          upsert: {
            args: Prisma.ServiceItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceItemPayload>
          }
          aggregate: {
            args: Prisma.ServiceItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceItem>
          }
          groupBy: {
            args: Prisma.ServiceItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceItemCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceItemCountAggregateOutputType> | number
          }
        }
      }
      ServiceOption: {
        payload: Prisma.$ServiceOptionPayload<ExtArgs>
        fields: Prisma.ServiceOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload>
          }
          findFirst: {
            args: Prisma.ServiceOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload>
          }
          findMany: {
            args: Prisma.ServiceOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload>[]
          }
          create: {
            args: Prisma.ServiceOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload>
          }
          createMany: {
            args: Prisma.ServiceOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload>[]
          }
          delete: {
            args: Prisma.ServiceOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload>
          }
          update: {
            args: Prisma.ServiceOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload>
          }
          deleteMany: {
            args: Prisma.ServiceOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload>[]
          }
          upsert: {
            args: Prisma.ServiceOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServiceOptionPayload>
          }
          aggregate: {
            args: Prisma.ServiceOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServiceOption>
          }
          groupBy: {
            args: Prisma.ServiceOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceOptionCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceOptionCountAggregateOutputType> | number
          }
        }
      }
      FollowUp: {
        payload: Prisma.$FollowUpPayload<ExtArgs>
        fields: Prisma.FollowUpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowUpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowUpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload>
          }
          findFirst: {
            args: Prisma.FollowUpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowUpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload>
          }
          findMany: {
            args: Prisma.FollowUpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload>[]
          }
          create: {
            args: Prisma.FollowUpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload>
          }
          createMany: {
            args: Prisma.FollowUpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FollowUpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload>[]
          }
          delete: {
            args: Prisma.FollowUpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload>
          }
          update: {
            args: Prisma.FollowUpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload>
          }
          deleteMany: {
            args: Prisma.FollowUpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FollowUpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FollowUpUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload>[]
          }
          upsert: {
            args: Prisma.FollowUpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FollowUpPayload>
          }
          aggregate: {
            args: Prisma.FollowUpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFollowUp>
          }
          groupBy: {
            args: Prisma.FollowUpGroupByArgs<ExtArgs>
            result: $Utils.Optional<FollowUpGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowUpCountArgs<ExtArgs>
            result: $Utils.Optional<FollowUpCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      ClientProject: {
        payload: Prisma.$ClientProjectPayload<ExtArgs>
        fields: Prisma.ClientProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload>
          }
          findFirst: {
            args: Prisma.ClientProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload>
          }
          findMany: {
            args: Prisma.ClientProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload>[]
          }
          create: {
            args: Prisma.ClientProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload>
          }
          createMany: {
            args: Prisma.ClientProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload>[]
          }
          delete: {
            args: Prisma.ClientProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload>
          }
          update: {
            args: Prisma.ClientProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload>
          }
          deleteMany: {
            args: Prisma.ClientProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload>[]
          }
          upsert: {
            args: Prisma.ClientProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectPayload>
          }
          aggregate: {
            args: Prisma.ClientProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClientProject>
          }
          groupBy: {
            args: Prisma.ClientProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ClientProjectCountAggregateOutputType> | number
          }
        }
      }
      ClientProjectHistory: {
        payload: Prisma.$ClientProjectHistoryPayload<ExtArgs>
        fields: Prisma.ClientProjectHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientProjectHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientProjectHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload>
          }
          findFirst: {
            args: Prisma.ClientProjectHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientProjectHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload>
          }
          findMany: {
            args: Prisma.ClientProjectHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload>[]
          }
          create: {
            args: Prisma.ClientProjectHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload>
          }
          createMany: {
            args: Prisma.ClientProjectHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClientProjectHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload>[]
          }
          delete: {
            args: Prisma.ClientProjectHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload>
          }
          update: {
            args: Prisma.ClientProjectHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ClientProjectHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClientProjectHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClientProjectHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload>[]
          }
          upsert: {
            args: Prisma.ClientProjectHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClientProjectHistoryPayload>
          }
          aggregate: {
            args: Prisma.ClientProjectHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClientProjectHistory>
          }
          groupBy: {
            args: Prisma.ClientProjectHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientProjectHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientProjectHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ClientProjectHistoryCountAggregateOutputType> | number
          }
        }
      }
      AiChatThread: {
        payload: Prisma.$AiChatThreadPayload<ExtArgs>
        fields: Prisma.AiChatThreadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AiChatThreadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AiChatThreadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload>
          }
          findFirst: {
            args: Prisma.AiChatThreadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AiChatThreadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload>
          }
          findMany: {
            args: Prisma.AiChatThreadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload>[]
          }
          create: {
            args: Prisma.AiChatThreadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload>
          }
          createMany: {
            args: Prisma.AiChatThreadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AiChatThreadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload>[]
          }
          delete: {
            args: Prisma.AiChatThreadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload>
          }
          update: {
            args: Prisma.AiChatThreadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload>
          }
          deleteMany: {
            args: Prisma.AiChatThreadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AiChatThreadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AiChatThreadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload>[]
          }
          upsert: {
            args: Prisma.AiChatThreadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatThreadPayload>
          }
          aggregate: {
            args: Prisma.AiChatThreadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAiChatThread>
          }
          groupBy: {
            args: Prisma.AiChatThreadGroupByArgs<ExtArgs>
            result: $Utils.Optional<AiChatThreadGroupByOutputType>[]
          }
          count: {
            args: Prisma.AiChatThreadCountArgs<ExtArgs>
            result: $Utils.Optional<AiChatThreadCountAggregateOutputType> | number
          }
        }
      }
      AiChatMessage: {
        payload: Prisma.$AiChatMessagePayload<ExtArgs>
        fields: Prisma.AiChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AiChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AiChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          findFirst: {
            args: Prisma.AiChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AiChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          findMany: {
            args: Prisma.AiChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>[]
          }
          create: {
            args: Prisma.AiChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          createMany: {
            args: Prisma.AiChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AiChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>[]
          }
          delete: {
            args: Prisma.AiChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          update: {
            args: Prisma.AiChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.AiChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AiChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AiChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.AiChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatMessagePayload>
          }
          aggregate: {
            args: Prisma.AiChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAiChatMessage>
          }
          groupBy: {
            args: Prisma.AiChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<AiChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.AiChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<AiChatMessageCountAggregateOutputType> | number
          }
        }
      }
      AiChatEscalation: {
        payload: Prisma.$AiChatEscalationPayload<ExtArgs>
        fields: Prisma.AiChatEscalationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AiChatEscalationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AiChatEscalationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload>
          }
          findFirst: {
            args: Prisma.AiChatEscalationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AiChatEscalationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload>
          }
          findMany: {
            args: Prisma.AiChatEscalationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload>[]
          }
          create: {
            args: Prisma.AiChatEscalationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload>
          }
          createMany: {
            args: Prisma.AiChatEscalationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AiChatEscalationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload>[]
          }
          delete: {
            args: Prisma.AiChatEscalationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload>
          }
          update: {
            args: Prisma.AiChatEscalationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload>
          }
          deleteMany: {
            args: Prisma.AiChatEscalationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AiChatEscalationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AiChatEscalationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload>[]
          }
          upsert: {
            args: Prisma.AiChatEscalationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiChatEscalationPayload>
          }
          aggregate: {
            args: Prisma.AiChatEscalationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAiChatEscalation>
          }
          groupBy: {
            args: Prisma.AiChatEscalationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AiChatEscalationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AiChatEscalationCountArgs<ExtArgs>
            result: $Utils.Optional<AiChatEscalationCountAggregateOutputType> | number
          }
        }
      }
      CalcCategory: {
        payload: Prisma.$CalcCategoryPayload<ExtArgs>
        fields: Prisma.CalcCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalcCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalcCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload>
          }
          findFirst: {
            args: Prisma.CalcCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalcCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload>
          }
          findMany: {
            args: Prisma.CalcCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload>[]
          }
          create: {
            args: Prisma.CalcCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload>
          }
          createMany: {
            args: Prisma.CalcCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalcCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload>[]
          }
          delete: {
            args: Prisma.CalcCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload>
          }
          update: {
            args: Prisma.CalcCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload>
          }
          deleteMany: {
            args: Prisma.CalcCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalcCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalcCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload>[]
          }
          upsert: {
            args: Prisma.CalcCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcCategoryPayload>
          }
          aggregate: {
            args: Prisma.CalcCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalcCategory>
          }
          groupBy: {
            args: Prisma.CalcCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalcCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalcCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CalcCategoryCountAggregateOutputType> | number
          }
        }
      }
      CalcItem: {
        payload: Prisma.$CalcItemPayload<ExtArgs>
        fields: Prisma.CalcItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalcItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalcItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload>
          }
          findFirst: {
            args: Prisma.CalcItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalcItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload>
          }
          findMany: {
            args: Prisma.CalcItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload>[]
          }
          create: {
            args: Prisma.CalcItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload>
          }
          createMany: {
            args: Prisma.CalcItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalcItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload>[]
          }
          delete: {
            args: Prisma.CalcItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload>
          }
          update: {
            args: Prisma.CalcItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload>
          }
          deleteMany: {
            args: Prisma.CalcItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalcItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalcItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload>[]
          }
          upsert: {
            args: Prisma.CalcItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcItemPayload>
          }
          aggregate: {
            args: Prisma.CalcItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalcItem>
          }
          groupBy: {
            args: Prisma.CalcItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalcItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalcItemCountArgs<ExtArgs>
            result: $Utils.Optional<CalcItemCountAggregateOutputType> | number
          }
        }
      }
      CalcSettings: {
        payload: Prisma.$CalcSettingsPayload<ExtArgs>
        fields: Prisma.CalcSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalcSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalcSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload>
          }
          findFirst: {
            args: Prisma.CalcSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalcSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload>
          }
          findMany: {
            args: Prisma.CalcSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload>[]
          }
          create: {
            args: Prisma.CalcSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload>
          }
          createMany: {
            args: Prisma.CalcSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalcSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload>[]
          }
          delete: {
            args: Prisma.CalcSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload>
          }
          update: {
            args: Prisma.CalcSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload>
          }
          deleteMany: {
            args: Prisma.CalcSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalcSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalcSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload>[]
          }
          upsert: {
            args: Prisma.CalcSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcSettingsPayload>
          }
          aggregate: {
            args: Prisma.CalcSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalcSettings>
          }
          groupBy: {
            args: Prisma.CalcSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalcSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalcSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<CalcSettingsCountAggregateOutputType> | number
          }
        }
      }
      CalcRequest: {
        payload: Prisma.$CalcRequestPayload<ExtArgs>
        fields: Prisma.CalcRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalcRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalcRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload>
          }
          findFirst: {
            args: Prisma.CalcRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalcRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload>
          }
          findMany: {
            args: Prisma.CalcRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload>[]
          }
          create: {
            args: Prisma.CalcRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload>
          }
          createMany: {
            args: Prisma.CalcRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalcRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload>[]
          }
          delete: {
            args: Prisma.CalcRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload>
          }
          update: {
            args: Prisma.CalcRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload>
          }
          deleteMany: {
            args: Prisma.CalcRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalcRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalcRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload>[]
          }
          upsert: {
            args: Prisma.CalcRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcRequestPayload>
          }
          aggregate: {
            args: Prisma.CalcRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalcRequest>
          }
          groupBy: {
            args: Prisma.CalcRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalcRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalcRequestCountArgs<ExtArgs>
            result: $Utils.Optional<CalcRequestCountAggregateOutputType> | number
          }
        }
      }
      CalcProjectType: {
        payload: Prisma.$CalcProjectTypePayload<ExtArgs>
        fields: Prisma.CalcProjectTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalcProjectTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalcProjectTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload>
          }
          findFirst: {
            args: Prisma.CalcProjectTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalcProjectTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload>
          }
          findMany: {
            args: Prisma.CalcProjectTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload>[]
          }
          create: {
            args: Prisma.CalcProjectTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload>
          }
          createMany: {
            args: Prisma.CalcProjectTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalcProjectTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload>[]
          }
          delete: {
            args: Prisma.CalcProjectTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload>
          }
          update: {
            args: Prisma.CalcProjectTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload>
          }
          deleteMany: {
            args: Prisma.CalcProjectTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalcProjectTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalcProjectTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload>[]
          }
          upsert: {
            args: Prisma.CalcProjectTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcProjectTypePayload>
          }
          aggregate: {
            args: Prisma.CalcProjectTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalcProjectType>
          }
          groupBy: {
            args: Prisma.CalcProjectTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalcProjectTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalcProjectTypeCountArgs<ExtArgs>
            result: $Utils.Optional<CalcProjectTypeCountAggregateOutputType> | number
          }
        }
      }
      CalcCondition: {
        payload: Prisma.$CalcConditionPayload<ExtArgs>
        fields: Prisma.CalcConditionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalcConditionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalcConditionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload>
          }
          findFirst: {
            args: Prisma.CalcConditionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalcConditionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload>
          }
          findMany: {
            args: Prisma.CalcConditionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload>[]
          }
          create: {
            args: Prisma.CalcConditionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload>
          }
          createMany: {
            args: Prisma.CalcConditionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalcConditionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload>[]
          }
          delete: {
            args: Prisma.CalcConditionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload>
          }
          update: {
            args: Prisma.CalcConditionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload>
          }
          deleteMany: {
            args: Prisma.CalcConditionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalcConditionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalcConditionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload>[]
          }
          upsert: {
            args: Prisma.CalcConditionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalcConditionPayload>
          }
          aggregate: {
            args: Prisma.CalcConditionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalcCondition>
          }
          groupBy: {
            args: Prisma.CalcConditionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalcConditionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalcConditionCountArgs<ExtArgs>
            result: $Utils.Optional<CalcConditionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    review?: ReviewOmit
    service?: ServiceOmit
    warranty?: WarrantyOmit
    certificate?: CertificateOmit
    notification?: NotificationOmit
    post?: PostOmit
    chatSession?: ChatSessionOmit
    message?: MessageOmit
    knowledgeBase?: KnowledgeBaseOmit
    project?: ProjectOmit
    projectType?: ProjectTypeOmit
    workPackage?: WorkPackageOmit
    serviceItem?: ServiceItemOmit
    serviceOption?: ServiceOptionOmit
    followUp?: FollowUpOmit
    invoice?: InvoiceOmit
    clientProject?: ClientProjectOmit
    clientProjectHistory?: ClientProjectHistoryOmit
    aiChatThread?: AiChatThreadOmit
    aiChatMessage?: AiChatMessageOmit
    aiChatEscalation?: AiChatEscalationOmit
    calcCategory?: CalcCategoryOmit
    calcItem?: CalcItemOmit
    calcSettings?: CalcSettingsOmit
    calcRequest?: CalcRequestOmit
    calcProjectType?: CalcProjectTypeOmit
    calcCondition?: CalcConditionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    warranties: number
    certificates: number
    notifications: number
    invoices: number
    clientProjects: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warranties?: boolean | UserCountOutputTypeCountWarrantiesArgs
    certificates?: boolean | UserCountOutputTypeCountCertificatesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    invoices?: boolean | UserCountOutputTypeCountInvoicesArgs
    clientProjects?: boolean | UserCountOutputTypeCountClientProjectsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWarrantiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarrantyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCertificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClientProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientProjectWhereInput
  }


  /**
   * Count Type ChatSessionCountOutputType
   */

  export type ChatSessionCountOutputType = {
    messages: number
  }

  export type ChatSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSessionCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSessionCountOutputType
     */
    select?: ChatSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatSessionCountOutputType without action
   */
  export type ChatSessionCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    reviews: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | ProjectCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type ProjectTypeCountOutputType
   */

  export type ProjectTypeCountOutputType = {
    packages: number
  }

  export type ProjectTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packages?: boolean | ProjectTypeCountOutputTypeCountPackagesArgs
  }

  // Custom InputTypes
  /**
   * ProjectTypeCountOutputType without action
   */
  export type ProjectTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectTypeCountOutputType
     */
    select?: ProjectTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectTypeCountOutputType without action
   */
  export type ProjectTypeCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkPackageWhereInput
  }


  /**
   * Count Type WorkPackageCountOutputType
   */

  export type WorkPackageCountOutputType = {
    services: number
  }

  export type WorkPackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    services?: boolean | WorkPackageCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes
  /**
   * WorkPackageCountOutputType without action
   */
  export type WorkPackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackageCountOutputType
     */
    select?: WorkPackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkPackageCountOutputType without action
   */
  export type WorkPackageCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceItemWhereInput
  }


  /**
   * Count Type ServiceItemCountOutputType
   */

  export type ServiceItemCountOutputType = {
    options: number
    followUps: number
    suggestedBy: number
  }

  export type ServiceItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | ServiceItemCountOutputTypeCountOptionsArgs
    followUps?: boolean | ServiceItemCountOutputTypeCountFollowUpsArgs
    suggestedBy?: boolean | ServiceItemCountOutputTypeCountSuggestedByArgs
  }

  // Custom InputTypes
  /**
   * ServiceItemCountOutputType without action
   */
  export type ServiceItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItemCountOutputType
     */
    select?: ServiceItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceItemCountOutputType without action
   */
  export type ServiceItemCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceOptionWhereInput
  }

  /**
   * ServiceItemCountOutputType without action
   */
  export type ServiceItemCountOutputTypeCountFollowUpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowUpWhereInput
  }

  /**
   * ServiceItemCountOutputType without action
   */
  export type ServiceItemCountOutputTypeCountSuggestedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowUpWhereInput
  }


  /**
   * Count Type ClientProjectCountOutputType
   */

  export type ClientProjectCountOutputType = {
    history: number
  }

  export type ClientProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    history?: boolean | ClientProjectCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * ClientProjectCountOutputType without action
   */
  export type ClientProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectCountOutputType
     */
    select?: ClientProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientProjectCountOutputType without action
   */
  export type ClientProjectCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientProjectHistoryWhereInput
  }


  /**
   * Count Type AiChatThreadCountOutputType
   */

  export type AiChatThreadCountOutputType = {
    messages: number
  }

  export type AiChatThreadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | AiChatThreadCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * AiChatThreadCountOutputType without action
   */
  export type AiChatThreadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThreadCountOutputType
     */
    select?: AiChatThreadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AiChatThreadCountOutputType without action
   */
  export type AiChatThreadCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatMessageWhereInput
  }


  /**
   * Count Type CalcCategoryCountOutputType
   */

  export type CalcCategoryCountOutputType = {
    items: number
  }

  export type CalcCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | CalcCategoryCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * CalcCategoryCountOutputType without action
   */
  export type CalcCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategoryCountOutputType
     */
    select?: CalcCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CalcCategoryCountOutputType without action
   */
  export type CalcCategoryCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalcItemWhereInput
  }


  /**
   * Count Type CalcItemCountOutputType
   */

  export type CalcItemCountOutputType = {
    conditions: number
  }

  export type CalcItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conditions?: boolean | CalcItemCountOutputTypeCountConditionsArgs
  }

  // Custom InputTypes
  /**
   * CalcItemCountOutputType without action
   */
  export type CalcItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItemCountOutputType
     */
    select?: CalcItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CalcItemCountOutputType without action
   */
  export type CalcItemCountOutputTypeCountConditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalcConditionWhereInput
  }


  /**
   * Count Type CalcProjectTypeCountOutputType
   */

  export type CalcProjectTypeCountOutputType = {
    categories: number
  }

  export type CalcProjectTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | CalcProjectTypeCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * CalcProjectTypeCountOutputType without action
   */
  export type CalcProjectTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectTypeCountOutputType
     */
    select?: CalcProjectTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CalcProjectTypeCountOutputType without action
   */
  export type CalcProjectTypeCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalcCategoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    name: string | null
    address: string | null
    phone: string | null
    lastLogin: Date | null
    isConfirmed: boolean | null
    isActive: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    name: string | null
    address: string | null
    phone: string | null
    lastLogin: Date | null
    isConfirmed: boolean | null
    isActive: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    name: number
    address: number
    phone: number
    lastLogin: number
    isConfirmed: number
    isActive: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    name?: true
    address?: true
    phone?: true
    lastLogin?: true
    isConfirmed?: true
    isActive?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    name?: true
    address?: true
    phone?: true
    lastLogin?: true
    isConfirmed?: true
    isActive?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    name?: true
    address?: true
    phone?: true
    lastLogin?: true
    isConfirmed?: true
    isActive?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    role: $Enums.Role
    name: string | null
    address: string | null
    phone: string | null
    lastLogin: Date | null
    isConfirmed: boolean
    isActive: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    lastLogin?: boolean
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: boolean | User$warrantiesArgs<ExtArgs>
    certificates?: boolean | User$certificatesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    invoices?: boolean | User$invoicesArgs<ExtArgs>
    clientProjects?: boolean | User$clientProjectsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    lastLogin?: boolean
    isConfirmed?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    lastLogin?: boolean
    isConfirmed?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
    address?: boolean
    phone?: boolean
    lastLogin?: boolean
    isConfirmed?: boolean
    isActive?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "role" | "name" | "address" | "phone" | "lastLogin" | "isConfirmed" | "isActive", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warranties?: boolean | User$warrantiesArgs<ExtArgs>
    certificates?: boolean | User$certificatesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    invoices?: boolean | User$invoicesArgs<ExtArgs>
    clientProjects?: boolean | User$clientProjectsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      warranties: Prisma.$WarrantyPayload<ExtArgs>[]
      certificates: Prisma.$CertificatePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      invoices: Prisma.$InvoicePayload<ExtArgs>[]
      clientProjects: Prisma.$ClientProjectPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      role: $Enums.Role
      name: string | null
      address: string | null
      phone: string | null
      lastLogin: Date | null
      isConfirmed: boolean
      isActive: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    warranties<T extends User$warrantiesArgs<ExtArgs> = {}>(args?: Subset<T, User$warrantiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    certificates<T extends User$certificatesArgs<ExtArgs> = {}>(args?: Subset<T, User$certificatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invoices<T extends User$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, User$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    clientProjects<T extends User$clientProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$clientProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly name: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly isConfirmed: FieldRef<"User", 'Boolean'>
    readonly isActive: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.warranties
   */
  export type User$warrantiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    where?: WarrantyWhereInput
    orderBy?: WarrantyOrderByWithRelationInput | WarrantyOrderByWithRelationInput[]
    cursor?: WarrantyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WarrantyScalarFieldEnum | WarrantyScalarFieldEnum[]
  }

  /**
   * User.certificates
   */
  export type User$certificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    cursor?: CertificateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.invoices
   */
  export type User$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * User.clientProjects
   */
  export type User$clientProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    where?: ClientProjectWhereInput
    orderBy?: ClientProjectOrderByWithRelationInput | ClientProjectOrderByWithRelationInput[]
    cursor?: ClientProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientProjectScalarFieldEnum | ClientProjectScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    rating: number | null
    projectId: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    rating: number | null
    projectId: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    clientName: string | null
    rating: number | null
    content: string | null
    status: $Enums.ReviewStatus | null
    companyReply: string | null
    createdAt: Date | null
    projectId: number | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    clientName: string | null
    rating: number | null
    content: string | null
    status: $Enums.ReviewStatus | null
    companyReply: string | null
    createdAt: Date | null
    projectId: number | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    clientName: number
    rating: number
    content: number
    status: number
    companyReply: number
    createdAt: number
    projectId: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    rating?: true
    projectId?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    rating?: true
    projectId?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    clientName?: true
    rating?: true
    content?: true
    status?: true
    companyReply?: true
    createdAt?: true
    projectId?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    clientName?: true
    rating?: true
    content?: true
    status?: true
    companyReply?: true
    createdAt?: true
    projectId?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    clientName?: true
    rating?: true
    content?: true
    status?: true
    companyReply?: true
    createdAt?: true
    projectId?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    clientName: string
    rating: number
    content: string
    status: $Enums.ReviewStatus
    companyReply: string | null
    createdAt: Date
    projectId: number | null
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientName?: boolean
    rating?: boolean
    content?: boolean
    status?: boolean
    companyReply?: boolean
    createdAt?: boolean
    projectId?: boolean
    project?: boolean | Review$projectArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientName?: boolean
    rating?: boolean
    content?: boolean
    status?: boolean
    companyReply?: boolean
    createdAt?: boolean
    projectId?: boolean
    project?: boolean | Review$projectArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientName?: boolean
    rating?: boolean
    content?: boolean
    status?: boolean
    companyReply?: boolean
    createdAt?: boolean
    projectId?: boolean
    project?: boolean | Review$projectArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    clientName?: boolean
    rating?: boolean
    content?: boolean
    status?: boolean
    companyReply?: boolean
    createdAt?: boolean
    projectId?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientName" | "rating" | "content" | "status" | "companyReply" | "createdAt" | "projectId", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | Review$projectArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | Review$projectArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | Review$projectArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientName: string
      rating: number
      content: string
      status: $Enums.ReviewStatus
      companyReply: string | null
      createdAt: Date
      projectId: number | null
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends Review$projectArgs<ExtArgs> = {}>(args?: Subset<T, Review$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly clientName: FieldRef<"Review", 'String'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly content: FieldRef<"Review", 'String'>
    readonly status: FieldRef<"Review", 'ReviewStatus'>
    readonly companyReply: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
    readonly projectId: FieldRef<"Review", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review.project
   */
  export type Review$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    id: number | null
    sortOrder: number | null
  }

  export type ServiceSumAggregateOutputType = {
    id: number | null
    sortOrder: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: number | null
    title: string | null
    category: string | null
    description: string | null
    icon: string | null
    isFeatured: boolean | null
    sortOrder: number | null
    isHot: boolean | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: number | null
    title: string | null
    category: string | null
    description: string | null
    icon: string | null
    isFeatured: boolean | null
    sortOrder: number | null
    isHot: boolean | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    title: number
    category: number
    description: number
    icon: number
    isFeatured: number
    sortOrder: number
    isHot: number
    createdAt: number
    deletedAt: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    id?: true
    sortOrder?: true
  }

  export type ServiceSumAggregateInputType = {
    id?: true
    sortOrder?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    title?: true
    category?: true
    description?: true
    icon?: true
    isFeatured?: true
    sortOrder?: true
    isHot?: true
    createdAt?: true
    deletedAt?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    title?: true
    category?: true
    description?: true
    icon?: true
    isFeatured?: true
    sortOrder?: true
    isHot?: true
    createdAt?: true
    deletedAt?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    title?: true
    category?: true
    description?: true
    icon?: true
    isFeatured?: true
    sortOrder?: true
    isHot?: true
    createdAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: number
    title: string
    category: string
    description: string | null
    icon: string
    isFeatured: boolean
    sortOrder: number
    isHot: boolean
    createdAt: Date
    deletedAt: Date | null
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    description?: boolean
    icon?: boolean
    isFeatured?: boolean
    sortOrder?: boolean
    isHot?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    description?: boolean
    icon?: boolean
    isFeatured?: boolean
    sortOrder?: boolean
    isHot?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    description?: boolean
    icon?: boolean
    isFeatured?: boolean
    sortOrder?: boolean
    isHot?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    id?: boolean
    title?: boolean
    category?: boolean
    description?: boolean
    icon?: boolean
    isFeatured?: boolean
    sortOrder?: boolean
    isHot?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }

  export type ServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "category" | "description" | "icon" | "isFeatured" | "sortOrder" | "isHot" | "createdAt" | "deletedAt", ExtArgs["result"]["service"]>

  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      category: string
      description: string | null
      icon: string
      isFeatured: boolean
      sortOrder: number
      isHot: boolean
      createdAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceFindUniqueArgs>(args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceFindFirstArgs>(args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceFindManyArgs>(args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends ServiceCreateArgs>(args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Services.
     * @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCreateManyArgs>(args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Services and returns the data saved in the database.
     * @param {ServiceCreateManyAndReturnArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends ServiceDeleteArgs>(args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceUpdateArgs>(args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceDeleteManyArgs>(args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceUpdateManyArgs>(args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services and returns the data updated in the database.
     * @param {ServiceUpdateManyAndReturnArgs} args - Arguments to update many Services.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends ServiceUpsertArgs>(args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Service model
   */
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'Int'>
    readonly title: FieldRef<"Service", 'String'>
    readonly category: FieldRef<"Service", 'String'>
    readonly description: FieldRef<"Service", 'String'>
    readonly icon: FieldRef<"Service", 'String'>
    readonly isFeatured: FieldRef<"Service", 'Boolean'>
    readonly sortOrder: FieldRef<"Service", 'Int'>
    readonly isHot: FieldRef<"Service", 'Boolean'>
    readonly createdAt: FieldRef<"Service", 'DateTime'>
    readonly deletedAt: FieldRef<"Service", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }

  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service createManyAndReturn
   */
  export type ServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service updateManyAndReturn
   */
  export type ServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }

  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to delete.
     */
    limit?: number
  }

  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
  }


  /**
   * Model Warranty
   */

  export type AggregateWarranty = {
    _count: WarrantyCountAggregateOutputType | null
    _avg: WarrantyAvgAggregateOutputType | null
    _sum: WarrantySumAggregateOutputType | null
    _min: WarrantyMinAggregateOutputType | null
    _max: WarrantyMaxAggregateOutputType | null
  }

  export type WarrantyAvgAggregateOutputType = {
    id: number | null
    projectId: number | null
    durationMonths: number | null
  }

  export type WarrantySumAggregateOutputType = {
    id: number | null
    projectId: number | null
    durationMonths: number | null
  }

  export type WarrantyMinAggregateOutputType = {
    id: number | null
    projectId: number | null
    clientId: string | null
    startDate: Date | null
    durationMonths: number | null
    projectName: string | null
    createdAt: Date | null
  }

  export type WarrantyMaxAggregateOutputType = {
    id: number | null
    projectId: number | null
    clientId: string | null
    startDate: Date | null
    durationMonths: number | null
    projectName: string | null
    createdAt: Date | null
  }

  export type WarrantyCountAggregateOutputType = {
    id: number
    projectId: number
    clientId: number
    startDate: number
    durationMonths: number
    projectName: number
    createdAt: number
    _all: number
  }


  export type WarrantyAvgAggregateInputType = {
    id?: true
    projectId?: true
    durationMonths?: true
  }

  export type WarrantySumAggregateInputType = {
    id?: true
    projectId?: true
    durationMonths?: true
  }

  export type WarrantyMinAggregateInputType = {
    id?: true
    projectId?: true
    clientId?: true
    startDate?: true
    durationMonths?: true
    projectName?: true
    createdAt?: true
  }

  export type WarrantyMaxAggregateInputType = {
    id?: true
    projectId?: true
    clientId?: true
    startDate?: true
    durationMonths?: true
    projectName?: true
    createdAt?: true
  }

  export type WarrantyCountAggregateInputType = {
    id?: true
    projectId?: true
    clientId?: true
    startDate?: true
    durationMonths?: true
    projectName?: true
    createdAt?: true
    _all?: true
  }

  export type WarrantyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warranty to aggregate.
     */
    where?: WarrantyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warranties to fetch.
     */
    orderBy?: WarrantyOrderByWithRelationInput | WarrantyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WarrantyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warranties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warranties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Warranties
    **/
    _count?: true | WarrantyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WarrantyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WarrantySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WarrantyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WarrantyMaxAggregateInputType
  }

  export type GetWarrantyAggregateType<T extends WarrantyAggregateArgs> = {
        [P in keyof T & keyof AggregateWarranty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWarranty[P]>
      : GetScalarType<T[P], AggregateWarranty[P]>
  }




  export type WarrantyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarrantyWhereInput
    orderBy?: WarrantyOrderByWithAggregationInput | WarrantyOrderByWithAggregationInput[]
    by: WarrantyScalarFieldEnum[] | WarrantyScalarFieldEnum
    having?: WarrantyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WarrantyCountAggregateInputType | true
    _avg?: WarrantyAvgAggregateInputType
    _sum?: WarrantySumAggregateInputType
    _min?: WarrantyMinAggregateInputType
    _max?: WarrantyMaxAggregateInputType
  }

  export type WarrantyGroupByOutputType = {
    id: number
    projectId: number | null
    clientId: string
    startDate: Date
    durationMonths: number
    projectName: string
    createdAt: Date
    _count: WarrantyCountAggregateOutputType | null
    _avg: WarrantyAvgAggregateOutputType | null
    _sum: WarrantySumAggregateOutputType | null
    _min: WarrantyMinAggregateOutputType | null
    _max: WarrantyMaxAggregateOutputType | null
  }

  type GetWarrantyGroupByPayload<T extends WarrantyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WarrantyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WarrantyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WarrantyGroupByOutputType[P]>
            : GetScalarType<T[P], WarrantyGroupByOutputType[P]>
        }
      >
    >


  export type WarrantySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    clientId?: boolean
    startDate?: boolean
    durationMonths?: boolean
    projectName?: boolean
    createdAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warranty"]>

  export type WarrantySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    clientId?: boolean
    startDate?: boolean
    durationMonths?: boolean
    projectName?: boolean
    createdAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warranty"]>

  export type WarrantySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    clientId?: boolean
    startDate?: boolean
    durationMonths?: boolean
    projectName?: boolean
    createdAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warranty"]>

  export type WarrantySelectScalar = {
    id?: boolean
    projectId?: boolean
    clientId?: boolean
    startDate?: boolean
    durationMonths?: boolean
    projectName?: boolean
    createdAt?: boolean
  }

  export type WarrantyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "clientId" | "startDate" | "durationMonths" | "projectName" | "createdAt", ExtArgs["result"]["warranty"]>
  export type WarrantyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WarrantyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WarrantyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WarrantyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Warranty"
    objects: {
      client: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      projectId: number | null
      clientId: string
      startDate: Date
      durationMonths: number
      projectName: string
      createdAt: Date
    }, ExtArgs["result"]["warranty"]>
    composites: {}
  }

  type WarrantyGetPayload<S extends boolean | null | undefined | WarrantyDefaultArgs> = $Result.GetResult<Prisma.$WarrantyPayload, S>

  type WarrantyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WarrantyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WarrantyCountAggregateInputType | true
    }

  export interface WarrantyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Warranty'], meta: { name: 'Warranty' } }
    /**
     * Find zero or one Warranty that matches the filter.
     * @param {WarrantyFindUniqueArgs} args - Arguments to find a Warranty
     * @example
     * // Get one Warranty
     * const warranty = await prisma.warranty.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WarrantyFindUniqueArgs>(args: SelectSubset<T, WarrantyFindUniqueArgs<ExtArgs>>): Prisma__WarrantyClient<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Warranty that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WarrantyFindUniqueOrThrowArgs} args - Arguments to find a Warranty
     * @example
     * // Get one Warranty
     * const warranty = await prisma.warranty.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WarrantyFindUniqueOrThrowArgs>(args: SelectSubset<T, WarrantyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WarrantyClient<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Warranty that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarrantyFindFirstArgs} args - Arguments to find a Warranty
     * @example
     * // Get one Warranty
     * const warranty = await prisma.warranty.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WarrantyFindFirstArgs>(args?: SelectSubset<T, WarrantyFindFirstArgs<ExtArgs>>): Prisma__WarrantyClient<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Warranty that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarrantyFindFirstOrThrowArgs} args - Arguments to find a Warranty
     * @example
     * // Get one Warranty
     * const warranty = await prisma.warranty.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WarrantyFindFirstOrThrowArgs>(args?: SelectSubset<T, WarrantyFindFirstOrThrowArgs<ExtArgs>>): Prisma__WarrantyClient<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Warranties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarrantyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Warranties
     * const warranties = await prisma.warranty.findMany()
     * 
     * // Get first 10 Warranties
     * const warranties = await prisma.warranty.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const warrantyWithIdOnly = await prisma.warranty.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WarrantyFindManyArgs>(args?: SelectSubset<T, WarrantyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Warranty.
     * @param {WarrantyCreateArgs} args - Arguments to create a Warranty.
     * @example
     * // Create one Warranty
     * const Warranty = await prisma.warranty.create({
     *   data: {
     *     // ... data to create a Warranty
     *   }
     * })
     * 
     */
    create<T extends WarrantyCreateArgs>(args: SelectSubset<T, WarrantyCreateArgs<ExtArgs>>): Prisma__WarrantyClient<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Warranties.
     * @param {WarrantyCreateManyArgs} args - Arguments to create many Warranties.
     * @example
     * // Create many Warranties
     * const warranty = await prisma.warranty.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WarrantyCreateManyArgs>(args?: SelectSubset<T, WarrantyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Warranties and returns the data saved in the database.
     * @param {WarrantyCreateManyAndReturnArgs} args - Arguments to create many Warranties.
     * @example
     * // Create many Warranties
     * const warranty = await prisma.warranty.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Warranties and only return the `id`
     * const warrantyWithIdOnly = await prisma.warranty.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WarrantyCreateManyAndReturnArgs>(args?: SelectSubset<T, WarrantyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Warranty.
     * @param {WarrantyDeleteArgs} args - Arguments to delete one Warranty.
     * @example
     * // Delete one Warranty
     * const Warranty = await prisma.warranty.delete({
     *   where: {
     *     // ... filter to delete one Warranty
     *   }
     * })
     * 
     */
    delete<T extends WarrantyDeleteArgs>(args: SelectSubset<T, WarrantyDeleteArgs<ExtArgs>>): Prisma__WarrantyClient<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Warranty.
     * @param {WarrantyUpdateArgs} args - Arguments to update one Warranty.
     * @example
     * // Update one Warranty
     * const warranty = await prisma.warranty.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WarrantyUpdateArgs>(args: SelectSubset<T, WarrantyUpdateArgs<ExtArgs>>): Prisma__WarrantyClient<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Warranties.
     * @param {WarrantyDeleteManyArgs} args - Arguments to filter Warranties to delete.
     * @example
     * // Delete a few Warranties
     * const { count } = await prisma.warranty.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WarrantyDeleteManyArgs>(args?: SelectSubset<T, WarrantyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Warranties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarrantyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Warranties
     * const warranty = await prisma.warranty.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WarrantyUpdateManyArgs>(args: SelectSubset<T, WarrantyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Warranties and returns the data updated in the database.
     * @param {WarrantyUpdateManyAndReturnArgs} args - Arguments to update many Warranties.
     * @example
     * // Update many Warranties
     * const warranty = await prisma.warranty.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Warranties and only return the `id`
     * const warrantyWithIdOnly = await prisma.warranty.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WarrantyUpdateManyAndReturnArgs>(args: SelectSubset<T, WarrantyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Warranty.
     * @param {WarrantyUpsertArgs} args - Arguments to update or create a Warranty.
     * @example
     * // Update or create a Warranty
     * const warranty = await prisma.warranty.upsert({
     *   create: {
     *     // ... data to create a Warranty
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Warranty we want to update
     *   }
     * })
     */
    upsert<T extends WarrantyUpsertArgs>(args: SelectSubset<T, WarrantyUpsertArgs<ExtArgs>>): Prisma__WarrantyClient<$Result.GetResult<Prisma.$WarrantyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Warranties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarrantyCountArgs} args - Arguments to filter Warranties to count.
     * @example
     * // Count the number of Warranties
     * const count = await prisma.warranty.count({
     *   where: {
     *     // ... the filter for the Warranties we want to count
     *   }
     * })
    **/
    count<T extends WarrantyCountArgs>(
      args?: Subset<T, WarrantyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WarrantyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Warranty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarrantyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WarrantyAggregateArgs>(args: Subset<T, WarrantyAggregateArgs>): Prisma.PrismaPromise<GetWarrantyAggregateType<T>>

    /**
     * Group by Warranty.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarrantyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WarrantyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WarrantyGroupByArgs['orderBy'] }
        : { orderBy?: WarrantyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WarrantyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarrantyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Warranty model
   */
  readonly fields: WarrantyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Warranty.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WarrantyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Warranty model
   */
  interface WarrantyFieldRefs {
    readonly id: FieldRef<"Warranty", 'Int'>
    readonly projectId: FieldRef<"Warranty", 'Int'>
    readonly clientId: FieldRef<"Warranty", 'String'>
    readonly startDate: FieldRef<"Warranty", 'DateTime'>
    readonly durationMonths: FieldRef<"Warranty", 'Int'>
    readonly projectName: FieldRef<"Warranty", 'String'>
    readonly createdAt: FieldRef<"Warranty", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Warranty findUnique
   */
  export type WarrantyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    /**
     * Filter, which Warranty to fetch.
     */
    where: WarrantyWhereUniqueInput
  }

  /**
   * Warranty findUniqueOrThrow
   */
  export type WarrantyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    /**
     * Filter, which Warranty to fetch.
     */
    where: WarrantyWhereUniqueInput
  }

  /**
   * Warranty findFirst
   */
  export type WarrantyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    /**
     * Filter, which Warranty to fetch.
     */
    where?: WarrantyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warranties to fetch.
     */
    orderBy?: WarrantyOrderByWithRelationInput | WarrantyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warranties.
     */
    cursor?: WarrantyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warranties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warranties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warranties.
     */
    distinct?: WarrantyScalarFieldEnum | WarrantyScalarFieldEnum[]
  }

  /**
   * Warranty findFirstOrThrow
   */
  export type WarrantyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    /**
     * Filter, which Warranty to fetch.
     */
    where?: WarrantyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warranties to fetch.
     */
    orderBy?: WarrantyOrderByWithRelationInput | WarrantyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warranties.
     */
    cursor?: WarrantyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warranties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warranties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warranties.
     */
    distinct?: WarrantyScalarFieldEnum | WarrantyScalarFieldEnum[]
  }

  /**
   * Warranty findMany
   */
  export type WarrantyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    /**
     * Filter, which Warranties to fetch.
     */
    where?: WarrantyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warranties to fetch.
     */
    orderBy?: WarrantyOrderByWithRelationInput | WarrantyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Warranties.
     */
    cursor?: WarrantyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warranties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warranties.
     */
    skip?: number
    distinct?: WarrantyScalarFieldEnum | WarrantyScalarFieldEnum[]
  }

  /**
   * Warranty create
   */
  export type WarrantyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    /**
     * The data needed to create a Warranty.
     */
    data: XOR<WarrantyCreateInput, WarrantyUncheckedCreateInput>
  }

  /**
   * Warranty createMany
   */
  export type WarrantyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Warranties.
     */
    data: WarrantyCreateManyInput | WarrantyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Warranty createManyAndReturn
   */
  export type WarrantyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * The data used to create many Warranties.
     */
    data: WarrantyCreateManyInput | WarrantyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Warranty update
   */
  export type WarrantyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    /**
     * The data needed to update a Warranty.
     */
    data: XOR<WarrantyUpdateInput, WarrantyUncheckedUpdateInput>
    /**
     * Choose, which Warranty to update.
     */
    where: WarrantyWhereUniqueInput
  }

  /**
   * Warranty updateMany
   */
  export type WarrantyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Warranties.
     */
    data: XOR<WarrantyUpdateManyMutationInput, WarrantyUncheckedUpdateManyInput>
    /**
     * Filter which Warranties to update
     */
    where?: WarrantyWhereInput
    /**
     * Limit how many Warranties to update.
     */
    limit?: number
  }

  /**
   * Warranty updateManyAndReturn
   */
  export type WarrantyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * The data used to update Warranties.
     */
    data: XOR<WarrantyUpdateManyMutationInput, WarrantyUncheckedUpdateManyInput>
    /**
     * Filter which Warranties to update
     */
    where?: WarrantyWhereInput
    /**
     * Limit how many Warranties to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Warranty upsert
   */
  export type WarrantyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    /**
     * The filter to search for the Warranty to update in case it exists.
     */
    where: WarrantyWhereUniqueInput
    /**
     * In case the Warranty found by the `where` argument doesn't exist, create a new Warranty with this data.
     */
    create: XOR<WarrantyCreateInput, WarrantyUncheckedCreateInput>
    /**
     * In case the Warranty was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WarrantyUpdateInput, WarrantyUncheckedUpdateInput>
  }

  /**
   * Warranty delete
   */
  export type WarrantyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
    /**
     * Filter which Warranty to delete.
     */
    where: WarrantyWhereUniqueInput
  }

  /**
   * Warranty deleteMany
   */
  export type WarrantyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warranties to delete
     */
    where?: WarrantyWhereInput
    /**
     * Limit how many Warranties to delete.
     */
    limit?: number
  }

  /**
   * Warranty without action
   */
  export type WarrantyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warranty
     */
    select?: WarrantySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warranty
     */
    omit?: WarrantyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarrantyInclude<ExtArgs> | null
  }


  /**
   * Model Certificate
   */

  export type AggregateCertificate = {
    _count: CertificateCountAggregateOutputType | null
    _avg: CertificateAvgAggregateOutputType | null
    _sum: CertificateSumAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  export type CertificateAvgAggregateOutputType = {
    id: number | null
  }

  export type CertificateSumAggregateOutputType = {
    id: number | null
  }

  export type CertificateMinAggregateOutputType = {
    id: number | null
    clientId: string | null
    fileUrl: string | null
    title: string | null
    issuedDate: Date | null
    createdAt: Date | null
  }

  export type CertificateMaxAggregateOutputType = {
    id: number | null
    clientId: string | null
    fileUrl: string | null
    title: string | null
    issuedDate: Date | null
    createdAt: Date | null
  }

  export type CertificateCountAggregateOutputType = {
    id: number
    clientId: number
    fileUrl: number
    title: number
    issuedDate: number
    createdAt: number
    _all: number
  }


  export type CertificateAvgAggregateInputType = {
    id?: true
  }

  export type CertificateSumAggregateInputType = {
    id?: true
  }

  export type CertificateMinAggregateInputType = {
    id?: true
    clientId?: true
    fileUrl?: true
    title?: true
    issuedDate?: true
    createdAt?: true
  }

  export type CertificateMaxAggregateInputType = {
    id?: true
    clientId?: true
    fileUrl?: true
    title?: true
    issuedDate?: true
    createdAt?: true
  }

  export type CertificateCountAggregateInputType = {
    id?: true
    clientId?: true
    fileUrl?: true
    title?: true
    issuedDate?: true
    createdAt?: true
    _all?: true
  }

  export type CertificateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificate to aggregate.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Certificates
    **/
    _count?: true | CertificateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CertificateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CertificateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateMaxAggregateInputType
  }

  export type GetCertificateAggregateType<T extends CertificateAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificate[P]>
      : GetScalarType<T[P], AggregateCertificate[P]>
  }




  export type CertificateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithAggregationInput | CertificateOrderByWithAggregationInput[]
    by: CertificateScalarFieldEnum[] | CertificateScalarFieldEnum
    having?: CertificateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateCountAggregateInputType | true
    _avg?: CertificateAvgAggregateInputType
    _sum?: CertificateSumAggregateInputType
    _min?: CertificateMinAggregateInputType
    _max?: CertificateMaxAggregateInputType
  }

  export type CertificateGroupByOutputType = {
    id: number
    clientId: string
    fileUrl: string
    title: string
    issuedDate: Date
    createdAt: Date
    _count: CertificateCountAggregateOutputType | null
    _avg: CertificateAvgAggregateOutputType | null
    _sum: CertificateSumAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  type GetCertificateGroupByPayload<T extends CertificateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateGroupByOutputType[P]>
        }
      >
    >


  export type CertificateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    fileUrl?: boolean
    title?: boolean
    issuedDate?: boolean
    createdAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    fileUrl?: boolean
    title?: boolean
    issuedDate?: boolean
    createdAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    fileUrl?: boolean
    title?: boolean
    issuedDate?: boolean
    createdAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>

  export type CertificateSelectScalar = {
    id?: boolean
    clientId?: boolean
    fileUrl?: boolean
    title?: boolean
    issuedDate?: boolean
    createdAt?: boolean
  }

  export type CertificateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "fileUrl" | "title" | "issuedDate" | "createdAt", ExtArgs["result"]["certificate"]>
  export type CertificateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CertificateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CertificateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CertificatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Certificate"
    objects: {
      client: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientId: string
      fileUrl: string
      title: string
      issuedDate: Date
      createdAt: Date
    }, ExtArgs["result"]["certificate"]>
    composites: {}
  }

  type CertificateGetPayload<S extends boolean | null | undefined | CertificateDefaultArgs> = $Result.GetResult<Prisma.$CertificatePayload, S>

  type CertificateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateCountAggregateInputType | true
    }

  export interface CertificateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Certificate'], meta: { name: 'Certificate' } }
    /**
     * Find zero or one Certificate that matches the filter.
     * @param {CertificateFindUniqueArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateFindUniqueArgs>(args: SelectSubset<T, CertificateFindUniqueArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Certificate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateFindUniqueOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateFindFirstArgs>(args?: SelectSubset<T, CertificateFindFirstArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Certificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Certificates
     * const certificates = await prisma.certificate.findMany()
     * 
     * // Get first 10 Certificates
     * const certificates = await prisma.certificate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateWithIdOnly = await prisma.certificate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateFindManyArgs>(args?: SelectSubset<T, CertificateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Certificate.
     * @param {CertificateCreateArgs} args - Arguments to create a Certificate.
     * @example
     * // Create one Certificate
     * const Certificate = await prisma.certificate.create({
     *   data: {
     *     // ... data to create a Certificate
     *   }
     * })
     * 
     */
    create<T extends CertificateCreateArgs>(args: SelectSubset<T, CertificateCreateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Certificates.
     * @param {CertificateCreateManyArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificate = await prisma.certificate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateCreateManyArgs>(args?: SelectSubset<T, CertificateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Certificates and returns the data saved in the database.
     * @param {CertificateCreateManyAndReturnArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificate = await prisma.certificate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Certificates and only return the `id`
     * const certificateWithIdOnly = await prisma.certificate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CertificateCreateManyAndReturnArgs>(args?: SelectSubset<T, CertificateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Certificate.
     * @param {CertificateDeleteArgs} args - Arguments to delete one Certificate.
     * @example
     * // Delete one Certificate
     * const Certificate = await prisma.certificate.delete({
     *   where: {
     *     // ... filter to delete one Certificate
     *   }
     * })
     * 
     */
    delete<T extends CertificateDeleteArgs>(args: SelectSubset<T, CertificateDeleteArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Certificate.
     * @param {CertificateUpdateArgs} args - Arguments to update one Certificate.
     * @example
     * // Update one Certificate
     * const certificate = await prisma.certificate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateUpdateArgs>(args: SelectSubset<T, CertificateUpdateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Certificates.
     * @param {CertificateDeleteManyArgs} args - Arguments to filter Certificates to delete.
     * @example
     * // Delete a few Certificates
     * const { count } = await prisma.certificate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateDeleteManyArgs>(args?: SelectSubset<T, CertificateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateUpdateManyArgs>(args: SelectSubset<T, CertificateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates and returns the data updated in the database.
     * @param {CertificateUpdateManyAndReturnArgs} args - Arguments to update many Certificates.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Certificates and only return the `id`
     * const certificateWithIdOnly = await prisma.certificate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CertificateUpdateManyAndReturnArgs>(args: SelectSubset<T, CertificateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Certificate.
     * @param {CertificateUpsertArgs} args - Arguments to update or create a Certificate.
     * @example
     * // Update or create a Certificate
     * const certificate = await prisma.certificate.upsert({
     *   create: {
     *     // ... data to create a Certificate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Certificate we want to update
     *   }
     * })
     */
    upsert<T extends CertificateUpsertArgs>(args: SelectSubset<T, CertificateUpsertArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateCountArgs} args - Arguments to filter Certificates to count.
     * @example
     * // Count the number of Certificates
     * const count = await prisma.certificate.count({
     *   where: {
     *     // ... the filter for the Certificates we want to count
     *   }
     * })
    **/
    count<T extends CertificateCountArgs>(
      args?: Subset<T, CertificateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateAggregateArgs>(args: Subset<T, CertificateAggregateArgs>): Prisma.PrismaPromise<GetCertificateAggregateType<T>>

    /**
     * Group by Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateGroupByArgs['orderBy'] }
        : { orderBy?: CertificateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Certificate model
   */
  readonly fields: CertificateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Certificate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Certificate model
   */
  interface CertificateFieldRefs {
    readonly id: FieldRef<"Certificate", 'Int'>
    readonly clientId: FieldRef<"Certificate", 'String'>
    readonly fileUrl: FieldRef<"Certificate", 'String'>
    readonly title: FieldRef<"Certificate", 'String'>
    readonly issuedDate: FieldRef<"Certificate", 'DateTime'>
    readonly createdAt: FieldRef<"Certificate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Certificate findUnique
   */
  export type CertificateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findUniqueOrThrow
   */
  export type CertificateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findFirst
   */
  export type CertificateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findFirstOrThrow
   */
  export type CertificateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findMany
   */
  export type CertificateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate create
   */
  export type CertificateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to create a Certificate.
     */
    data: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
  }

  /**
   * Certificate createMany
   */
  export type CertificateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Certificates.
     */
    data: CertificateCreateManyInput | CertificateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Certificate createManyAndReturn
   */
  export type CertificateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * The data used to create many Certificates.
     */
    data: CertificateCreateManyInput | CertificateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Certificate update
   */
  export type CertificateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to update a Certificate.
     */
    data: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
    /**
     * Choose, which Certificate to update.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate updateMany
   */
  export type CertificateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
  }

  /**
   * Certificate updateManyAndReturn
   */
  export type CertificateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Certificate upsert
   */
  export type CertificateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The filter to search for the Certificate to update in case it exists.
     */
    where: CertificateWhereUniqueInput
    /**
     * In case the Certificate found by the `where` argument doesn't exist, create a new Certificate with this data.
     */
    create: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
    /**
     * In case the Certificate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
  }

  /**
   * Certificate delete
   */
  export type CertificateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter which Certificate to delete.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate deleteMany
   */
  export type CertificateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificates to delete
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to delete.
     */
    limit?: number
  }

  /**
   * Certificate without action
   */
  export type CertificateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    clientId: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    clientId: string | null
    title: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    clientId: number
    title: number
    message: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    clientId?: true
    title?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    clientId?: true
    title?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    clientId?: true
    title?: true
    message?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    clientId: string
    title: string
    message: string
    isRead: boolean
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    clientId?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "title" | "message" | "isRead" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      client: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientId: string
      title: string
      message: string
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly clientId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    category: string | null
    content: string | null
    imagePath: string | null
    seoTitle: string | null
    seoDescription: string | null
    seoKeywords: string | null
    published: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    category: string | null
    content: string | null
    imagePath: string | null
    seoTitle: string | null
    seoDescription: string | null
    seoKeywords: string | null
    published: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    category: number
    content: number
    imagePath: number
    seoTitle: number
    seoDescription: number
    seoKeywords: number
    published: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PostMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    category?: true
    content?: true
    imagePath?: true
    seoTitle?: true
    seoDescription?: true
    seoKeywords?: true
    published?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    category?: true
    content?: true
    imagePath?: true
    seoTitle?: true
    seoDescription?: true
    seoKeywords?: true
    published?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    category?: true
    content?: true
    imagePath?: true
    seoTitle?: true
    seoDescription?: true
    seoKeywords?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    title: string
    slug: string
    category: string
    content: string
    imagePath: string
    seoTitle: string | null
    seoDescription: string | null
    seoKeywords: string | null
    published: boolean
    createdAt: Date
    updatedAt: Date
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    category?: boolean
    content?: boolean
    imagePath?: boolean
    seoTitle?: boolean
    seoDescription?: boolean
    seoKeywords?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    category?: boolean
    content?: boolean
    imagePath?: boolean
    seoTitle?: boolean
    seoDescription?: boolean
    seoKeywords?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["post"]>

  export type PostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    category?: boolean
    content?: boolean
    imagePath?: boolean
    seoTitle?: boolean
    seoDescription?: boolean
    seoKeywords?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    category?: boolean
    content?: boolean
    imagePath?: boolean
    seoTitle?: boolean
    seoDescription?: boolean
    seoKeywords?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "slug" | "category" | "content" | "imagePath" | "seoTitle" | "seoDescription" | "seoKeywords" | "published" | "createdAt" | "updatedAt", ExtArgs["result"]["post"]>

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      slug: string
      category: string
      content: string
      imagePath: string
      seoTitle: string | null
      seoDescription: string | null
      seoKeywords: string | null
      published: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly title: FieldRef<"Post", 'String'>
    readonly slug: FieldRef<"Post", 'String'>
    readonly category: FieldRef<"Post", 'String'>
    readonly content: FieldRef<"Post", 'String'>
    readonly imagePath: FieldRef<"Post", 'String'>
    readonly seoTitle: FieldRef<"Post", 'String'>
    readonly seoDescription: FieldRef<"Post", 'String'>
    readonly seoKeywords: FieldRef<"Post", 'String'>
    readonly published: FieldRef<"Post", 'Boolean'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
  }


  /**
   * Model ChatSession
   */

  export type AggregateChatSession = {
    _count: ChatSessionCountAggregateOutputType | null
    _avg: ChatSessionAvgAggregateOutputType | null
    _sum: ChatSessionSumAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  export type ChatSessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ChatSessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ChatSessionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    sessionKey: string | null
    createdAt: Date | null
  }

  export type ChatSessionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    sessionKey: string | null
    createdAt: Date | null
  }

  export type ChatSessionCountAggregateOutputType = {
    id: number
    userId: number
    sessionKey: number
    createdAt: number
    _all: number
  }


  export type ChatSessionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ChatSessionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ChatSessionMinAggregateInputType = {
    id?: true
    userId?: true
    sessionKey?: true
    createdAt?: true
  }

  export type ChatSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionKey?: true
    createdAt?: true
  }

  export type ChatSessionCountAggregateInputType = {
    id?: true
    userId?: true
    sessionKey?: true
    createdAt?: true
    _all?: true
  }

  export type ChatSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSession to aggregate.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatSessions
    **/
    _count?: true | ChatSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatSessionMaxAggregateInputType
  }

  export type GetChatSessionAggregateType<T extends ChatSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateChatSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatSession[P]>
      : GetScalarType<T[P], AggregateChatSession[P]>
  }




  export type ChatSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatSessionWhereInput
    orderBy?: ChatSessionOrderByWithAggregationInput | ChatSessionOrderByWithAggregationInput[]
    by: ChatSessionScalarFieldEnum[] | ChatSessionScalarFieldEnum
    having?: ChatSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatSessionCountAggregateInputType | true
    _avg?: ChatSessionAvgAggregateInputType
    _sum?: ChatSessionSumAggregateInputType
    _min?: ChatSessionMinAggregateInputType
    _max?: ChatSessionMaxAggregateInputType
  }

  export type ChatSessionGroupByOutputType = {
    id: number
    userId: number | null
    sessionKey: string | null
    createdAt: Date
    _count: ChatSessionCountAggregateOutputType | null
    _avg: ChatSessionAvgAggregateOutputType | null
    _sum: ChatSessionSumAggregateOutputType | null
    _min: ChatSessionMinAggregateOutputType | null
    _max: ChatSessionMaxAggregateOutputType | null
  }

  type GetChatSessionGroupByPayload<T extends ChatSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ChatSessionGroupByOutputType[P]>
        }
      >
    >


  export type ChatSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionKey?: boolean
    createdAt?: boolean
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionKey?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionKey?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["chatSession"]>

  export type ChatSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionKey?: boolean
    createdAt?: boolean
  }

  export type ChatSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "sessionKey" | "createdAt", ExtArgs["result"]["chatSession"]>
  export type ChatSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatSession$messagesArgs<ExtArgs>
    _count?: boolean | ChatSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ChatSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ChatSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatSession"
    objects: {
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      sessionKey: string | null
      createdAt: Date
    }, ExtArgs["result"]["chatSession"]>
    composites: {}
  }

  type ChatSessionGetPayload<S extends boolean | null | undefined | ChatSessionDefaultArgs> = $Result.GetResult<Prisma.$ChatSessionPayload, S>

  type ChatSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatSessionCountAggregateInputType | true
    }

  export interface ChatSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatSession'], meta: { name: 'ChatSession' } }
    /**
     * Find zero or one ChatSession that matches the filter.
     * @param {ChatSessionFindUniqueArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatSessionFindUniqueArgs>(args: SelectSubset<T, ChatSessionFindUniqueArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatSessionFindUniqueOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatSessionFindFirstArgs>(args?: SelectSubset<T, ChatSessionFindFirstArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindFirstOrThrowArgs} args - Arguments to find a ChatSession
     * @example
     * // Get one ChatSession
     * const chatSession = await prisma.chatSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatSessions
     * const chatSessions = await prisma.chatSession.findMany()
     * 
     * // Get first 10 ChatSessions
     * const chatSessions = await prisma.chatSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatSessionFindManyArgs>(args?: SelectSubset<T, ChatSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatSession.
     * @param {ChatSessionCreateArgs} args - Arguments to create a ChatSession.
     * @example
     * // Create one ChatSession
     * const ChatSession = await prisma.chatSession.create({
     *   data: {
     *     // ... data to create a ChatSession
     *   }
     * })
     * 
     */
    create<T extends ChatSessionCreateArgs>(args: SelectSubset<T, ChatSessionCreateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatSessions.
     * @param {ChatSessionCreateManyArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatSessionCreateManyArgs>(args?: SelectSubset<T, ChatSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatSessions and returns the data saved in the database.
     * @param {ChatSessionCreateManyAndReturnArgs} args - Arguments to create many ChatSessions.
     * @example
     * // Create many ChatSessions
     * const chatSession = await prisma.chatSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatSession.
     * @param {ChatSessionDeleteArgs} args - Arguments to delete one ChatSession.
     * @example
     * // Delete one ChatSession
     * const ChatSession = await prisma.chatSession.delete({
     *   where: {
     *     // ... filter to delete one ChatSession
     *   }
     * })
     * 
     */
    delete<T extends ChatSessionDeleteArgs>(args: SelectSubset<T, ChatSessionDeleteArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatSession.
     * @param {ChatSessionUpdateArgs} args - Arguments to update one ChatSession.
     * @example
     * // Update one ChatSession
     * const chatSession = await prisma.chatSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatSessionUpdateArgs>(args: SelectSubset<T, ChatSessionUpdateArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatSessions.
     * @param {ChatSessionDeleteManyArgs} args - Arguments to filter ChatSessions to delete.
     * @example
     * // Delete a few ChatSessions
     * const { count } = await prisma.chatSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatSessionDeleteManyArgs>(args?: SelectSubset<T, ChatSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatSessionUpdateManyArgs>(args: SelectSubset<T, ChatSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatSessions and returns the data updated in the database.
     * @param {ChatSessionUpdateManyAndReturnArgs} args - Arguments to update many ChatSessions.
     * @example
     * // Update many ChatSessions
     * const chatSession = await prisma.chatSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatSessions and only return the `id`
     * const chatSessionWithIdOnly = await prisma.chatSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatSession.
     * @param {ChatSessionUpsertArgs} args - Arguments to update or create a ChatSession.
     * @example
     * // Update or create a ChatSession
     * const chatSession = await prisma.chatSession.upsert({
     *   create: {
     *     // ... data to create a ChatSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatSession we want to update
     *   }
     * })
     */
    upsert<T extends ChatSessionUpsertArgs>(args: SelectSubset<T, ChatSessionUpsertArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionCountArgs} args - Arguments to filter ChatSessions to count.
     * @example
     * // Count the number of ChatSessions
     * const count = await prisma.chatSession.count({
     *   where: {
     *     // ... the filter for the ChatSessions we want to count
     *   }
     * })
    **/
    count<T extends ChatSessionCountArgs>(
      args?: Subset<T, ChatSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatSessionAggregateArgs>(args: Subset<T, ChatSessionAggregateArgs>): Prisma.PrismaPromise<GetChatSessionAggregateType<T>>

    /**
     * Group by ChatSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatSessionGroupByArgs['orderBy'] }
        : { orderBy?: ChatSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatSession model
   */
  readonly fields: ChatSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends ChatSession$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatSession$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatSession model
   */
  interface ChatSessionFieldRefs {
    readonly id: FieldRef<"ChatSession", 'Int'>
    readonly userId: FieldRef<"ChatSession", 'Int'>
    readonly sessionKey: FieldRef<"ChatSession", 'String'>
    readonly createdAt: FieldRef<"ChatSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatSession findUnique
   */
  export type ChatSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findUniqueOrThrow
   */
  export type ChatSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession findFirst
   */
  export type ChatSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findFirstOrThrow
   */
  export type ChatSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSession to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatSessions.
     */
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession findMany
   */
  export type ChatSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatSessions to fetch.
     */
    where?: ChatSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatSessions to fetch.
     */
    orderBy?: ChatSessionOrderByWithRelationInput | ChatSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatSessions.
     */
    cursor?: ChatSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatSessions.
     */
    skip?: number
    distinct?: ChatSessionScalarFieldEnum | ChatSessionScalarFieldEnum[]
  }

  /**
   * ChatSession create
   */
  export type ChatSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatSession.
     */
    data?: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
  }

  /**
   * ChatSession createMany
   */
  export type ChatSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatSession createManyAndReturn
   */
  export type ChatSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to create many ChatSessions.
     */
    data: ChatSessionCreateManyInput | ChatSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatSession update
   */
  export type ChatSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatSession.
     */
    data: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
    /**
     * Choose, which ChatSession to update.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession updateMany
   */
  export type ChatSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
  }

  /**
   * ChatSession updateManyAndReturn
   */
  export type ChatSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * The data used to update ChatSessions.
     */
    data: XOR<ChatSessionUpdateManyMutationInput, ChatSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatSessions to update
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to update.
     */
    limit?: number
  }

  /**
   * ChatSession upsert
   */
  export type ChatSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatSession to update in case it exists.
     */
    where: ChatSessionWhereUniqueInput
    /**
     * In case the ChatSession found by the `where` argument doesn't exist, create a new ChatSession with this data.
     */
    create: XOR<ChatSessionCreateInput, ChatSessionUncheckedCreateInput>
    /**
     * In case the ChatSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatSessionUpdateInput, ChatSessionUncheckedUpdateInput>
  }

  /**
   * ChatSession delete
   */
  export type ChatSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
    /**
     * Filter which ChatSession to delete.
     */
    where: ChatSessionWhereUniqueInput
  }

  /**
   * ChatSession deleteMany
   */
  export type ChatSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatSessions to delete
     */
    where?: ChatSessionWhereInput
    /**
     * Limit how many ChatSessions to delete.
     */
    limit?: number
  }

  /**
   * ChatSession.messages
   */
  export type ChatSession$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * ChatSession without action
   */
  export type ChatSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatSession
     */
    select?: ChatSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatSession
     */
    omit?: ChatSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatSessionInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    chatSessionId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    chatSessionId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    chatSessionId: number | null
    sender: string | null
    content: string | null
    isTransferred: boolean | null
    createdAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    chatSessionId: number | null
    sender: string | null
    content: string | null
    isTransferred: boolean | null
    createdAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    chatSessionId: number
    sender: number
    content: number
    isTransferred: number
    createdAt: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    chatSessionId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    chatSessionId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    chatSessionId?: true
    sender?: true
    content?: true
    isTransferred?: true
    createdAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    chatSessionId?: true
    sender?: true
    content?: true
    isTransferred?: true
    createdAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    chatSessionId?: true
    sender?: true
    content?: true
    isTransferred?: true
    createdAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    chatSessionId: number
    sender: string
    content: string
    isTransferred: boolean
    createdAt: Date
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatSessionId?: boolean
    sender?: boolean
    content?: boolean
    isTransferred?: boolean
    createdAt?: boolean
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatSessionId?: boolean
    sender?: boolean
    content?: boolean
    isTransferred?: boolean
    createdAt?: boolean
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    chatSessionId?: boolean
    sender?: boolean
    content?: boolean
    isTransferred?: boolean
    createdAt?: boolean
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    chatSessionId?: boolean
    sender?: boolean
    content?: boolean
    isTransferred?: boolean
    createdAt?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "chatSessionId" | "sender" | "content" | "isTransferred" | "createdAt", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatSession?: boolean | ChatSessionDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      chatSession: Prisma.$ChatSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      chatSessionId: number
      sender: string
      content: string
      isTransferred: boolean
      createdAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatSession<T extends ChatSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatSessionDefaultArgs<ExtArgs>>): Prisma__ChatSessionClient<$Result.GetResult<Prisma.$ChatSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly chatSessionId: FieldRef<"Message", 'Int'>
    readonly sender: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly isTransferred: FieldRef<"Message", 'Boolean'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model KnowledgeBase
   */

  export type AggregateKnowledgeBase = {
    _count: KnowledgeBaseCountAggregateOutputType | null
    _avg: KnowledgeBaseAvgAggregateOutputType | null
    _sum: KnowledgeBaseSumAggregateOutputType | null
    _min: KnowledgeBaseMinAggregateOutputType | null
    _max: KnowledgeBaseMaxAggregateOutputType | null
  }

  export type KnowledgeBaseAvgAggregateOutputType = {
    id: number | null
  }

  export type KnowledgeBaseSumAggregateOutputType = {
    id: number | null
  }

  export type KnowledgeBaseMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    createdAt: Date | null
  }

  export type KnowledgeBaseMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    createdAt: Date | null
  }

  export type KnowledgeBaseCountAggregateOutputType = {
    id: number
    title: number
    content: number
    createdAt: number
    _all: number
  }


  export type KnowledgeBaseAvgAggregateInputType = {
    id?: true
  }

  export type KnowledgeBaseSumAggregateInputType = {
    id?: true
  }

  export type KnowledgeBaseMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    createdAt?: true
  }

  export type KnowledgeBaseMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    createdAt?: true
  }

  export type KnowledgeBaseCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type KnowledgeBaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnowledgeBase to aggregate.
     */
    where?: KnowledgeBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeBases to fetch.
     */
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KnowledgeBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeBases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeBases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KnowledgeBases
    **/
    _count?: true | KnowledgeBaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KnowledgeBaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KnowledgeBaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KnowledgeBaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KnowledgeBaseMaxAggregateInputType
  }

  export type GetKnowledgeBaseAggregateType<T extends KnowledgeBaseAggregateArgs> = {
        [P in keyof T & keyof AggregateKnowledgeBase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKnowledgeBase[P]>
      : GetScalarType<T[P], AggregateKnowledgeBase[P]>
  }




  export type KnowledgeBaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KnowledgeBaseWhereInput
    orderBy?: KnowledgeBaseOrderByWithAggregationInput | KnowledgeBaseOrderByWithAggregationInput[]
    by: KnowledgeBaseScalarFieldEnum[] | KnowledgeBaseScalarFieldEnum
    having?: KnowledgeBaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KnowledgeBaseCountAggregateInputType | true
    _avg?: KnowledgeBaseAvgAggregateInputType
    _sum?: KnowledgeBaseSumAggregateInputType
    _min?: KnowledgeBaseMinAggregateInputType
    _max?: KnowledgeBaseMaxAggregateInputType
  }

  export type KnowledgeBaseGroupByOutputType = {
    id: number
    title: string
    content: string
    createdAt: Date
    _count: KnowledgeBaseCountAggregateOutputType | null
    _avg: KnowledgeBaseAvgAggregateOutputType | null
    _sum: KnowledgeBaseSumAggregateOutputType | null
    _min: KnowledgeBaseMinAggregateOutputType | null
    _max: KnowledgeBaseMaxAggregateOutputType | null
  }

  type GetKnowledgeBaseGroupByPayload<T extends KnowledgeBaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KnowledgeBaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KnowledgeBaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KnowledgeBaseGroupByOutputType[P]>
            : GetScalarType<T[P], KnowledgeBaseGroupByOutputType[P]>
        }
      >
    >


  export type KnowledgeBaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["knowledgeBase"]>

  export type KnowledgeBaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["knowledgeBase"]>

  export type KnowledgeBaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["knowledgeBase"]>

  export type KnowledgeBaseSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type KnowledgeBaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "createdAt", ExtArgs["result"]["knowledgeBase"]>

  export type $KnowledgeBasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KnowledgeBase"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["knowledgeBase"]>
    composites: {}
  }

  type KnowledgeBaseGetPayload<S extends boolean | null | undefined | KnowledgeBaseDefaultArgs> = $Result.GetResult<Prisma.$KnowledgeBasePayload, S>

  type KnowledgeBaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KnowledgeBaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KnowledgeBaseCountAggregateInputType | true
    }

  export interface KnowledgeBaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KnowledgeBase'], meta: { name: 'KnowledgeBase' } }
    /**
     * Find zero or one KnowledgeBase that matches the filter.
     * @param {KnowledgeBaseFindUniqueArgs} args - Arguments to find a KnowledgeBase
     * @example
     * // Get one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KnowledgeBaseFindUniqueArgs>(args: SelectSubset<T, KnowledgeBaseFindUniqueArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KnowledgeBase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KnowledgeBaseFindUniqueOrThrowArgs} args - Arguments to find a KnowledgeBase
     * @example
     * // Get one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KnowledgeBaseFindUniqueOrThrowArgs>(args: SelectSubset<T, KnowledgeBaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnowledgeBase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseFindFirstArgs} args - Arguments to find a KnowledgeBase
     * @example
     * // Get one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KnowledgeBaseFindFirstArgs>(args?: SelectSubset<T, KnowledgeBaseFindFirstArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnowledgeBase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseFindFirstOrThrowArgs} args - Arguments to find a KnowledgeBase
     * @example
     * // Get one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KnowledgeBaseFindFirstOrThrowArgs>(args?: SelectSubset<T, KnowledgeBaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KnowledgeBases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KnowledgeBases
     * const knowledgeBases = await prisma.knowledgeBase.findMany()
     * 
     * // Get first 10 KnowledgeBases
     * const knowledgeBases = await prisma.knowledgeBase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const knowledgeBaseWithIdOnly = await prisma.knowledgeBase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KnowledgeBaseFindManyArgs>(args?: SelectSubset<T, KnowledgeBaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KnowledgeBase.
     * @param {KnowledgeBaseCreateArgs} args - Arguments to create a KnowledgeBase.
     * @example
     * // Create one KnowledgeBase
     * const KnowledgeBase = await prisma.knowledgeBase.create({
     *   data: {
     *     // ... data to create a KnowledgeBase
     *   }
     * })
     * 
     */
    create<T extends KnowledgeBaseCreateArgs>(args: SelectSubset<T, KnowledgeBaseCreateArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KnowledgeBases.
     * @param {KnowledgeBaseCreateManyArgs} args - Arguments to create many KnowledgeBases.
     * @example
     * // Create many KnowledgeBases
     * const knowledgeBase = await prisma.knowledgeBase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KnowledgeBaseCreateManyArgs>(args?: SelectSubset<T, KnowledgeBaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KnowledgeBases and returns the data saved in the database.
     * @param {KnowledgeBaseCreateManyAndReturnArgs} args - Arguments to create many KnowledgeBases.
     * @example
     * // Create many KnowledgeBases
     * const knowledgeBase = await prisma.knowledgeBase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KnowledgeBases and only return the `id`
     * const knowledgeBaseWithIdOnly = await prisma.knowledgeBase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KnowledgeBaseCreateManyAndReturnArgs>(args?: SelectSubset<T, KnowledgeBaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KnowledgeBase.
     * @param {KnowledgeBaseDeleteArgs} args - Arguments to delete one KnowledgeBase.
     * @example
     * // Delete one KnowledgeBase
     * const KnowledgeBase = await prisma.knowledgeBase.delete({
     *   where: {
     *     // ... filter to delete one KnowledgeBase
     *   }
     * })
     * 
     */
    delete<T extends KnowledgeBaseDeleteArgs>(args: SelectSubset<T, KnowledgeBaseDeleteArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KnowledgeBase.
     * @param {KnowledgeBaseUpdateArgs} args - Arguments to update one KnowledgeBase.
     * @example
     * // Update one KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KnowledgeBaseUpdateArgs>(args: SelectSubset<T, KnowledgeBaseUpdateArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KnowledgeBases.
     * @param {KnowledgeBaseDeleteManyArgs} args - Arguments to filter KnowledgeBases to delete.
     * @example
     * // Delete a few KnowledgeBases
     * const { count } = await prisma.knowledgeBase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KnowledgeBaseDeleteManyArgs>(args?: SelectSubset<T, KnowledgeBaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnowledgeBases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KnowledgeBases
     * const knowledgeBase = await prisma.knowledgeBase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KnowledgeBaseUpdateManyArgs>(args: SelectSubset<T, KnowledgeBaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnowledgeBases and returns the data updated in the database.
     * @param {KnowledgeBaseUpdateManyAndReturnArgs} args - Arguments to update many KnowledgeBases.
     * @example
     * // Update many KnowledgeBases
     * const knowledgeBase = await prisma.knowledgeBase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KnowledgeBases and only return the `id`
     * const knowledgeBaseWithIdOnly = await prisma.knowledgeBase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KnowledgeBaseUpdateManyAndReturnArgs>(args: SelectSubset<T, KnowledgeBaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KnowledgeBase.
     * @param {KnowledgeBaseUpsertArgs} args - Arguments to update or create a KnowledgeBase.
     * @example
     * // Update or create a KnowledgeBase
     * const knowledgeBase = await prisma.knowledgeBase.upsert({
     *   create: {
     *     // ... data to create a KnowledgeBase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KnowledgeBase we want to update
     *   }
     * })
     */
    upsert<T extends KnowledgeBaseUpsertArgs>(args: SelectSubset<T, KnowledgeBaseUpsertArgs<ExtArgs>>): Prisma__KnowledgeBaseClient<$Result.GetResult<Prisma.$KnowledgeBasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KnowledgeBases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseCountArgs} args - Arguments to filter KnowledgeBases to count.
     * @example
     * // Count the number of KnowledgeBases
     * const count = await prisma.knowledgeBase.count({
     *   where: {
     *     // ... the filter for the KnowledgeBases we want to count
     *   }
     * })
    **/
    count<T extends KnowledgeBaseCountArgs>(
      args?: Subset<T, KnowledgeBaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KnowledgeBaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KnowledgeBase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KnowledgeBaseAggregateArgs>(args: Subset<T, KnowledgeBaseAggregateArgs>): Prisma.PrismaPromise<GetKnowledgeBaseAggregateType<T>>

    /**
     * Group by KnowledgeBase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeBaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KnowledgeBaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KnowledgeBaseGroupByArgs['orderBy'] }
        : { orderBy?: KnowledgeBaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KnowledgeBaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKnowledgeBaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KnowledgeBase model
   */
  readonly fields: KnowledgeBaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KnowledgeBase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KnowledgeBaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KnowledgeBase model
   */
  interface KnowledgeBaseFieldRefs {
    readonly id: FieldRef<"KnowledgeBase", 'Int'>
    readonly title: FieldRef<"KnowledgeBase", 'String'>
    readonly content: FieldRef<"KnowledgeBase", 'String'>
    readonly createdAt: FieldRef<"KnowledgeBase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KnowledgeBase findUnique
   */
  export type KnowledgeBaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Filter, which KnowledgeBase to fetch.
     */
    where: KnowledgeBaseWhereUniqueInput
  }

  /**
   * KnowledgeBase findUniqueOrThrow
   */
  export type KnowledgeBaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Filter, which KnowledgeBase to fetch.
     */
    where: KnowledgeBaseWhereUniqueInput
  }

  /**
   * KnowledgeBase findFirst
   */
  export type KnowledgeBaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Filter, which KnowledgeBase to fetch.
     */
    where?: KnowledgeBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeBases to fetch.
     */
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnowledgeBases.
     */
    cursor?: KnowledgeBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeBases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeBases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnowledgeBases.
     */
    distinct?: KnowledgeBaseScalarFieldEnum | KnowledgeBaseScalarFieldEnum[]
  }

  /**
   * KnowledgeBase findFirstOrThrow
   */
  export type KnowledgeBaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Filter, which KnowledgeBase to fetch.
     */
    where?: KnowledgeBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeBases to fetch.
     */
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnowledgeBases.
     */
    cursor?: KnowledgeBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeBases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeBases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnowledgeBases.
     */
    distinct?: KnowledgeBaseScalarFieldEnum | KnowledgeBaseScalarFieldEnum[]
  }

  /**
   * KnowledgeBase findMany
   */
  export type KnowledgeBaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Filter, which KnowledgeBases to fetch.
     */
    where?: KnowledgeBaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeBases to fetch.
     */
    orderBy?: KnowledgeBaseOrderByWithRelationInput | KnowledgeBaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KnowledgeBases.
     */
    cursor?: KnowledgeBaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeBases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeBases.
     */
    skip?: number
    distinct?: KnowledgeBaseScalarFieldEnum | KnowledgeBaseScalarFieldEnum[]
  }

  /**
   * KnowledgeBase create
   */
  export type KnowledgeBaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * The data needed to create a KnowledgeBase.
     */
    data: XOR<KnowledgeBaseCreateInput, KnowledgeBaseUncheckedCreateInput>
  }

  /**
   * KnowledgeBase createMany
   */
  export type KnowledgeBaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KnowledgeBases.
     */
    data: KnowledgeBaseCreateManyInput | KnowledgeBaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KnowledgeBase createManyAndReturn
   */
  export type KnowledgeBaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * The data used to create many KnowledgeBases.
     */
    data: KnowledgeBaseCreateManyInput | KnowledgeBaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KnowledgeBase update
   */
  export type KnowledgeBaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * The data needed to update a KnowledgeBase.
     */
    data: XOR<KnowledgeBaseUpdateInput, KnowledgeBaseUncheckedUpdateInput>
    /**
     * Choose, which KnowledgeBase to update.
     */
    where: KnowledgeBaseWhereUniqueInput
  }

  /**
   * KnowledgeBase updateMany
   */
  export type KnowledgeBaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KnowledgeBases.
     */
    data: XOR<KnowledgeBaseUpdateManyMutationInput, KnowledgeBaseUncheckedUpdateManyInput>
    /**
     * Filter which KnowledgeBases to update
     */
    where?: KnowledgeBaseWhereInput
    /**
     * Limit how many KnowledgeBases to update.
     */
    limit?: number
  }

  /**
   * KnowledgeBase updateManyAndReturn
   */
  export type KnowledgeBaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * The data used to update KnowledgeBases.
     */
    data: XOR<KnowledgeBaseUpdateManyMutationInput, KnowledgeBaseUncheckedUpdateManyInput>
    /**
     * Filter which KnowledgeBases to update
     */
    where?: KnowledgeBaseWhereInput
    /**
     * Limit how many KnowledgeBases to update.
     */
    limit?: number
  }

  /**
   * KnowledgeBase upsert
   */
  export type KnowledgeBaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * The filter to search for the KnowledgeBase to update in case it exists.
     */
    where: KnowledgeBaseWhereUniqueInput
    /**
     * In case the KnowledgeBase found by the `where` argument doesn't exist, create a new KnowledgeBase with this data.
     */
    create: XOR<KnowledgeBaseCreateInput, KnowledgeBaseUncheckedCreateInput>
    /**
     * In case the KnowledgeBase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KnowledgeBaseUpdateInput, KnowledgeBaseUncheckedUpdateInput>
  }

  /**
   * KnowledgeBase delete
   */
  export type KnowledgeBaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
    /**
     * Filter which KnowledgeBase to delete.
     */
    where: KnowledgeBaseWhereUniqueInput
  }

  /**
   * KnowledgeBase deleteMany
   */
  export type KnowledgeBaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnowledgeBases to delete
     */
    where?: KnowledgeBaseWhereInput
    /**
     * Limit how many KnowledgeBases to delete.
     */
    limit?: number
  }

  /**
   * KnowledgeBase without action
   */
  export type KnowledgeBaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeBase
     */
    select?: KnowledgeBaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeBase
     */
    omit?: KnowledgeBaseOmit<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number | null
  }

  export type ProjectSumAggregateOutputType = {
    id: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    description: string | null
    content: string | null
    videoUrl: string | null
    category: string | null
    location: string | null
    completionDate: Date | null
    seoTitle: string | null
    seoDescription: string | null
    seoKeywords: string | null
    published: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    description: string | null
    content: string | null
    videoUrl: string | null
    category: string | null
    location: string | null
    completionDate: Date | null
    seoTitle: string | null
    seoDescription: string | null
    seoKeywords: string | null
    published: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    description: number
    content: number
    imagePaths: number
    videoUrl: number
    category: number
    tags: number
    location: number
    completionDate: number
    seoTitle: number
    seoDescription: number
    seoKeywords: number
    published: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    content?: true
    videoUrl?: true
    category?: true
    location?: true
    completionDate?: true
    seoTitle?: true
    seoDescription?: true
    seoKeywords?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    content?: true
    videoUrl?: true
    category?: true
    location?: true
    completionDate?: true
    seoTitle?: true
    seoDescription?: true
    seoKeywords?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    content?: true
    imagePaths?: true
    videoUrl?: true
    category?: true
    tags?: true
    location?: true
    completionDate?: true
    seoTitle?: true
    seoDescription?: true
    seoKeywords?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: number
    title: string
    slug: string
    description: string
    content: string
    imagePaths: string[]
    videoUrl: string | null
    category: string
    tags: string[]
    location: string | null
    completionDate: Date | null
    seoTitle: string | null
    seoDescription: string | null
    seoKeywords: string | null
    published: boolean
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    content?: boolean
    imagePaths?: boolean
    videoUrl?: boolean
    category?: boolean
    tags?: boolean
    location?: boolean
    completionDate?: boolean
    seoTitle?: boolean
    seoDescription?: boolean
    seoKeywords?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    reviews?: boolean | Project$reviewsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    content?: boolean
    imagePaths?: boolean
    videoUrl?: boolean
    category?: boolean
    tags?: boolean
    location?: boolean
    completionDate?: boolean
    seoTitle?: boolean
    seoDescription?: boolean
    seoKeywords?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    content?: boolean
    imagePaths?: boolean
    videoUrl?: boolean
    category?: boolean
    tags?: boolean
    location?: boolean
    completionDate?: boolean
    seoTitle?: boolean
    seoDescription?: boolean
    seoKeywords?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    content?: boolean
    imagePaths?: boolean
    videoUrl?: boolean
    category?: boolean
    tags?: boolean
    location?: boolean
    completionDate?: boolean
    seoTitle?: boolean
    seoDescription?: boolean
    seoKeywords?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "slug" | "description" | "content" | "imagePaths" | "videoUrl" | "category" | "tags" | "location" | "completionDate" | "seoTitle" | "seoDescription" | "seoKeywords" | "published" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | Project$reviewsArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      slug: string
      description: string
      content: string
      imagePaths: string[]
      videoUrl: string | null
      category: string
      tags: string[]
      location: string | null
      completionDate: Date | null
      seoTitle: string | null
      seoDescription: string | null
      seoKeywords: string | null
      published: boolean
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reviews<T extends Project$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Project$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'Int'>
    readonly title: FieldRef<"Project", 'String'>
    readonly slug: FieldRef<"Project", 'String'>
    readonly description: FieldRef<"Project", 'String'>
    readonly content: FieldRef<"Project", 'String'>
    readonly imagePaths: FieldRef<"Project", 'String[]'>
    readonly videoUrl: FieldRef<"Project", 'String'>
    readonly category: FieldRef<"Project", 'String'>
    readonly tags: FieldRef<"Project", 'String[]'>
    readonly location: FieldRef<"Project", 'String'>
    readonly completionDate: FieldRef<"Project", 'DateTime'>
    readonly seoTitle: FieldRef<"Project", 'String'>
    readonly seoDescription: FieldRef<"Project", 'String'>
    readonly seoKeywords: FieldRef<"Project", 'String'>
    readonly published: FieldRef<"Project", 'Boolean'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly deletedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.reviews
   */
  export type Project$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model ProjectType
   */

  export type AggregateProjectType = {
    _count: ProjectTypeCountAggregateOutputType | null
    _avg: ProjectTypeAvgAggregateOutputType | null
    _sum: ProjectTypeSumAggregateOutputType | null
    _min: ProjectTypeMinAggregateOutputType | null
    _max: ProjectTypeMaxAggregateOutputType | null
  }

  export type ProjectTypeAvgAggregateOutputType = {
    id: number | null
    steps: number | null
  }

  export type ProjectTypeSumAggregateOutputType = {
    id: number | null
    steps: number | null
  }

  export type ProjectTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    icon: string | null
    steps: number | null
    active: boolean | null
    createdAt: Date | null
  }

  export type ProjectTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    icon: string | null
    steps: number | null
    active: boolean | null
    createdAt: Date | null
  }

  export type ProjectTypeCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    icon: number
    steps: number
    active: number
    createdAt: number
    _all: number
  }


  export type ProjectTypeAvgAggregateInputType = {
    id?: true
    steps?: true
  }

  export type ProjectTypeSumAggregateInputType = {
    id?: true
    steps?: true
  }

  export type ProjectTypeMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    icon?: true
    steps?: true
    active?: true
    createdAt?: true
  }

  export type ProjectTypeMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    icon?: true
    steps?: true
    active?: true
    createdAt?: true
  }

  export type ProjectTypeCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    icon?: true
    steps?: true
    active?: true
    createdAt?: true
    _all?: true
  }

  export type ProjectTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectType to aggregate.
     */
    where?: ProjectTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTypes to fetch.
     */
    orderBy?: ProjectTypeOrderByWithRelationInput | ProjectTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectTypes
    **/
    _count?: true | ProjectTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectTypeMaxAggregateInputType
  }

  export type GetProjectTypeAggregateType<T extends ProjectTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectType[P]>
      : GetScalarType<T[P], AggregateProjectType[P]>
  }




  export type ProjectTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectTypeWhereInput
    orderBy?: ProjectTypeOrderByWithAggregationInput | ProjectTypeOrderByWithAggregationInput[]
    by: ProjectTypeScalarFieldEnum[] | ProjectTypeScalarFieldEnum
    having?: ProjectTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectTypeCountAggregateInputType | true
    _avg?: ProjectTypeAvgAggregateInputType
    _sum?: ProjectTypeSumAggregateInputType
    _min?: ProjectTypeMinAggregateInputType
    _max?: ProjectTypeMaxAggregateInputType
  }

  export type ProjectTypeGroupByOutputType = {
    id: number
    name: string
    slug: string
    description: string | null
    icon: string | null
    steps: number
    active: boolean
    createdAt: Date
    _count: ProjectTypeCountAggregateOutputType | null
    _avg: ProjectTypeAvgAggregateOutputType | null
    _sum: ProjectTypeSumAggregateOutputType | null
    _min: ProjectTypeMinAggregateOutputType | null
    _max: ProjectTypeMaxAggregateOutputType | null
  }

  type GetProjectTypeGroupByPayload<T extends ProjectTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectTypeGroupByOutputType[P]>
        }
      >
    >


  export type ProjectTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    icon?: boolean
    steps?: boolean
    active?: boolean
    createdAt?: boolean
    packages?: boolean | ProjectType$packagesArgs<ExtArgs>
    _count?: boolean | ProjectTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectType"]>

  export type ProjectTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    icon?: boolean
    steps?: boolean
    active?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["projectType"]>

  export type ProjectTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    icon?: boolean
    steps?: boolean
    active?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["projectType"]>

  export type ProjectTypeSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    icon?: boolean
    steps?: boolean
    active?: boolean
    createdAt?: boolean
  }

  export type ProjectTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "icon" | "steps" | "active" | "createdAt", ExtArgs["result"]["projectType"]>
  export type ProjectTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packages?: boolean | ProjectType$packagesArgs<ExtArgs>
    _count?: boolean | ProjectTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProjectTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProjectTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectType"
    objects: {
      packages: Prisma.$WorkPackagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      description: string | null
      icon: string | null
      steps: number
      active: boolean
      createdAt: Date
    }, ExtArgs["result"]["projectType"]>
    composites: {}
  }

  type ProjectTypeGetPayload<S extends boolean | null | undefined | ProjectTypeDefaultArgs> = $Result.GetResult<Prisma.$ProjectTypePayload, S>

  type ProjectTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectTypeCountAggregateInputType | true
    }

  export interface ProjectTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectType'], meta: { name: 'ProjectType' } }
    /**
     * Find zero or one ProjectType that matches the filter.
     * @param {ProjectTypeFindUniqueArgs} args - Arguments to find a ProjectType
     * @example
     * // Get one ProjectType
     * const projectType = await prisma.projectType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectTypeFindUniqueArgs>(args: SelectSubset<T, ProjectTypeFindUniqueArgs<ExtArgs>>): Prisma__ProjectTypeClient<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProjectType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectTypeFindUniqueOrThrowArgs} args - Arguments to find a ProjectType
     * @example
     * // Get one ProjectType
     * const projectType = await prisma.projectType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectTypeClient<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTypeFindFirstArgs} args - Arguments to find a ProjectType
     * @example
     * // Get one ProjectType
     * const projectType = await prisma.projectType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectTypeFindFirstArgs>(args?: SelectSubset<T, ProjectTypeFindFirstArgs<ExtArgs>>): Prisma__ProjectTypeClient<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProjectType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTypeFindFirstOrThrowArgs} args - Arguments to find a ProjectType
     * @example
     * // Get one ProjectType
     * const projectType = await prisma.projectType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectTypeClient<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProjectTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectTypes
     * const projectTypes = await prisma.projectType.findMany()
     * 
     * // Get first 10 ProjectTypes
     * const projectTypes = await prisma.projectType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectTypeWithIdOnly = await prisma.projectType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectTypeFindManyArgs>(args?: SelectSubset<T, ProjectTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProjectType.
     * @param {ProjectTypeCreateArgs} args - Arguments to create a ProjectType.
     * @example
     * // Create one ProjectType
     * const ProjectType = await prisma.projectType.create({
     *   data: {
     *     // ... data to create a ProjectType
     *   }
     * })
     * 
     */
    create<T extends ProjectTypeCreateArgs>(args: SelectSubset<T, ProjectTypeCreateArgs<ExtArgs>>): Prisma__ProjectTypeClient<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProjectTypes.
     * @param {ProjectTypeCreateManyArgs} args - Arguments to create many ProjectTypes.
     * @example
     * // Create many ProjectTypes
     * const projectType = await prisma.projectType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectTypeCreateManyArgs>(args?: SelectSubset<T, ProjectTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectTypes and returns the data saved in the database.
     * @param {ProjectTypeCreateManyAndReturnArgs} args - Arguments to create many ProjectTypes.
     * @example
     * // Create many ProjectTypes
     * const projectType = await prisma.projectType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectTypes and only return the `id`
     * const projectTypeWithIdOnly = await prisma.projectType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProjectType.
     * @param {ProjectTypeDeleteArgs} args - Arguments to delete one ProjectType.
     * @example
     * // Delete one ProjectType
     * const ProjectType = await prisma.projectType.delete({
     *   where: {
     *     // ... filter to delete one ProjectType
     *   }
     * })
     * 
     */
    delete<T extends ProjectTypeDeleteArgs>(args: SelectSubset<T, ProjectTypeDeleteArgs<ExtArgs>>): Prisma__ProjectTypeClient<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProjectType.
     * @param {ProjectTypeUpdateArgs} args - Arguments to update one ProjectType.
     * @example
     * // Update one ProjectType
     * const projectType = await prisma.projectType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectTypeUpdateArgs>(args: SelectSubset<T, ProjectTypeUpdateArgs<ExtArgs>>): Prisma__ProjectTypeClient<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProjectTypes.
     * @param {ProjectTypeDeleteManyArgs} args - Arguments to filter ProjectTypes to delete.
     * @example
     * // Delete a few ProjectTypes
     * const { count } = await prisma.projectType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectTypeDeleteManyArgs>(args?: SelectSubset<T, ProjectTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectTypes
     * const projectType = await prisma.projectType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectTypeUpdateManyArgs>(args: SelectSubset<T, ProjectTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectTypes and returns the data updated in the database.
     * @param {ProjectTypeUpdateManyAndReturnArgs} args - Arguments to update many ProjectTypes.
     * @example
     * // Update many ProjectTypes
     * const projectType = await prisma.projectType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProjectTypes and only return the `id`
     * const projectTypeWithIdOnly = await prisma.projectType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProjectType.
     * @param {ProjectTypeUpsertArgs} args - Arguments to update or create a ProjectType.
     * @example
     * // Update or create a ProjectType
     * const projectType = await prisma.projectType.upsert({
     *   create: {
     *     // ... data to create a ProjectType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectType we want to update
     *   }
     * })
     */
    upsert<T extends ProjectTypeUpsertArgs>(args: SelectSubset<T, ProjectTypeUpsertArgs<ExtArgs>>): Prisma__ProjectTypeClient<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProjectTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTypeCountArgs} args - Arguments to filter ProjectTypes to count.
     * @example
     * // Count the number of ProjectTypes
     * const count = await prisma.projectType.count({
     *   where: {
     *     // ... the filter for the ProjectTypes we want to count
     *   }
     * })
    **/
    count<T extends ProjectTypeCountArgs>(
      args?: Subset<T, ProjectTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectTypeAggregateArgs>(args: Subset<T, ProjectTypeAggregateArgs>): Prisma.PrismaPromise<GetProjectTypeAggregateType<T>>

    /**
     * Group by ProjectType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectTypeGroupByArgs['orderBy'] }
        : { orderBy?: ProjectTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectType model
   */
  readonly fields: ProjectTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    packages<T extends ProjectType$packagesArgs<ExtArgs> = {}>(args?: Subset<T, ProjectType$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectType model
   */
  interface ProjectTypeFieldRefs {
    readonly id: FieldRef<"ProjectType", 'Int'>
    readonly name: FieldRef<"ProjectType", 'String'>
    readonly slug: FieldRef<"ProjectType", 'String'>
    readonly description: FieldRef<"ProjectType", 'String'>
    readonly icon: FieldRef<"ProjectType", 'String'>
    readonly steps: FieldRef<"ProjectType", 'Int'>
    readonly active: FieldRef<"ProjectType", 'Boolean'>
    readonly createdAt: FieldRef<"ProjectType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProjectType findUnique
   */
  export type ProjectTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProjectType to fetch.
     */
    where: ProjectTypeWhereUniqueInput
  }

  /**
   * ProjectType findUniqueOrThrow
   */
  export type ProjectTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProjectType to fetch.
     */
    where: ProjectTypeWhereUniqueInput
  }

  /**
   * ProjectType findFirst
   */
  export type ProjectTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProjectType to fetch.
     */
    where?: ProjectTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTypes to fetch.
     */
    orderBy?: ProjectTypeOrderByWithRelationInput | ProjectTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectTypes.
     */
    cursor?: ProjectTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectTypes.
     */
    distinct?: ProjectTypeScalarFieldEnum | ProjectTypeScalarFieldEnum[]
  }

  /**
   * ProjectType findFirstOrThrow
   */
  export type ProjectTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProjectType to fetch.
     */
    where?: ProjectTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTypes to fetch.
     */
    orderBy?: ProjectTypeOrderByWithRelationInput | ProjectTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectTypes.
     */
    cursor?: ProjectTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectTypes.
     */
    distinct?: ProjectTypeScalarFieldEnum | ProjectTypeScalarFieldEnum[]
  }

  /**
   * ProjectType findMany
   */
  export type ProjectTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which ProjectTypes to fetch.
     */
    where?: ProjectTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectTypes to fetch.
     */
    orderBy?: ProjectTypeOrderByWithRelationInput | ProjectTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectTypes.
     */
    cursor?: ProjectTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectTypes.
     */
    skip?: number
    distinct?: ProjectTypeScalarFieldEnum | ProjectTypeScalarFieldEnum[]
  }

  /**
   * ProjectType create
   */
  export type ProjectTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectType.
     */
    data: XOR<ProjectTypeCreateInput, ProjectTypeUncheckedCreateInput>
  }

  /**
   * ProjectType createMany
   */
  export type ProjectTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectTypes.
     */
    data: ProjectTypeCreateManyInput | ProjectTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectType createManyAndReturn
   */
  export type ProjectTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * The data used to create many ProjectTypes.
     */
    data: ProjectTypeCreateManyInput | ProjectTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectType update
   */
  export type ProjectTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectType.
     */
    data: XOR<ProjectTypeUpdateInput, ProjectTypeUncheckedUpdateInput>
    /**
     * Choose, which ProjectType to update.
     */
    where: ProjectTypeWhereUniqueInput
  }

  /**
   * ProjectType updateMany
   */
  export type ProjectTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectTypes.
     */
    data: XOR<ProjectTypeUpdateManyMutationInput, ProjectTypeUncheckedUpdateManyInput>
    /**
     * Filter which ProjectTypes to update
     */
    where?: ProjectTypeWhereInput
    /**
     * Limit how many ProjectTypes to update.
     */
    limit?: number
  }

  /**
   * ProjectType updateManyAndReturn
   */
  export type ProjectTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * The data used to update ProjectTypes.
     */
    data: XOR<ProjectTypeUpdateManyMutationInput, ProjectTypeUncheckedUpdateManyInput>
    /**
     * Filter which ProjectTypes to update
     */
    where?: ProjectTypeWhereInput
    /**
     * Limit how many ProjectTypes to update.
     */
    limit?: number
  }

  /**
   * ProjectType upsert
   */
  export type ProjectTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectType to update in case it exists.
     */
    where: ProjectTypeWhereUniqueInput
    /**
     * In case the ProjectType found by the `where` argument doesn't exist, create a new ProjectType with this data.
     */
    create: XOR<ProjectTypeCreateInput, ProjectTypeUncheckedCreateInput>
    /**
     * In case the ProjectType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectTypeUpdateInput, ProjectTypeUncheckedUpdateInput>
  }

  /**
   * ProjectType delete
   */
  export type ProjectTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
    /**
     * Filter which ProjectType to delete.
     */
    where: ProjectTypeWhereUniqueInput
  }

  /**
   * ProjectType deleteMany
   */
  export type ProjectTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectTypes to delete
     */
    where?: ProjectTypeWhereInput
    /**
     * Limit how many ProjectTypes to delete.
     */
    limit?: number
  }

  /**
   * ProjectType.packages
   */
  export type ProjectType$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    where?: WorkPackageWhereInput
    orderBy?: WorkPackageOrderByWithRelationInput | WorkPackageOrderByWithRelationInput[]
    cursor?: WorkPackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkPackageScalarFieldEnum | WorkPackageScalarFieldEnum[]
  }

  /**
   * ProjectType without action
   */
  export type ProjectTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectType
     */
    select?: ProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProjectType
     */
    omit?: ProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectTypeInclude<ExtArgs> | null
  }


  /**
   * Model WorkPackage
   */

  export type AggregateWorkPackage = {
    _count: WorkPackageCountAggregateOutputType | null
    _avg: WorkPackageAvgAggregateOutputType | null
    _sum: WorkPackageSumAggregateOutputType | null
    _min: WorkPackageMinAggregateOutputType | null
    _max: WorkPackageMaxAggregateOutputType | null
  }

  export type WorkPackageAvgAggregateOutputType = {
    id: number | null
    projectTypeId: number | null
    sortOrder: number | null
  }

  export type WorkPackageSumAggregateOutputType = {
    id: number | null
    projectTypeId: number | null
    sortOrder: number | null
  }

  export type WorkPackageMinAggregateOutputType = {
    id: number | null
    projectTypeId: number | null
    name: string | null
    description: string | null
    sortOrder: number | null
    createdAt: Date | null
  }

  export type WorkPackageMaxAggregateOutputType = {
    id: number | null
    projectTypeId: number | null
    name: string | null
    description: string | null
    sortOrder: number | null
    createdAt: Date | null
  }

  export type WorkPackageCountAggregateOutputType = {
    id: number
    projectTypeId: number
    name: number
    description: number
    sortOrder: number
    createdAt: number
    _all: number
  }


  export type WorkPackageAvgAggregateInputType = {
    id?: true
    projectTypeId?: true
    sortOrder?: true
  }

  export type WorkPackageSumAggregateInputType = {
    id?: true
    projectTypeId?: true
    sortOrder?: true
  }

  export type WorkPackageMinAggregateInputType = {
    id?: true
    projectTypeId?: true
    name?: true
    description?: true
    sortOrder?: true
    createdAt?: true
  }

  export type WorkPackageMaxAggregateInputType = {
    id?: true
    projectTypeId?: true
    name?: true
    description?: true
    sortOrder?: true
    createdAt?: true
  }

  export type WorkPackageCountAggregateInputType = {
    id?: true
    projectTypeId?: true
    name?: true
    description?: true
    sortOrder?: true
    createdAt?: true
    _all?: true
  }

  export type WorkPackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkPackage to aggregate.
     */
    where?: WorkPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkPackages to fetch.
     */
    orderBy?: WorkPackageOrderByWithRelationInput | WorkPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkPackages
    **/
    _count?: true | WorkPackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkPackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkPackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkPackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkPackageMaxAggregateInputType
  }

  export type GetWorkPackageAggregateType<T extends WorkPackageAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkPackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkPackage[P]>
      : GetScalarType<T[P], AggregateWorkPackage[P]>
  }




  export type WorkPackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkPackageWhereInput
    orderBy?: WorkPackageOrderByWithAggregationInput | WorkPackageOrderByWithAggregationInput[]
    by: WorkPackageScalarFieldEnum[] | WorkPackageScalarFieldEnum
    having?: WorkPackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkPackageCountAggregateInputType | true
    _avg?: WorkPackageAvgAggregateInputType
    _sum?: WorkPackageSumAggregateInputType
    _min?: WorkPackageMinAggregateInputType
    _max?: WorkPackageMaxAggregateInputType
  }

  export type WorkPackageGroupByOutputType = {
    id: number
    projectTypeId: number
    name: string
    description: string | null
    sortOrder: number
    createdAt: Date
    _count: WorkPackageCountAggregateOutputType | null
    _avg: WorkPackageAvgAggregateOutputType | null
    _sum: WorkPackageSumAggregateOutputType | null
    _min: WorkPackageMinAggregateOutputType | null
    _max: WorkPackageMaxAggregateOutputType | null
  }

  type GetWorkPackageGroupByPayload<T extends WorkPackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkPackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkPackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkPackageGroupByOutputType[P]>
            : GetScalarType<T[P], WorkPackageGroupByOutputType[P]>
        }
      >
    >


  export type WorkPackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectTypeId?: boolean
    name?: boolean
    description?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    projectType?: boolean | ProjectTypeDefaultArgs<ExtArgs>
    services?: boolean | WorkPackage$servicesArgs<ExtArgs>
    _count?: boolean | WorkPackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workPackage"]>

  export type WorkPackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectTypeId?: boolean
    name?: boolean
    description?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    projectType?: boolean | ProjectTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workPackage"]>

  export type WorkPackageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectTypeId?: boolean
    name?: boolean
    description?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    projectType?: boolean | ProjectTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workPackage"]>

  export type WorkPackageSelectScalar = {
    id?: boolean
    projectTypeId?: boolean
    name?: boolean
    description?: boolean
    sortOrder?: boolean
    createdAt?: boolean
  }

  export type WorkPackageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectTypeId" | "name" | "description" | "sortOrder" | "createdAt", ExtArgs["result"]["workPackage"]>
  export type WorkPackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectType?: boolean | ProjectTypeDefaultArgs<ExtArgs>
    services?: boolean | WorkPackage$servicesArgs<ExtArgs>
    _count?: boolean | WorkPackageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkPackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectType?: boolean | ProjectTypeDefaultArgs<ExtArgs>
  }
  export type WorkPackageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectType?: boolean | ProjectTypeDefaultArgs<ExtArgs>
  }

  export type $WorkPackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkPackage"
    objects: {
      projectType: Prisma.$ProjectTypePayload<ExtArgs>
      services: Prisma.$ServiceItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      projectTypeId: number
      name: string
      description: string | null
      sortOrder: number
      createdAt: Date
    }, ExtArgs["result"]["workPackage"]>
    composites: {}
  }

  type WorkPackageGetPayload<S extends boolean | null | undefined | WorkPackageDefaultArgs> = $Result.GetResult<Prisma.$WorkPackagePayload, S>

  type WorkPackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkPackageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkPackageCountAggregateInputType | true
    }

  export interface WorkPackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkPackage'], meta: { name: 'WorkPackage' } }
    /**
     * Find zero or one WorkPackage that matches the filter.
     * @param {WorkPackageFindUniqueArgs} args - Arguments to find a WorkPackage
     * @example
     * // Get one WorkPackage
     * const workPackage = await prisma.workPackage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkPackageFindUniqueArgs>(args: SelectSubset<T, WorkPackageFindUniqueArgs<ExtArgs>>): Prisma__WorkPackageClient<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkPackage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkPackageFindUniqueOrThrowArgs} args - Arguments to find a WorkPackage
     * @example
     * // Get one WorkPackage
     * const workPackage = await prisma.workPackage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkPackageFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkPackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkPackageClient<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkPackage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPackageFindFirstArgs} args - Arguments to find a WorkPackage
     * @example
     * // Get one WorkPackage
     * const workPackage = await prisma.workPackage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkPackageFindFirstArgs>(args?: SelectSubset<T, WorkPackageFindFirstArgs<ExtArgs>>): Prisma__WorkPackageClient<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkPackage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPackageFindFirstOrThrowArgs} args - Arguments to find a WorkPackage
     * @example
     * // Get one WorkPackage
     * const workPackage = await prisma.workPackage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkPackageFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkPackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkPackageClient<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkPackages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkPackages
     * const workPackages = await prisma.workPackage.findMany()
     * 
     * // Get first 10 WorkPackages
     * const workPackages = await prisma.workPackage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workPackageWithIdOnly = await prisma.workPackage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkPackageFindManyArgs>(args?: SelectSubset<T, WorkPackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkPackage.
     * @param {WorkPackageCreateArgs} args - Arguments to create a WorkPackage.
     * @example
     * // Create one WorkPackage
     * const WorkPackage = await prisma.workPackage.create({
     *   data: {
     *     // ... data to create a WorkPackage
     *   }
     * })
     * 
     */
    create<T extends WorkPackageCreateArgs>(args: SelectSubset<T, WorkPackageCreateArgs<ExtArgs>>): Prisma__WorkPackageClient<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkPackages.
     * @param {WorkPackageCreateManyArgs} args - Arguments to create many WorkPackages.
     * @example
     * // Create many WorkPackages
     * const workPackage = await prisma.workPackage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkPackageCreateManyArgs>(args?: SelectSubset<T, WorkPackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkPackages and returns the data saved in the database.
     * @param {WorkPackageCreateManyAndReturnArgs} args - Arguments to create many WorkPackages.
     * @example
     * // Create many WorkPackages
     * const workPackage = await prisma.workPackage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkPackages and only return the `id`
     * const workPackageWithIdOnly = await prisma.workPackage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkPackageCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkPackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkPackage.
     * @param {WorkPackageDeleteArgs} args - Arguments to delete one WorkPackage.
     * @example
     * // Delete one WorkPackage
     * const WorkPackage = await prisma.workPackage.delete({
     *   where: {
     *     // ... filter to delete one WorkPackage
     *   }
     * })
     * 
     */
    delete<T extends WorkPackageDeleteArgs>(args: SelectSubset<T, WorkPackageDeleteArgs<ExtArgs>>): Prisma__WorkPackageClient<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkPackage.
     * @param {WorkPackageUpdateArgs} args - Arguments to update one WorkPackage.
     * @example
     * // Update one WorkPackage
     * const workPackage = await prisma.workPackage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkPackageUpdateArgs>(args: SelectSubset<T, WorkPackageUpdateArgs<ExtArgs>>): Prisma__WorkPackageClient<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkPackages.
     * @param {WorkPackageDeleteManyArgs} args - Arguments to filter WorkPackages to delete.
     * @example
     * // Delete a few WorkPackages
     * const { count } = await prisma.workPackage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkPackageDeleteManyArgs>(args?: SelectSubset<T, WorkPackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkPackages
     * const workPackage = await prisma.workPackage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkPackageUpdateManyArgs>(args: SelectSubset<T, WorkPackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkPackages and returns the data updated in the database.
     * @param {WorkPackageUpdateManyAndReturnArgs} args - Arguments to update many WorkPackages.
     * @example
     * // Update many WorkPackages
     * const workPackage = await prisma.workPackage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkPackages and only return the `id`
     * const workPackageWithIdOnly = await prisma.workPackage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkPackageUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkPackageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkPackage.
     * @param {WorkPackageUpsertArgs} args - Arguments to update or create a WorkPackage.
     * @example
     * // Update or create a WorkPackage
     * const workPackage = await prisma.workPackage.upsert({
     *   create: {
     *     // ... data to create a WorkPackage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkPackage we want to update
     *   }
     * })
     */
    upsert<T extends WorkPackageUpsertArgs>(args: SelectSubset<T, WorkPackageUpsertArgs<ExtArgs>>): Prisma__WorkPackageClient<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPackageCountArgs} args - Arguments to filter WorkPackages to count.
     * @example
     * // Count the number of WorkPackages
     * const count = await prisma.workPackage.count({
     *   where: {
     *     // ... the filter for the WorkPackages we want to count
     *   }
     * })
    **/
    count<T extends WorkPackageCountArgs>(
      args?: Subset<T, WorkPackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkPackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkPackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkPackageAggregateArgs>(args: Subset<T, WorkPackageAggregateArgs>): Prisma.PrismaPromise<GetWorkPackageAggregateType<T>>

    /**
     * Group by WorkPackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkPackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkPackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkPackageGroupByArgs['orderBy'] }
        : { orderBy?: WorkPackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkPackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkPackage model
   */
  readonly fields: WorkPackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkPackage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkPackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projectType<T extends ProjectTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectTypeDefaultArgs<ExtArgs>>): Prisma__ProjectTypeClient<$Result.GetResult<Prisma.$ProjectTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    services<T extends WorkPackage$servicesArgs<ExtArgs> = {}>(args?: Subset<T, WorkPackage$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkPackage model
   */
  interface WorkPackageFieldRefs {
    readonly id: FieldRef<"WorkPackage", 'Int'>
    readonly projectTypeId: FieldRef<"WorkPackage", 'Int'>
    readonly name: FieldRef<"WorkPackage", 'String'>
    readonly description: FieldRef<"WorkPackage", 'String'>
    readonly sortOrder: FieldRef<"WorkPackage", 'Int'>
    readonly createdAt: FieldRef<"WorkPackage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkPackage findUnique
   */
  export type WorkPackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    /**
     * Filter, which WorkPackage to fetch.
     */
    where: WorkPackageWhereUniqueInput
  }

  /**
   * WorkPackage findUniqueOrThrow
   */
  export type WorkPackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    /**
     * Filter, which WorkPackage to fetch.
     */
    where: WorkPackageWhereUniqueInput
  }

  /**
   * WorkPackage findFirst
   */
  export type WorkPackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    /**
     * Filter, which WorkPackage to fetch.
     */
    where?: WorkPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkPackages to fetch.
     */
    orderBy?: WorkPackageOrderByWithRelationInput | WorkPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkPackages.
     */
    cursor?: WorkPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkPackages.
     */
    distinct?: WorkPackageScalarFieldEnum | WorkPackageScalarFieldEnum[]
  }

  /**
   * WorkPackage findFirstOrThrow
   */
  export type WorkPackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    /**
     * Filter, which WorkPackage to fetch.
     */
    where?: WorkPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkPackages to fetch.
     */
    orderBy?: WorkPackageOrderByWithRelationInput | WorkPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkPackages.
     */
    cursor?: WorkPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkPackages.
     */
    distinct?: WorkPackageScalarFieldEnum | WorkPackageScalarFieldEnum[]
  }

  /**
   * WorkPackage findMany
   */
  export type WorkPackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    /**
     * Filter, which WorkPackages to fetch.
     */
    where?: WorkPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkPackages to fetch.
     */
    orderBy?: WorkPackageOrderByWithRelationInput | WorkPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkPackages.
     */
    cursor?: WorkPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkPackages.
     */
    skip?: number
    distinct?: WorkPackageScalarFieldEnum | WorkPackageScalarFieldEnum[]
  }

  /**
   * WorkPackage create
   */
  export type WorkPackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkPackage.
     */
    data: XOR<WorkPackageCreateInput, WorkPackageUncheckedCreateInput>
  }

  /**
   * WorkPackage createMany
   */
  export type WorkPackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkPackages.
     */
    data: WorkPackageCreateManyInput | WorkPackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkPackage createManyAndReturn
   */
  export type WorkPackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * The data used to create many WorkPackages.
     */
    data: WorkPackageCreateManyInput | WorkPackageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkPackage update
   */
  export type WorkPackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkPackage.
     */
    data: XOR<WorkPackageUpdateInput, WorkPackageUncheckedUpdateInput>
    /**
     * Choose, which WorkPackage to update.
     */
    where: WorkPackageWhereUniqueInput
  }

  /**
   * WorkPackage updateMany
   */
  export type WorkPackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkPackages.
     */
    data: XOR<WorkPackageUpdateManyMutationInput, WorkPackageUncheckedUpdateManyInput>
    /**
     * Filter which WorkPackages to update
     */
    where?: WorkPackageWhereInput
    /**
     * Limit how many WorkPackages to update.
     */
    limit?: number
  }

  /**
   * WorkPackage updateManyAndReturn
   */
  export type WorkPackageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * The data used to update WorkPackages.
     */
    data: XOR<WorkPackageUpdateManyMutationInput, WorkPackageUncheckedUpdateManyInput>
    /**
     * Filter which WorkPackages to update
     */
    where?: WorkPackageWhereInput
    /**
     * Limit how many WorkPackages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkPackage upsert
   */
  export type WorkPackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkPackage to update in case it exists.
     */
    where: WorkPackageWhereUniqueInput
    /**
     * In case the WorkPackage found by the `where` argument doesn't exist, create a new WorkPackage with this data.
     */
    create: XOR<WorkPackageCreateInput, WorkPackageUncheckedCreateInput>
    /**
     * In case the WorkPackage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkPackageUpdateInput, WorkPackageUncheckedUpdateInput>
  }

  /**
   * WorkPackage delete
   */
  export type WorkPackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
    /**
     * Filter which WorkPackage to delete.
     */
    where: WorkPackageWhereUniqueInput
  }

  /**
   * WorkPackage deleteMany
   */
  export type WorkPackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkPackages to delete
     */
    where?: WorkPackageWhereInput
    /**
     * Limit how many WorkPackages to delete.
     */
    limit?: number
  }

  /**
   * WorkPackage.services
   */
  export type WorkPackage$servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    where?: ServiceItemWhereInput
    orderBy?: ServiceItemOrderByWithRelationInput | ServiceItemOrderByWithRelationInput[]
    cursor?: ServiceItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceItemScalarFieldEnum | ServiceItemScalarFieldEnum[]
  }

  /**
   * WorkPackage without action
   */
  export type WorkPackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkPackage
     */
    select?: WorkPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkPackage
     */
    omit?: WorkPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkPackageInclude<ExtArgs> | null
  }


  /**
   * Model ServiceItem
   */

  export type AggregateServiceItem = {
    _count: ServiceItemCountAggregateOutputType | null
    _avg: ServiceItemAvgAggregateOutputType | null
    _sum: ServiceItemSumAggregateOutputType | null
    _min: ServiceItemMinAggregateOutputType | null
    _max: ServiceItemMaxAggregateOutputType | null
  }

  export type ServiceItemAvgAggregateOutputType = {
    id: number | null
    packageId: number | null
    basePrice: number | null
    multiplier: number | null
    sortOrder: number | null
  }

  export type ServiceItemSumAggregateOutputType = {
    id: number | null
    packageId: number | null
    basePrice: number | null
    multiplier: number | null
    sortOrder: number | null
  }

  export type ServiceItemMinAggregateOutputType = {
    id: number | null
    packageId: number | null
    name: string | null
    description: string | null
    group: string | null
    unit: string | null
    basePrice: number | null
    multiplier: number | null
    required: boolean | null
    visibleByDefault: boolean | null
    aiSuggestible: boolean | null
    additionalNotes: string | null
    sortOrder: number | null
    createdAt: Date | null
  }

  export type ServiceItemMaxAggregateOutputType = {
    id: number | null
    packageId: number | null
    name: string | null
    description: string | null
    group: string | null
    unit: string | null
    basePrice: number | null
    multiplier: number | null
    required: boolean | null
    visibleByDefault: boolean | null
    aiSuggestible: boolean | null
    additionalNotes: string | null
    sortOrder: number | null
    createdAt: Date | null
  }

  export type ServiceItemCountAggregateOutputType = {
    id: number
    packageId: number
    name: number
    description: number
    group: number
    unit: number
    basePrice: number
    multiplier: number
    required: number
    visibleByDefault: number
    aiSuggestible: number
    additionalNotes: number
    sortOrder: number
    createdAt: number
    _all: number
  }


  export type ServiceItemAvgAggregateInputType = {
    id?: true
    packageId?: true
    basePrice?: true
    multiplier?: true
    sortOrder?: true
  }

  export type ServiceItemSumAggregateInputType = {
    id?: true
    packageId?: true
    basePrice?: true
    multiplier?: true
    sortOrder?: true
  }

  export type ServiceItemMinAggregateInputType = {
    id?: true
    packageId?: true
    name?: true
    description?: true
    group?: true
    unit?: true
    basePrice?: true
    multiplier?: true
    required?: true
    visibleByDefault?: true
    aiSuggestible?: true
    additionalNotes?: true
    sortOrder?: true
    createdAt?: true
  }

  export type ServiceItemMaxAggregateInputType = {
    id?: true
    packageId?: true
    name?: true
    description?: true
    group?: true
    unit?: true
    basePrice?: true
    multiplier?: true
    required?: true
    visibleByDefault?: true
    aiSuggestible?: true
    additionalNotes?: true
    sortOrder?: true
    createdAt?: true
  }

  export type ServiceItemCountAggregateInputType = {
    id?: true
    packageId?: true
    name?: true
    description?: true
    group?: true
    unit?: true
    basePrice?: true
    multiplier?: true
    required?: true
    visibleByDefault?: true
    aiSuggestible?: true
    additionalNotes?: true
    sortOrder?: true
    createdAt?: true
    _all?: true
  }

  export type ServiceItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceItem to aggregate.
     */
    where?: ServiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceItems to fetch.
     */
    orderBy?: ServiceItemOrderByWithRelationInput | ServiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceItems
    **/
    _count?: true | ServiceItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceItemMaxAggregateInputType
  }

  export type GetServiceItemAggregateType<T extends ServiceItemAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceItem[P]>
      : GetScalarType<T[P], AggregateServiceItem[P]>
  }




  export type ServiceItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceItemWhereInput
    orderBy?: ServiceItemOrderByWithAggregationInput | ServiceItemOrderByWithAggregationInput[]
    by: ServiceItemScalarFieldEnum[] | ServiceItemScalarFieldEnum
    having?: ServiceItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceItemCountAggregateInputType | true
    _avg?: ServiceItemAvgAggregateInputType
    _sum?: ServiceItemSumAggregateInputType
    _min?: ServiceItemMinAggregateInputType
    _max?: ServiceItemMaxAggregateInputType
  }

  export type ServiceItemGroupByOutputType = {
    id: number
    packageId: number
    name: string
    description: string | null
    group: string | null
    unit: string
    basePrice: number
    multiplier: number | null
    required: boolean
    visibleByDefault: boolean
    aiSuggestible: boolean
    additionalNotes: string | null
    sortOrder: number
    createdAt: Date
    _count: ServiceItemCountAggregateOutputType | null
    _avg: ServiceItemAvgAggregateOutputType | null
    _sum: ServiceItemSumAggregateOutputType | null
    _min: ServiceItemMinAggregateOutputType | null
    _max: ServiceItemMaxAggregateOutputType | null
  }

  type GetServiceItemGroupByPayload<T extends ServiceItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceItemGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceItemGroupByOutputType[P]>
        }
      >
    >


  export type ServiceItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    name?: boolean
    description?: boolean
    group?: boolean
    unit?: boolean
    basePrice?: boolean
    multiplier?: boolean
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    package?: boolean | WorkPackageDefaultArgs<ExtArgs>
    options?: boolean | ServiceItem$optionsArgs<ExtArgs>
    followUps?: boolean | ServiceItem$followUpsArgs<ExtArgs>
    suggestedBy?: boolean | ServiceItem$suggestedByArgs<ExtArgs>
    _count?: boolean | ServiceItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceItem"]>

  export type ServiceItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    name?: boolean
    description?: boolean
    group?: boolean
    unit?: boolean
    basePrice?: boolean
    multiplier?: boolean
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    package?: boolean | WorkPackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceItem"]>

  export type ServiceItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    name?: boolean
    description?: boolean
    group?: boolean
    unit?: boolean
    basePrice?: boolean
    multiplier?: boolean
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    package?: boolean | WorkPackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceItem"]>

  export type ServiceItemSelectScalar = {
    id?: boolean
    packageId?: boolean
    name?: boolean
    description?: boolean
    group?: boolean
    unit?: boolean
    basePrice?: boolean
    multiplier?: boolean
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: boolean
    sortOrder?: boolean
    createdAt?: boolean
  }

  export type ServiceItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "packageId" | "name" | "description" | "group" | "unit" | "basePrice" | "multiplier" | "required" | "visibleByDefault" | "aiSuggestible" | "additionalNotes" | "sortOrder" | "createdAt", ExtArgs["result"]["serviceItem"]>
  export type ServiceItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | WorkPackageDefaultArgs<ExtArgs>
    options?: boolean | ServiceItem$optionsArgs<ExtArgs>
    followUps?: boolean | ServiceItem$followUpsArgs<ExtArgs>
    suggestedBy?: boolean | ServiceItem$suggestedByArgs<ExtArgs>
    _count?: boolean | ServiceItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | WorkPackageDefaultArgs<ExtArgs>
  }
  export type ServiceItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | WorkPackageDefaultArgs<ExtArgs>
  }

  export type $ServiceItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceItem"
    objects: {
      package: Prisma.$WorkPackagePayload<ExtArgs>
      options: Prisma.$ServiceOptionPayload<ExtArgs>[]
      followUps: Prisma.$FollowUpPayload<ExtArgs>[]
      suggestedBy: Prisma.$FollowUpPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      packageId: number
      name: string
      description: string | null
      group: string | null
      unit: string
      basePrice: number
      multiplier: number | null
      required: boolean
      visibleByDefault: boolean
      aiSuggestible: boolean
      additionalNotes: string | null
      sortOrder: number
      createdAt: Date
    }, ExtArgs["result"]["serviceItem"]>
    composites: {}
  }

  type ServiceItemGetPayload<S extends boolean | null | undefined | ServiceItemDefaultArgs> = $Result.GetResult<Prisma.$ServiceItemPayload, S>

  type ServiceItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceItemCountAggregateInputType | true
    }

  export interface ServiceItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceItem'], meta: { name: 'ServiceItem' } }
    /**
     * Find zero or one ServiceItem that matches the filter.
     * @param {ServiceItemFindUniqueArgs} args - Arguments to find a ServiceItem
     * @example
     * // Get one ServiceItem
     * const serviceItem = await prisma.serviceItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceItemFindUniqueArgs>(args: SelectSubset<T, ServiceItemFindUniqueArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceItemFindUniqueOrThrowArgs} args - Arguments to find a ServiceItem
     * @example
     * // Get one ServiceItem
     * const serviceItem = await prisma.serviceItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceItemFindFirstArgs} args - Arguments to find a ServiceItem
     * @example
     * // Get one ServiceItem
     * const serviceItem = await prisma.serviceItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceItemFindFirstArgs>(args?: SelectSubset<T, ServiceItemFindFirstArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceItemFindFirstOrThrowArgs} args - Arguments to find a ServiceItem
     * @example
     * // Get one ServiceItem
     * const serviceItem = await prisma.serviceItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceItems
     * const serviceItems = await prisma.serviceItem.findMany()
     * 
     * // Get first 10 ServiceItems
     * const serviceItems = await prisma.serviceItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceItemWithIdOnly = await prisma.serviceItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceItemFindManyArgs>(args?: SelectSubset<T, ServiceItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceItem.
     * @param {ServiceItemCreateArgs} args - Arguments to create a ServiceItem.
     * @example
     * // Create one ServiceItem
     * const ServiceItem = await prisma.serviceItem.create({
     *   data: {
     *     // ... data to create a ServiceItem
     *   }
     * })
     * 
     */
    create<T extends ServiceItemCreateArgs>(args: SelectSubset<T, ServiceItemCreateArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceItems.
     * @param {ServiceItemCreateManyArgs} args - Arguments to create many ServiceItems.
     * @example
     * // Create many ServiceItems
     * const serviceItem = await prisma.serviceItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceItemCreateManyArgs>(args?: SelectSubset<T, ServiceItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceItems and returns the data saved in the database.
     * @param {ServiceItemCreateManyAndReturnArgs} args - Arguments to create many ServiceItems.
     * @example
     * // Create many ServiceItems
     * const serviceItem = await prisma.serviceItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceItems and only return the `id`
     * const serviceItemWithIdOnly = await prisma.serviceItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceItem.
     * @param {ServiceItemDeleteArgs} args - Arguments to delete one ServiceItem.
     * @example
     * // Delete one ServiceItem
     * const ServiceItem = await prisma.serviceItem.delete({
     *   where: {
     *     // ... filter to delete one ServiceItem
     *   }
     * })
     * 
     */
    delete<T extends ServiceItemDeleteArgs>(args: SelectSubset<T, ServiceItemDeleteArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceItem.
     * @param {ServiceItemUpdateArgs} args - Arguments to update one ServiceItem.
     * @example
     * // Update one ServiceItem
     * const serviceItem = await prisma.serviceItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceItemUpdateArgs>(args: SelectSubset<T, ServiceItemUpdateArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceItems.
     * @param {ServiceItemDeleteManyArgs} args - Arguments to filter ServiceItems to delete.
     * @example
     * // Delete a few ServiceItems
     * const { count } = await prisma.serviceItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceItemDeleteManyArgs>(args?: SelectSubset<T, ServiceItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceItems
     * const serviceItem = await prisma.serviceItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceItemUpdateManyArgs>(args: SelectSubset<T, ServiceItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceItems and returns the data updated in the database.
     * @param {ServiceItemUpdateManyAndReturnArgs} args - Arguments to update many ServiceItems.
     * @example
     * // Update many ServiceItems
     * const serviceItem = await prisma.serviceItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceItems and only return the `id`
     * const serviceItemWithIdOnly = await prisma.serviceItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceItemUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceItem.
     * @param {ServiceItemUpsertArgs} args - Arguments to update or create a ServiceItem.
     * @example
     * // Update or create a ServiceItem
     * const serviceItem = await prisma.serviceItem.upsert({
     *   create: {
     *     // ... data to create a ServiceItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceItem we want to update
     *   }
     * })
     */
    upsert<T extends ServiceItemUpsertArgs>(args: SelectSubset<T, ServiceItemUpsertArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceItemCountArgs} args - Arguments to filter ServiceItems to count.
     * @example
     * // Count the number of ServiceItems
     * const count = await prisma.serviceItem.count({
     *   where: {
     *     // ... the filter for the ServiceItems we want to count
     *   }
     * })
    **/
    count<T extends ServiceItemCountArgs>(
      args?: Subset<T, ServiceItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceItemAggregateArgs>(args: Subset<T, ServiceItemAggregateArgs>): Prisma.PrismaPromise<GetServiceItemAggregateType<T>>

    /**
     * Group by ServiceItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceItemGroupByArgs['orderBy'] }
        : { orderBy?: ServiceItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceItem model
   */
  readonly fields: ServiceItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    package<T extends WorkPackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkPackageDefaultArgs<ExtArgs>>): Prisma__WorkPackageClient<$Result.GetResult<Prisma.$WorkPackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    options<T extends ServiceItem$optionsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceItem$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    followUps<T extends ServiceItem$followUpsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceItem$followUpsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    suggestedBy<T extends ServiceItem$suggestedByArgs<ExtArgs> = {}>(args?: Subset<T, ServiceItem$suggestedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceItem model
   */
  interface ServiceItemFieldRefs {
    readonly id: FieldRef<"ServiceItem", 'Int'>
    readonly packageId: FieldRef<"ServiceItem", 'Int'>
    readonly name: FieldRef<"ServiceItem", 'String'>
    readonly description: FieldRef<"ServiceItem", 'String'>
    readonly group: FieldRef<"ServiceItem", 'String'>
    readonly unit: FieldRef<"ServiceItem", 'String'>
    readonly basePrice: FieldRef<"ServiceItem", 'Float'>
    readonly multiplier: FieldRef<"ServiceItem", 'Float'>
    readonly required: FieldRef<"ServiceItem", 'Boolean'>
    readonly visibleByDefault: FieldRef<"ServiceItem", 'Boolean'>
    readonly aiSuggestible: FieldRef<"ServiceItem", 'Boolean'>
    readonly additionalNotes: FieldRef<"ServiceItem", 'String'>
    readonly sortOrder: FieldRef<"ServiceItem", 'Int'>
    readonly createdAt: FieldRef<"ServiceItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceItem findUnique
   */
  export type ServiceItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    /**
     * Filter, which ServiceItem to fetch.
     */
    where: ServiceItemWhereUniqueInput
  }

  /**
   * ServiceItem findUniqueOrThrow
   */
  export type ServiceItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    /**
     * Filter, which ServiceItem to fetch.
     */
    where: ServiceItemWhereUniqueInput
  }

  /**
   * ServiceItem findFirst
   */
  export type ServiceItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    /**
     * Filter, which ServiceItem to fetch.
     */
    where?: ServiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceItems to fetch.
     */
    orderBy?: ServiceItemOrderByWithRelationInput | ServiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceItems.
     */
    cursor?: ServiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceItems.
     */
    distinct?: ServiceItemScalarFieldEnum | ServiceItemScalarFieldEnum[]
  }

  /**
   * ServiceItem findFirstOrThrow
   */
  export type ServiceItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    /**
     * Filter, which ServiceItem to fetch.
     */
    where?: ServiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceItems to fetch.
     */
    orderBy?: ServiceItemOrderByWithRelationInput | ServiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceItems.
     */
    cursor?: ServiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceItems.
     */
    distinct?: ServiceItemScalarFieldEnum | ServiceItemScalarFieldEnum[]
  }

  /**
   * ServiceItem findMany
   */
  export type ServiceItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    /**
     * Filter, which ServiceItems to fetch.
     */
    where?: ServiceItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceItems to fetch.
     */
    orderBy?: ServiceItemOrderByWithRelationInput | ServiceItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceItems.
     */
    cursor?: ServiceItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceItems.
     */
    skip?: number
    distinct?: ServiceItemScalarFieldEnum | ServiceItemScalarFieldEnum[]
  }

  /**
   * ServiceItem create
   */
  export type ServiceItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceItem.
     */
    data: XOR<ServiceItemCreateInput, ServiceItemUncheckedCreateInput>
  }

  /**
   * ServiceItem createMany
   */
  export type ServiceItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceItems.
     */
    data: ServiceItemCreateManyInput | ServiceItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceItem createManyAndReturn
   */
  export type ServiceItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceItems.
     */
    data: ServiceItemCreateManyInput | ServiceItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceItem update
   */
  export type ServiceItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceItem.
     */
    data: XOR<ServiceItemUpdateInput, ServiceItemUncheckedUpdateInput>
    /**
     * Choose, which ServiceItem to update.
     */
    where: ServiceItemWhereUniqueInput
  }

  /**
   * ServiceItem updateMany
   */
  export type ServiceItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceItems.
     */
    data: XOR<ServiceItemUpdateManyMutationInput, ServiceItemUncheckedUpdateManyInput>
    /**
     * Filter which ServiceItems to update
     */
    where?: ServiceItemWhereInput
    /**
     * Limit how many ServiceItems to update.
     */
    limit?: number
  }

  /**
   * ServiceItem updateManyAndReturn
   */
  export type ServiceItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * The data used to update ServiceItems.
     */
    data: XOR<ServiceItemUpdateManyMutationInput, ServiceItemUncheckedUpdateManyInput>
    /**
     * Filter which ServiceItems to update
     */
    where?: ServiceItemWhereInput
    /**
     * Limit how many ServiceItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceItem upsert
   */
  export type ServiceItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceItem to update in case it exists.
     */
    where: ServiceItemWhereUniqueInput
    /**
     * In case the ServiceItem found by the `where` argument doesn't exist, create a new ServiceItem with this data.
     */
    create: XOR<ServiceItemCreateInput, ServiceItemUncheckedCreateInput>
    /**
     * In case the ServiceItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceItemUpdateInput, ServiceItemUncheckedUpdateInput>
  }

  /**
   * ServiceItem delete
   */
  export type ServiceItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
    /**
     * Filter which ServiceItem to delete.
     */
    where: ServiceItemWhereUniqueInput
  }

  /**
   * ServiceItem deleteMany
   */
  export type ServiceItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceItems to delete
     */
    where?: ServiceItemWhereInput
    /**
     * Limit how many ServiceItems to delete.
     */
    limit?: number
  }

  /**
   * ServiceItem.options
   */
  export type ServiceItem$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    where?: ServiceOptionWhereInput
    orderBy?: ServiceOptionOrderByWithRelationInput | ServiceOptionOrderByWithRelationInput[]
    cursor?: ServiceOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceOptionScalarFieldEnum | ServiceOptionScalarFieldEnum[]
  }

  /**
   * ServiceItem.followUps
   */
  export type ServiceItem$followUpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    where?: FollowUpWhereInput
    orderBy?: FollowUpOrderByWithRelationInput | FollowUpOrderByWithRelationInput[]
    cursor?: FollowUpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowUpScalarFieldEnum | FollowUpScalarFieldEnum[]
  }

  /**
   * ServiceItem.suggestedBy
   */
  export type ServiceItem$suggestedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    where?: FollowUpWhereInput
    orderBy?: FollowUpOrderByWithRelationInput | FollowUpOrderByWithRelationInput[]
    cursor?: FollowUpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowUpScalarFieldEnum | FollowUpScalarFieldEnum[]
  }

  /**
   * ServiceItem without action
   */
  export type ServiceItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceItem
     */
    select?: ServiceItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceItem
     */
    omit?: ServiceItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceItemInclude<ExtArgs> | null
  }


  /**
   * Model ServiceOption
   */

  export type AggregateServiceOption = {
    _count: ServiceOptionCountAggregateOutputType | null
    _avg: ServiceOptionAvgAggregateOutputType | null
    _sum: ServiceOptionSumAggregateOutputType | null
    _min: ServiceOptionMinAggregateOutputType | null
    _max: ServiceOptionMaxAggregateOutputType | null
  }

  export type ServiceOptionAvgAggregateOutputType = {
    id: number | null
    serviceId: number | null
    priceDelta: number | null
  }

  export type ServiceOptionSumAggregateOutputType = {
    id: number | null
    serviceId: number | null
    priceDelta: number | null
  }

  export type ServiceOptionMinAggregateOutputType = {
    id: number | null
    serviceId: number | null
    name: string | null
    priceDelta: number | null
    description: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type ServiceOptionMaxAggregateOutputType = {
    id: number | null
    serviceId: number | null
    name: string | null
    priceDelta: number | null
    description: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type ServiceOptionCountAggregateOutputType = {
    id: number
    serviceId: number
    name: number
    priceDelta: number
    description: number
    imageUrl: number
    createdAt: number
    _all: number
  }


  export type ServiceOptionAvgAggregateInputType = {
    id?: true
    serviceId?: true
    priceDelta?: true
  }

  export type ServiceOptionSumAggregateInputType = {
    id?: true
    serviceId?: true
    priceDelta?: true
  }

  export type ServiceOptionMinAggregateInputType = {
    id?: true
    serviceId?: true
    name?: true
    priceDelta?: true
    description?: true
    imageUrl?: true
    createdAt?: true
  }

  export type ServiceOptionMaxAggregateInputType = {
    id?: true
    serviceId?: true
    name?: true
    priceDelta?: true
    description?: true
    imageUrl?: true
    createdAt?: true
  }

  export type ServiceOptionCountAggregateInputType = {
    id?: true
    serviceId?: true
    name?: true
    priceDelta?: true
    description?: true
    imageUrl?: true
    createdAt?: true
    _all?: true
  }

  export type ServiceOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceOption to aggregate.
     */
    where?: ServiceOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceOptions to fetch.
     */
    orderBy?: ServiceOptionOrderByWithRelationInput | ServiceOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceOptions
    **/
    _count?: true | ServiceOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceOptionMaxAggregateInputType
  }

  export type GetServiceOptionAggregateType<T extends ServiceOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceOption[P]>
      : GetScalarType<T[P], AggregateServiceOption[P]>
  }




  export type ServiceOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceOptionWhereInput
    orderBy?: ServiceOptionOrderByWithAggregationInput | ServiceOptionOrderByWithAggregationInput[]
    by: ServiceOptionScalarFieldEnum[] | ServiceOptionScalarFieldEnum
    having?: ServiceOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceOptionCountAggregateInputType | true
    _avg?: ServiceOptionAvgAggregateInputType
    _sum?: ServiceOptionSumAggregateInputType
    _min?: ServiceOptionMinAggregateInputType
    _max?: ServiceOptionMaxAggregateInputType
  }

  export type ServiceOptionGroupByOutputType = {
    id: number
    serviceId: number
    name: string
    priceDelta: number
    description: string | null
    imageUrl: string | null
    createdAt: Date
    _count: ServiceOptionCountAggregateOutputType | null
    _avg: ServiceOptionAvgAggregateOutputType | null
    _sum: ServiceOptionSumAggregateOutputType | null
    _min: ServiceOptionMinAggregateOutputType | null
    _max: ServiceOptionMaxAggregateOutputType | null
  }

  type GetServiceOptionGroupByPayload<T extends ServiceOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceOptionGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceOptionGroupByOutputType[P]>
        }
      >
    >


  export type ServiceOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    name?: boolean
    priceDelta?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    service?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceOption"]>

  export type ServiceOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    name?: boolean
    priceDelta?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    service?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceOption"]>

  export type ServiceOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceId?: boolean
    name?: boolean
    priceDelta?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    service?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceOption"]>

  export type ServiceOptionSelectScalar = {
    id?: boolean
    serviceId?: boolean
    name?: boolean
    priceDelta?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }

  export type ServiceOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceId" | "name" | "priceDelta" | "description" | "imageUrl" | "createdAt", ExtArgs["result"]["serviceOption"]>
  export type ServiceOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }
  export type ServiceOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }
  export type ServiceOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    service?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }

  export type $ServiceOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceOption"
    objects: {
      service: Prisma.$ServiceItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      serviceId: number
      name: string
      priceDelta: number
      description: string | null
      imageUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["serviceOption"]>
    composites: {}
  }

  type ServiceOptionGetPayload<S extends boolean | null | undefined | ServiceOptionDefaultArgs> = $Result.GetResult<Prisma.$ServiceOptionPayload, S>

  type ServiceOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceOptionCountAggregateInputType | true
    }

  export interface ServiceOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceOption'], meta: { name: 'ServiceOption' } }
    /**
     * Find zero or one ServiceOption that matches the filter.
     * @param {ServiceOptionFindUniqueArgs} args - Arguments to find a ServiceOption
     * @example
     * // Get one ServiceOption
     * const serviceOption = await prisma.serviceOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceOptionFindUniqueArgs>(args: SelectSubset<T, ServiceOptionFindUniqueArgs<ExtArgs>>): Prisma__ServiceOptionClient<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServiceOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceOptionFindUniqueOrThrowArgs} args - Arguments to find a ServiceOption
     * @example
     * // Get one ServiceOption
     * const serviceOption = await prisma.serviceOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceOptionClient<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOptionFindFirstArgs} args - Arguments to find a ServiceOption
     * @example
     * // Get one ServiceOption
     * const serviceOption = await prisma.serviceOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceOptionFindFirstArgs>(args?: SelectSubset<T, ServiceOptionFindFirstArgs<ExtArgs>>): Prisma__ServiceOptionClient<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServiceOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOptionFindFirstOrThrowArgs} args - Arguments to find a ServiceOption
     * @example
     * // Get one ServiceOption
     * const serviceOption = await prisma.serviceOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceOptionClient<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServiceOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceOptions
     * const serviceOptions = await prisma.serviceOption.findMany()
     * 
     * // Get first 10 ServiceOptions
     * const serviceOptions = await prisma.serviceOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceOptionWithIdOnly = await prisma.serviceOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceOptionFindManyArgs>(args?: SelectSubset<T, ServiceOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServiceOption.
     * @param {ServiceOptionCreateArgs} args - Arguments to create a ServiceOption.
     * @example
     * // Create one ServiceOption
     * const ServiceOption = await prisma.serviceOption.create({
     *   data: {
     *     // ... data to create a ServiceOption
     *   }
     * })
     * 
     */
    create<T extends ServiceOptionCreateArgs>(args: SelectSubset<T, ServiceOptionCreateArgs<ExtArgs>>): Prisma__ServiceOptionClient<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServiceOptions.
     * @param {ServiceOptionCreateManyArgs} args - Arguments to create many ServiceOptions.
     * @example
     * // Create many ServiceOptions
     * const serviceOption = await prisma.serviceOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceOptionCreateManyArgs>(args?: SelectSubset<T, ServiceOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServiceOptions and returns the data saved in the database.
     * @param {ServiceOptionCreateManyAndReturnArgs} args - Arguments to create many ServiceOptions.
     * @example
     * // Create many ServiceOptions
     * const serviceOption = await prisma.serviceOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServiceOptions and only return the `id`
     * const serviceOptionWithIdOnly = await prisma.serviceOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServiceOption.
     * @param {ServiceOptionDeleteArgs} args - Arguments to delete one ServiceOption.
     * @example
     * // Delete one ServiceOption
     * const ServiceOption = await prisma.serviceOption.delete({
     *   where: {
     *     // ... filter to delete one ServiceOption
     *   }
     * })
     * 
     */
    delete<T extends ServiceOptionDeleteArgs>(args: SelectSubset<T, ServiceOptionDeleteArgs<ExtArgs>>): Prisma__ServiceOptionClient<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServiceOption.
     * @param {ServiceOptionUpdateArgs} args - Arguments to update one ServiceOption.
     * @example
     * // Update one ServiceOption
     * const serviceOption = await prisma.serviceOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceOptionUpdateArgs>(args: SelectSubset<T, ServiceOptionUpdateArgs<ExtArgs>>): Prisma__ServiceOptionClient<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServiceOptions.
     * @param {ServiceOptionDeleteManyArgs} args - Arguments to filter ServiceOptions to delete.
     * @example
     * // Delete a few ServiceOptions
     * const { count } = await prisma.serviceOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceOptionDeleteManyArgs>(args?: SelectSubset<T, ServiceOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceOptions
     * const serviceOption = await prisma.serviceOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceOptionUpdateManyArgs>(args: SelectSubset<T, ServiceOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceOptions and returns the data updated in the database.
     * @param {ServiceOptionUpdateManyAndReturnArgs} args - Arguments to update many ServiceOptions.
     * @example
     * // Update many ServiceOptions
     * const serviceOption = await prisma.serviceOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServiceOptions and only return the `id`
     * const serviceOptionWithIdOnly = await prisma.serviceOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServiceOption.
     * @param {ServiceOptionUpsertArgs} args - Arguments to update or create a ServiceOption.
     * @example
     * // Update or create a ServiceOption
     * const serviceOption = await prisma.serviceOption.upsert({
     *   create: {
     *     // ... data to create a ServiceOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceOption we want to update
     *   }
     * })
     */
    upsert<T extends ServiceOptionUpsertArgs>(args: SelectSubset<T, ServiceOptionUpsertArgs<ExtArgs>>): Prisma__ServiceOptionClient<$Result.GetResult<Prisma.$ServiceOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServiceOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOptionCountArgs} args - Arguments to filter ServiceOptions to count.
     * @example
     * // Count the number of ServiceOptions
     * const count = await prisma.serviceOption.count({
     *   where: {
     *     // ... the filter for the ServiceOptions we want to count
     *   }
     * })
    **/
    count<T extends ServiceOptionCountArgs>(
      args?: Subset<T, ServiceOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceOptionAggregateArgs>(args: Subset<T, ServiceOptionAggregateArgs>): Prisma.PrismaPromise<GetServiceOptionAggregateType<T>>

    /**
     * Group by ServiceOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceOptionGroupByArgs['orderBy'] }
        : { orderBy?: ServiceOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceOption model
   */
  readonly fields: ServiceOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    service<T extends ServiceItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceItemDefaultArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServiceOption model
   */
  interface ServiceOptionFieldRefs {
    readonly id: FieldRef<"ServiceOption", 'Int'>
    readonly serviceId: FieldRef<"ServiceOption", 'Int'>
    readonly name: FieldRef<"ServiceOption", 'String'>
    readonly priceDelta: FieldRef<"ServiceOption", 'Float'>
    readonly description: FieldRef<"ServiceOption", 'String'>
    readonly imageUrl: FieldRef<"ServiceOption", 'String'>
    readonly createdAt: FieldRef<"ServiceOption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServiceOption findUnique
   */
  export type ServiceOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOption to fetch.
     */
    where: ServiceOptionWhereUniqueInput
  }

  /**
   * ServiceOption findUniqueOrThrow
   */
  export type ServiceOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOption to fetch.
     */
    where: ServiceOptionWhereUniqueInput
  }

  /**
   * ServiceOption findFirst
   */
  export type ServiceOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOption to fetch.
     */
    where?: ServiceOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceOptions to fetch.
     */
    orderBy?: ServiceOptionOrderByWithRelationInput | ServiceOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceOptions.
     */
    cursor?: ServiceOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceOptions.
     */
    distinct?: ServiceOptionScalarFieldEnum | ServiceOptionScalarFieldEnum[]
  }

  /**
   * ServiceOption findFirstOrThrow
   */
  export type ServiceOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOption to fetch.
     */
    where?: ServiceOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceOptions to fetch.
     */
    orderBy?: ServiceOptionOrderByWithRelationInput | ServiceOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceOptions.
     */
    cursor?: ServiceOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceOptions.
     */
    distinct?: ServiceOptionScalarFieldEnum | ServiceOptionScalarFieldEnum[]
  }

  /**
   * ServiceOption findMany
   */
  export type ServiceOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    /**
     * Filter, which ServiceOptions to fetch.
     */
    where?: ServiceOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceOptions to fetch.
     */
    orderBy?: ServiceOptionOrderByWithRelationInput | ServiceOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceOptions.
     */
    cursor?: ServiceOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceOptions.
     */
    skip?: number
    distinct?: ServiceOptionScalarFieldEnum | ServiceOptionScalarFieldEnum[]
  }

  /**
   * ServiceOption create
   */
  export type ServiceOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceOption.
     */
    data: XOR<ServiceOptionCreateInput, ServiceOptionUncheckedCreateInput>
  }

  /**
   * ServiceOption createMany
   */
  export type ServiceOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceOptions.
     */
    data: ServiceOptionCreateManyInput | ServiceOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServiceOption createManyAndReturn
   */
  export type ServiceOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * The data used to create many ServiceOptions.
     */
    data: ServiceOptionCreateManyInput | ServiceOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceOption update
   */
  export type ServiceOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceOption.
     */
    data: XOR<ServiceOptionUpdateInput, ServiceOptionUncheckedUpdateInput>
    /**
     * Choose, which ServiceOption to update.
     */
    where: ServiceOptionWhereUniqueInput
  }

  /**
   * ServiceOption updateMany
   */
  export type ServiceOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceOptions.
     */
    data: XOR<ServiceOptionUpdateManyMutationInput, ServiceOptionUncheckedUpdateManyInput>
    /**
     * Filter which ServiceOptions to update
     */
    where?: ServiceOptionWhereInput
    /**
     * Limit how many ServiceOptions to update.
     */
    limit?: number
  }

  /**
   * ServiceOption updateManyAndReturn
   */
  export type ServiceOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * The data used to update ServiceOptions.
     */
    data: XOR<ServiceOptionUpdateManyMutationInput, ServiceOptionUncheckedUpdateManyInput>
    /**
     * Filter which ServiceOptions to update
     */
    where?: ServiceOptionWhereInput
    /**
     * Limit how many ServiceOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ServiceOption upsert
   */
  export type ServiceOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceOption to update in case it exists.
     */
    where: ServiceOptionWhereUniqueInput
    /**
     * In case the ServiceOption found by the `where` argument doesn't exist, create a new ServiceOption with this data.
     */
    create: XOR<ServiceOptionCreateInput, ServiceOptionUncheckedCreateInput>
    /**
     * In case the ServiceOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceOptionUpdateInput, ServiceOptionUncheckedUpdateInput>
  }

  /**
   * ServiceOption delete
   */
  export type ServiceOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
    /**
     * Filter which ServiceOption to delete.
     */
    where: ServiceOptionWhereUniqueInput
  }

  /**
   * ServiceOption deleteMany
   */
  export type ServiceOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceOptions to delete
     */
    where?: ServiceOptionWhereInput
    /**
     * Limit how many ServiceOptions to delete.
     */
    limit?: number
  }

  /**
   * ServiceOption without action
   */
  export type ServiceOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceOption
     */
    select?: ServiceOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServiceOption
     */
    omit?: ServiceOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceOptionInclude<ExtArgs> | null
  }


  /**
   * Model FollowUp
   */

  export type AggregateFollowUp = {
    _count: FollowUpCountAggregateOutputType | null
    _avg: FollowUpAvgAggregateOutputType | null
    _sum: FollowUpSumAggregateOutputType | null
    _min: FollowUpMinAggregateOutputType | null
    _max: FollowUpMaxAggregateOutputType | null
  }

  export type FollowUpAvgAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
  }

  export type FollowUpSumAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
  }

  export type FollowUpMinAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
    reason: string | null
    condition: string | null
  }

  export type FollowUpMaxAggregateOutputType = {
    id: number | null
    sourceId: number | null
    targetId: number | null
    reason: string | null
    condition: string | null
  }

  export type FollowUpCountAggregateOutputType = {
    id: number
    sourceId: number
    targetId: number
    reason: number
    condition: number
    _all: number
  }


  export type FollowUpAvgAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
  }

  export type FollowUpSumAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
  }

  export type FollowUpMinAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
    reason?: true
    condition?: true
  }

  export type FollowUpMaxAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
    reason?: true
    condition?: true
  }

  export type FollowUpCountAggregateInputType = {
    id?: true
    sourceId?: true
    targetId?: true
    reason?: true
    condition?: true
    _all?: true
  }

  export type FollowUpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FollowUp to aggregate.
     */
    where?: FollowUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowUps to fetch.
     */
    orderBy?: FollowUpOrderByWithRelationInput | FollowUpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowUps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FollowUps
    **/
    _count?: true | FollowUpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FollowUpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FollowUpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowUpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowUpMaxAggregateInputType
  }

  export type GetFollowUpAggregateType<T extends FollowUpAggregateArgs> = {
        [P in keyof T & keyof AggregateFollowUp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollowUp[P]>
      : GetScalarType<T[P], AggregateFollowUp[P]>
  }




  export type FollowUpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FollowUpWhereInput
    orderBy?: FollowUpOrderByWithAggregationInput | FollowUpOrderByWithAggregationInput[]
    by: FollowUpScalarFieldEnum[] | FollowUpScalarFieldEnum
    having?: FollowUpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowUpCountAggregateInputType | true
    _avg?: FollowUpAvgAggregateInputType
    _sum?: FollowUpSumAggregateInputType
    _min?: FollowUpMinAggregateInputType
    _max?: FollowUpMaxAggregateInputType
  }

  export type FollowUpGroupByOutputType = {
    id: number
    sourceId: number
    targetId: number
    reason: string | null
    condition: string | null
    _count: FollowUpCountAggregateOutputType | null
    _avg: FollowUpAvgAggregateOutputType | null
    _sum: FollowUpSumAggregateOutputType | null
    _min: FollowUpMinAggregateOutputType | null
    _max: FollowUpMaxAggregateOutputType | null
  }

  type GetFollowUpGroupByPayload<T extends FollowUpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowUpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowUpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowUpGroupByOutputType[P]>
            : GetScalarType<T[P], FollowUpGroupByOutputType[P]>
        }
      >
    >


  export type FollowUpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceId?: boolean
    targetId?: boolean
    reason?: boolean
    condition?: boolean
    source?: boolean | ServiceItemDefaultArgs<ExtArgs>
    target?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["followUp"]>

  export type FollowUpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceId?: boolean
    targetId?: boolean
    reason?: boolean
    condition?: boolean
    source?: boolean | ServiceItemDefaultArgs<ExtArgs>
    target?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["followUp"]>

  export type FollowUpSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sourceId?: boolean
    targetId?: boolean
    reason?: boolean
    condition?: boolean
    source?: boolean | ServiceItemDefaultArgs<ExtArgs>
    target?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["followUp"]>

  export type FollowUpSelectScalar = {
    id?: boolean
    sourceId?: boolean
    targetId?: boolean
    reason?: boolean
    condition?: boolean
  }

  export type FollowUpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sourceId" | "targetId" | "reason" | "condition", ExtArgs["result"]["followUp"]>
  export type FollowUpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    source?: boolean | ServiceItemDefaultArgs<ExtArgs>
    target?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }
  export type FollowUpIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    source?: boolean | ServiceItemDefaultArgs<ExtArgs>
    target?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }
  export type FollowUpIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    source?: boolean | ServiceItemDefaultArgs<ExtArgs>
    target?: boolean | ServiceItemDefaultArgs<ExtArgs>
  }

  export type $FollowUpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FollowUp"
    objects: {
      source: Prisma.$ServiceItemPayload<ExtArgs>
      target: Prisma.$ServiceItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sourceId: number
      targetId: number
      reason: string | null
      condition: string | null
    }, ExtArgs["result"]["followUp"]>
    composites: {}
  }

  type FollowUpGetPayload<S extends boolean | null | undefined | FollowUpDefaultArgs> = $Result.GetResult<Prisma.$FollowUpPayload, S>

  type FollowUpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FollowUpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FollowUpCountAggregateInputType | true
    }

  export interface FollowUpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FollowUp'], meta: { name: 'FollowUp' } }
    /**
     * Find zero or one FollowUp that matches the filter.
     * @param {FollowUpFindUniqueArgs} args - Arguments to find a FollowUp
     * @example
     * // Get one FollowUp
     * const followUp = await prisma.followUp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FollowUpFindUniqueArgs>(args: SelectSubset<T, FollowUpFindUniqueArgs<ExtArgs>>): Prisma__FollowUpClient<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FollowUp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FollowUpFindUniqueOrThrowArgs} args - Arguments to find a FollowUp
     * @example
     * // Get one FollowUp
     * const followUp = await prisma.followUp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FollowUpFindUniqueOrThrowArgs>(args: SelectSubset<T, FollowUpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FollowUpClient<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FollowUp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpFindFirstArgs} args - Arguments to find a FollowUp
     * @example
     * // Get one FollowUp
     * const followUp = await prisma.followUp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FollowUpFindFirstArgs>(args?: SelectSubset<T, FollowUpFindFirstArgs<ExtArgs>>): Prisma__FollowUpClient<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FollowUp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpFindFirstOrThrowArgs} args - Arguments to find a FollowUp
     * @example
     * // Get one FollowUp
     * const followUp = await prisma.followUp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FollowUpFindFirstOrThrowArgs>(args?: SelectSubset<T, FollowUpFindFirstOrThrowArgs<ExtArgs>>): Prisma__FollowUpClient<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FollowUps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FollowUps
     * const followUps = await prisma.followUp.findMany()
     * 
     * // Get first 10 FollowUps
     * const followUps = await prisma.followUp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followUpWithIdOnly = await prisma.followUp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FollowUpFindManyArgs>(args?: SelectSubset<T, FollowUpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FollowUp.
     * @param {FollowUpCreateArgs} args - Arguments to create a FollowUp.
     * @example
     * // Create one FollowUp
     * const FollowUp = await prisma.followUp.create({
     *   data: {
     *     // ... data to create a FollowUp
     *   }
     * })
     * 
     */
    create<T extends FollowUpCreateArgs>(args: SelectSubset<T, FollowUpCreateArgs<ExtArgs>>): Prisma__FollowUpClient<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FollowUps.
     * @param {FollowUpCreateManyArgs} args - Arguments to create many FollowUps.
     * @example
     * // Create many FollowUps
     * const followUp = await prisma.followUp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FollowUpCreateManyArgs>(args?: SelectSubset<T, FollowUpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FollowUps and returns the data saved in the database.
     * @param {FollowUpCreateManyAndReturnArgs} args - Arguments to create many FollowUps.
     * @example
     * // Create many FollowUps
     * const followUp = await prisma.followUp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FollowUps and only return the `id`
     * const followUpWithIdOnly = await prisma.followUp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FollowUpCreateManyAndReturnArgs>(args?: SelectSubset<T, FollowUpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FollowUp.
     * @param {FollowUpDeleteArgs} args - Arguments to delete one FollowUp.
     * @example
     * // Delete one FollowUp
     * const FollowUp = await prisma.followUp.delete({
     *   where: {
     *     // ... filter to delete one FollowUp
     *   }
     * })
     * 
     */
    delete<T extends FollowUpDeleteArgs>(args: SelectSubset<T, FollowUpDeleteArgs<ExtArgs>>): Prisma__FollowUpClient<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FollowUp.
     * @param {FollowUpUpdateArgs} args - Arguments to update one FollowUp.
     * @example
     * // Update one FollowUp
     * const followUp = await prisma.followUp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FollowUpUpdateArgs>(args: SelectSubset<T, FollowUpUpdateArgs<ExtArgs>>): Prisma__FollowUpClient<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FollowUps.
     * @param {FollowUpDeleteManyArgs} args - Arguments to filter FollowUps to delete.
     * @example
     * // Delete a few FollowUps
     * const { count } = await prisma.followUp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FollowUpDeleteManyArgs>(args?: SelectSubset<T, FollowUpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FollowUps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FollowUps
     * const followUp = await prisma.followUp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FollowUpUpdateManyArgs>(args: SelectSubset<T, FollowUpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FollowUps and returns the data updated in the database.
     * @param {FollowUpUpdateManyAndReturnArgs} args - Arguments to update many FollowUps.
     * @example
     * // Update many FollowUps
     * const followUp = await prisma.followUp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FollowUps and only return the `id`
     * const followUpWithIdOnly = await prisma.followUp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FollowUpUpdateManyAndReturnArgs>(args: SelectSubset<T, FollowUpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FollowUp.
     * @param {FollowUpUpsertArgs} args - Arguments to update or create a FollowUp.
     * @example
     * // Update or create a FollowUp
     * const followUp = await prisma.followUp.upsert({
     *   create: {
     *     // ... data to create a FollowUp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FollowUp we want to update
     *   }
     * })
     */
    upsert<T extends FollowUpUpsertArgs>(args: SelectSubset<T, FollowUpUpsertArgs<ExtArgs>>): Prisma__FollowUpClient<$Result.GetResult<Prisma.$FollowUpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FollowUps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpCountArgs} args - Arguments to filter FollowUps to count.
     * @example
     * // Count the number of FollowUps
     * const count = await prisma.followUp.count({
     *   where: {
     *     // ... the filter for the FollowUps we want to count
     *   }
     * })
    **/
    count<T extends FollowUpCountArgs>(
      args?: Subset<T, FollowUpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowUpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FollowUp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowUpAggregateArgs>(args: Subset<T, FollowUpAggregateArgs>): Prisma.PrismaPromise<GetFollowUpAggregateType<T>>

    /**
     * Group by FollowUp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowUpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowUpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowUpGroupByArgs['orderBy'] }
        : { orderBy?: FollowUpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowUpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowUpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FollowUp model
   */
  readonly fields: FollowUpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FollowUp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowUpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    source<T extends ServiceItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceItemDefaultArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    target<T extends ServiceItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceItemDefaultArgs<ExtArgs>>): Prisma__ServiceItemClient<$Result.GetResult<Prisma.$ServiceItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FollowUp model
   */
  interface FollowUpFieldRefs {
    readonly id: FieldRef<"FollowUp", 'Int'>
    readonly sourceId: FieldRef<"FollowUp", 'Int'>
    readonly targetId: FieldRef<"FollowUp", 'Int'>
    readonly reason: FieldRef<"FollowUp", 'String'>
    readonly condition: FieldRef<"FollowUp", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FollowUp findUnique
   */
  export type FollowUpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    /**
     * Filter, which FollowUp to fetch.
     */
    where: FollowUpWhereUniqueInput
  }

  /**
   * FollowUp findUniqueOrThrow
   */
  export type FollowUpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    /**
     * Filter, which FollowUp to fetch.
     */
    where: FollowUpWhereUniqueInput
  }

  /**
   * FollowUp findFirst
   */
  export type FollowUpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    /**
     * Filter, which FollowUp to fetch.
     */
    where?: FollowUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowUps to fetch.
     */
    orderBy?: FollowUpOrderByWithRelationInput | FollowUpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FollowUps.
     */
    cursor?: FollowUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowUps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FollowUps.
     */
    distinct?: FollowUpScalarFieldEnum | FollowUpScalarFieldEnum[]
  }

  /**
   * FollowUp findFirstOrThrow
   */
  export type FollowUpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    /**
     * Filter, which FollowUp to fetch.
     */
    where?: FollowUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowUps to fetch.
     */
    orderBy?: FollowUpOrderByWithRelationInput | FollowUpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FollowUps.
     */
    cursor?: FollowUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowUps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FollowUps.
     */
    distinct?: FollowUpScalarFieldEnum | FollowUpScalarFieldEnum[]
  }

  /**
   * FollowUp findMany
   */
  export type FollowUpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    /**
     * Filter, which FollowUps to fetch.
     */
    where?: FollowUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FollowUps to fetch.
     */
    orderBy?: FollowUpOrderByWithRelationInput | FollowUpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FollowUps.
     */
    cursor?: FollowUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FollowUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FollowUps.
     */
    skip?: number
    distinct?: FollowUpScalarFieldEnum | FollowUpScalarFieldEnum[]
  }

  /**
   * FollowUp create
   */
  export type FollowUpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    /**
     * The data needed to create a FollowUp.
     */
    data: XOR<FollowUpCreateInput, FollowUpUncheckedCreateInput>
  }

  /**
   * FollowUp createMany
   */
  export type FollowUpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FollowUps.
     */
    data: FollowUpCreateManyInput | FollowUpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FollowUp createManyAndReturn
   */
  export type FollowUpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * The data used to create many FollowUps.
     */
    data: FollowUpCreateManyInput | FollowUpCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FollowUp update
   */
  export type FollowUpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    /**
     * The data needed to update a FollowUp.
     */
    data: XOR<FollowUpUpdateInput, FollowUpUncheckedUpdateInput>
    /**
     * Choose, which FollowUp to update.
     */
    where: FollowUpWhereUniqueInput
  }

  /**
   * FollowUp updateMany
   */
  export type FollowUpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FollowUps.
     */
    data: XOR<FollowUpUpdateManyMutationInput, FollowUpUncheckedUpdateManyInput>
    /**
     * Filter which FollowUps to update
     */
    where?: FollowUpWhereInput
    /**
     * Limit how many FollowUps to update.
     */
    limit?: number
  }

  /**
   * FollowUp updateManyAndReturn
   */
  export type FollowUpUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * The data used to update FollowUps.
     */
    data: XOR<FollowUpUpdateManyMutationInput, FollowUpUncheckedUpdateManyInput>
    /**
     * Filter which FollowUps to update
     */
    where?: FollowUpWhereInput
    /**
     * Limit how many FollowUps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FollowUp upsert
   */
  export type FollowUpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    /**
     * The filter to search for the FollowUp to update in case it exists.
     */
    where: FollowUpWhereUniqueInput
    /**
     * In case the FollowUp found by the `where` argument doesn't exist, create a new FollowUp with this data.
     */
    create: XOR<FollowUpCreateInput, FollowUpUncheckedCreateInput>
    /**
     * In case the FollowUp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowUpUpdateInput, FollowUpUncheckedUpdateInput>
  }

  /**
   * FollowUp delete
   */
  export type FollowUpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
    /**
     * Filter which FollowUp to delete.
     */
    where: FollowUpWhereUniqueInput
  }

  /**
   * FollowUp deleteMany
   */
  export type FollowUpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FollowUps to delete
     */
    where?: FollowUpWhereInput
    /**
     * Limit how many FollowUps to delete.
     */
    limit?: number
  }

  /**
   * FollowUp without action
   */
  export type FollowUpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FollowUp
     */
    select?: FollowUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FollowUp
     */
    omit?: FollowUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FollowUpInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
    totalAmount: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: number | null
    totalAmount: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: number | null
    clientId: string | null
    title: string | null
    fileUrl: string | null
    issuedDate: Date | null
    totalAmount: number | null
    projectName: string | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: number | null
    clientId: string | null
    title: string | null
    fileUrl: string | null
    issuedDate: Date | null
    totalAmount: number | null
    projectName: string | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    clientId: number
    title: number
    fileUrl: number
    issuedDate: number
    totalAmount: number
    projectName: number
    createdAt: number
    deletedAt: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
    totalAmount?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
    totalAmount?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    clientId?: true
    title?: true
    fileUrl?: true
    issuedDate?: true
    totalAmount?: true
    projectName?: true
    createdAt?: true
    deletedAt?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    clientId?: true
    title?: true
    fileUrl?: true
    issuedDate?: true
    totalAmount?: true
    projectName?: true
    createdAt?: true
    deletedAt?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    clientId?: true
    title?: true
    fileUrl?: true
    issuedDate?: true
    totalAmount?: true
    projectName?: true
    createdAt?: true
    deletedAt?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: number
    clientId: string
    title: string
    fileUrl: string
    issuedDate: Date
    totalAmount: number
    projectName: string
    createdAt: Date
    deletedAt: Date | null
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    title?: boolean
    fileUrl?: boolean
    issuedDate?: boolean
    totalAmount?: boolean
    projectName?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    title?: boolean
    fileUrl?: boolean
    issuedDate?: boolean
    totalAmount?: boolean
    projectName?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    title?: boolean
    fileUrl?: boolean
    issuedDate?: boolean
    totalAmount?: boolean
    projectName?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    clientId?: boolean
    title?: boolean
    fileUrl?: boolean
    issuedDate?: boolean
    totalAmount?: boolean
    projectName?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }

  export type InvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "title" | "fileUrl" | "issuedDate" | "totalAmount" | "projectName" | "createdAt" | "deletedAt", ExtArgs["result"]["invoice"]>
  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      client: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientId: string
      title: string
      fileUrl: string
      issuedDate: Date
      totalAmount: number
      projectName: string
      createdAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceFindUniqueArgs>(args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceFindFirstArgs>(args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceFindManyArgs>(args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends InvoiceCreateArgs>(args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceCreateManyArgs>(args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends InvoiceDeleteArgs>(args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceUpdateArgs>(args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceDeleteManyArgs>(args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceUpdateManyArgs>(args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices and returns the data updated in the database.
     * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceUpsertArgs>(args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invoice model
   */
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'Int'>
    readonly clientId: FieldRef<"Invoice", 'String'>
    readonly title: FieldRef<"Invoice", 'String'>
    readonly fileUrl: FieldRef<"Invoice", 'String'>
    readonly issuedDate: FieldRef<"Invoice", 'DateTime'>
    readonly totalAmount: FieldRef<"Invoice", 'Float'>
    readonly projectName: FieldRef<"Invoice", 'String'>
    readonly createdAt: FieldRef<"Invoice", 'DateTime'>
    readonly deletedAt: FieldRef<"Invoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
  }

  /**
   * Invoice updateManyAndReturn
   */
  export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to delete.
     */
    limit?: number
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model ClientProject
   */

  export type AggregateClientProject = {
    _count: ClientProjectCountAggregateOutputType | null
    _avg: ClientProjectAvgAggregateOutputType | null
    _sum: ClientProjectSumAggregateOutputType | null
    _min: ClientProjectMinAggregateOutputType | null
    _max: ClientProjectMaxAggregateOutputType | null
  }

  export type ClientProjectAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientProjectSumAggregateOutputType = {
    id: number | null
  }

  export type ClientProjectMinAggregateOutputType = {
    id: number | null
    clientId: string | null
    name: string | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientProjectMaxAggregateOutputType = {
    id: number | null
    clientId: string | null
    name: string | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    deletedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClientProjectCountAggregateOutputType = {
    id: number
    clientId: number
    name: number
    status: number
    startDate: number
    endDate: number
    deletedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClientProjectAvgAggregateInputType = {
    id?: true
  }

  export type ClientProjectSumAggregateInputType = {
    id?: true
  }

  export type ClientProjectMinAggregateInputType = {
    id?: true
    clientId?: true
    name?: true
    status?: true
    startDate?: true
    endDate?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientProjectMaxAggregateInputType = {
    id?: true
    clientId?: true
    name?: true
    status?: true
    startDate?: true
    endDate?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClientProjectCountAggregateInputType = {
    id?: true
    clientId?: true
    name?: true
    status?: true
    startDate?: true
    endDate?: true
    deletedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClientProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientProject to aggregate.
     */
    where?: ClientProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientProjects to fetch.
     */
    orderBy?: ClientProjectOrderByWithRelationInput | ClientProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientProjects
    **/
    _count?: true | ClientProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientProjectMaxAggregateInputType
  }

  export type GetClientProjectAggregateType<T extends ClientProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateClientProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientProject[P]>
      : GetScalarType<T[P], AggregateClientProject[P]>
  }




  export type ClientProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientProjectWhereInput
    orderBy?: ClientProjectOrderByWithAggregationInput | ClientProjectOrderByWithAggregationInput[]
    by: ClientProjectScalarFieldEnum[] | ClientProjectScalarFieldEnum
    having?: ClientProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientProjectCountAggregateInputType | true
    _avg?: ClientProjectAvgAggregateInputType
    _sum?: ClientProjectSumAggregateInputType
    _min?: ClientProjectMinAggregateInputType
    _max?: ClientProjectMaxAggregateInputType
  }

  export type ClientProjectGroupByOutputType = {
    id: number
    clientId: string
    name: string
    status: string
    startDate: Date
    endDate: Date | null
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ClientProjectCountAggregateOutputType | null
    _avg: ClientProjectAvgAggregateOutputType | null
    _sum: ClientProjectSumAggregateOutputType | null
    _min: ClientProjectMinAggregateOutputType | null
    _max: ClientProjectMaxAggregateOutputType | null
  }

  type GetClientProjectGroupByPayload<T extends ClientProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ClientProjectGroupByOutputType[P]>
        }
      >
    >


  export type ClientProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    name?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
    history?: boolean | ClientProject$historyArgs<ExtArgs>
    _count?: boolean | ClientProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientProject"]>

  export type ClientProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    name?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientProject"]>

  export type ClientProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    name?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    client?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientProject"]>

  export type ClientProjectSelectScalar = {
    id?: boolean
    clientId?: boolean
    name?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClientProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "name" | "status" | "startDate" | "endDate" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["clientProject"]>
  export type ClientProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
    history?: boolean | ClientProject$historyArgs<ExtArgs>
    _count?: boolean | ClientProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClientProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ClientProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ClientProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClientProject"
    objects: {
      client: Prisma.$UserPayload<ExtArgs>
      history: Prisma.$ClientProjectHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientId: string
      name: string
      status: string
      startDate: Date
      endDate: Date | null
      deletedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["clientProject"]>
    composites: {}
  }

  type ClientProjectGetPayload<S extends boolean | null | undefined | ClientProjectDefaultArgs> = $Result.GetResult<Prisma.$ClientProjectPayload, S>

  type ClientProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientProjectCountAggregateInputType | true
    }

  export interface ClientProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientProject'], meta: { name: 'ClientProject' } }
    /**
     * Find zero or one ClientProject that matches the filter.
     * @param {ClientProjectFindUniqueArgs} args - Arguments to find a ClientProject
     * @example
     * // Get one ClientProject
     * const clientProject = await prisma.clientProject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientProjectFindUniqueArgs>(args: SelectSubset<T, ClientProjectFindUniqueArgs<ExtArgs>>): Prisma__ClientProjectClient<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClientProject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientProjectFindUniqueOrThrowArgs} args - Arguments to find a ClientProject
     * @example
     * // Get one ClientProject
     * const clientProject = await prisma.clientProject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientProjectClient<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClientProject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectFindFirstArgs} args - Arguments to find a ClientProject
     * @example
     * // Get one ClientProject
     * const clientProject = await prisma.clientProject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientProjectFindFirstArgs>(args?: SelectSubset<T, ClientProjectFindFirstArgs<ExtArgs>>): Prisma__ClientProjectClient<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClientProject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectFindFirstOrThrowArgs} args - Arguments to find a ClientProject
     * @example
     * // Get one ClientProject
     * const clientProject = await prisma.clientProject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientProjectClient<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClientProjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientProjects
     * const clientProjects = await prisma.clientProject.findMany()
     * 
     * // Get first 10 ClientProjects
     * const clientProjects = await prisma.clientProject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientProjectWithIdOnly = await prisma.clientProject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientProjectFindManyArgs>(args?: SelectSubset<T, ClientProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClientProject.
     * @param {ClientProjectCreateArgs} args - Arguments to create a ClientProject.
     * @example
     * // Create one ClientProject
     * const ClientProject = await prisma.clientProject.create({
     *   data: {
     *     // ... data to create a ClientProject
     *   }
     * })
     * 
     */
    create<T extends ClientProjectCreateArgs>(args: SelectSubset<T, ClientProjectCreateArgs<ExtArgs>>): Prisma__ClientProjectClient<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClientProjects.
     * @param {ClientProjectCreateManyArgs} args - Arguments to create many ClientProjects.
     * @example
     * // Create many ClientProjects
     * const clientProject = await prisma.clientProject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientProjectCreateManyArgs>(args?: SelectSubset<T, ClientProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClientProjects and returns the data saved in the database.
     * @param {ClientProjectCreateManyAndReturnArgs} args - Arguments to create many ClientProjects.
     * @example
     * // Create many ClientProjects
     * const clientProject = await prisma.clientProject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClientProjects and only return the `id`
     * const clientProjectWithIdOnly = await prisma.clientProject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClientProject.
     * @param {ClientProjectDeleteArgs} args - Arguments to delete one ClientProject.
     * @example
     * // Delete one ClientProject
     * const ClientProject = await prisma.clientProject.delete({
     *   where: {
     *     // ... filter to delete one ClientProject
     *   }
     * })
     * 
     */
    delete<T extends ClientProjectDeleteArgs>(args: SelectSubset<T, ClientProjectDeleteArgs<ExtArgs>>): Prisma__ClientProjectClient<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClientProject.
     * @param {ClientProjectUpdateArgs} args - Arguments to update one ClientProject.
     * @example
     * // Update one ClientProject
     * const clientProject = await prisma.clientProject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientProjectUpdateArgs>(args: SelectSubset<T, ClientProjectUpdateArgs<ExtArgs>>): Prisma__ClientProjectClient<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClientProjects.
     * @param {ClientProjectDeleteManyArgs} args - Arguments to filter ClientProjects to delete.
     * @example
     * // Delete a few ClientProjects
     * const { count } = await prisma.clientProject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientProjectDeleteManyArgs>(args?: SelectSubset<T, ClientProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientProjects
     * const clientProject = await prisma.clientProject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientProjectUpdateManyArgs>(args: SelectSubset<T, ClientProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientProjects and returns the data updated in the database.
     * @param {ClientProjectUpdateManyAndReturnArgs} args - Arguments to update many ClientProjects.
     * @example
     * // Update many ClientProjects
     * const clientProject = await prisma.clientProject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClientProjects and only return the `id`
     * const clientProjectWithIdOnly = await prisma.clientProject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClientProject.
     * @param {ClientProjectUpsertArgs} args - Arguments to update or create a ClientProject.
     * @example
     * // Update or create a ClientProject
     * const clientProject = await prisma.clientProject.upsert({
     *   create: {
     *     // ... data to create a ClientProject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientProject we want to update
     *   }
     * })
     */
    upsert<T extends ClientProjectUpsertArgs>(args: SelectSubset<T, ClientProjectUpsertArgs<ExtArgs>>): Prisma__ClientProjectClient<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClientProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectCountArgs} args - Arguments to filter ClientProjects to count.
     * @example
     * // Count the number of ClientProjects
     * const count = await prisma.clientProject.count({
     *   where: {
     *     // ... the filter for the ClientProjects we want to count
     *   }
     * })
    **/
    count<T extends ClientProjectCountArgs>(
      args?: Subset<T, ClientProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientProjectAggregateArgs>(args: Subset<T, ClientProjectAggregateArgs>): Prisma.PrismaPromise<GetClientProjectAggregateType<T>>

    /**
     * Group by ClientProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientProjectGroupByArgs['orderBy'] }
        : { orderBy?: ClientProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClientProject model
   */
  readonly fields: ClientProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientProject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    history<T extends ClientProject$historyArgs<ExtArgs> = {}>(args?: Subset<T, ClientProject$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClientProject model
   */
  interface ClientProjectFieldRefs {
    readonly id: FieldRef<"ClientProject", 'Int'>
    readonly clientId: FieldRef<"ClientProject", 'String'>
    readonly name: FieldRef<"ClientProject", 'String'>
    readonly status: FieldRef<"ClientProject", 'String'>
    readonly startDate: FieldRef<"ClientProject", 'DateTime'>
    readonly endDate: FieldRef<"ClientProject", 'DateTime'>
    readonly deletedAt: FieldRef<"ClientProject", 'DateTime'>
    readonly createdAt: FieldRef<"ClientProject", 'DateTime'>
    readonly updatedAt: FieldRef<"ClientProject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClientProject findUnique
   */
  export type ClientProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    /**
     * Filter, which ClientProject to fetch.
     */
    where: ClientProjectWhereUniqueInput
  }

  /**
   * ClientProject findUniqueOrThrow
   */
  export type ClientProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    /**
     * Filter, which ClientProject to fetch.
     */
    where: ClientProjectWhereUniqueInput
  }

  /**
   * ClientProject findFirst
   */
  export type ClientProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    /**
     * Filter, which ClientProject to fetch.
     */
    where?: ClientProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientProjects to fetch.
     */
    orderBy?: ClientProjectOrderByWithRelationInput | ClientProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientProjects.
     */
    cursor?: ClientProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientProjects.
     */
    distinct?: ClientProjectScalarFieldEnum | ClientProjectScalarFieldEnum[]
  }

  /**
   * ClientProject findFirstOrThrow
   */
  export type ClientProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    /**
     * Filter, which ClientProject to fetch.
     */
    where?: ClientProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientProjects to fetch.
     */
    orderBy?: ClientProjectOrderByWithRelationInput | ClientProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientProjects.
     */
    cursor?: ClientProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientProjects.
     */
    distinct?: ClientProjectScalarFieldEnum | ClientProjectScalarFieldEnum[]
  }

  /**
   * ClientProject findMany
   */
  export type ClientProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    /**
     * Filter, which ClientProjects to fetch.
     */
    where?: ClientProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientProjects to fetch.
     */
    orderBy?: ClientProjectOrderByWithRelationInput | ClientProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientProjects.
     */
    cursor?: ClientProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientProjects.
     */
    skip?: number
    distinct?: ClientProjectScalarFieldEnum | ClientProjectScalarFieldEnum[]
  }

  /**
   * ClientProject create
   */
  export type ClientProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a ClientProject.
     */
    data: XOR<ClientProjectCreateInput, ClientProjectUncheckedCreateInput>
  }

  /**
   * ClientProject createMany
   */
  export type ClientProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClientProjects.
     */
    data: ClientProjectCreateManyInput | ClientProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClientProject createManyAndReturn
   */
  export type ClientProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * The data used to create many ClientProjects.
     */
    data: ClientProjectCreateManyInput | ClientProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClientProject update
   */
  export type ClientProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a ClientProject.
     */
    data: XOR<ClientProjectUpdateInput, ClientProjectUncheckedUpdateInput>
    /**
     * Choose, which ClientProject to update.
     */
    where: ClientProjectWhereUniqueInput
  }

  /**
   * ClientProject updateMany
   */
  export type ClientProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClientProjects.
     */
    data: XOR<ClientProjectUpdateManyMutationInput, ClientProjectUncheckedUpdateManyInput>
    /**
     * Filter which ClientProjects to update
     */
    where?: ClientProjectWhereInput
    /**
     * Limit how many ClientProjects to update.
     */
    limit?: number
  }

  /**
   * ClientProject updateManyAndReturn
   */
  export type ClientProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * The data used to update ClientProjects.
     */
    data: XOR<ClientProjectUpdateManyMutationInput, ClientProjectUncheckedUpdateManyInput>
    /**
     * Filter which ClientProjects to update
     */
    where?: ClientProjectWhereInput
    /**
     * Limit how many ClientProjects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClientProject upsert
   */
  export type ClientProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the ClientProject to update in case it exists.
     */
    where: ClientProjectWhereUniqueInput
    /**
     * In case the ClientProject found by the `where` argument doesn't exist, create a new ClientProject with this data.
     */
    create: XOR<ClientProjectCreateInput, ClientProjectUncheckedCreateInput>
    /**
     * In case the ClientProject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientProjectUpdateInput, ClientProjectUncheckedUpdateInput>
  }

  /**
   * ClientProject delete
   */
  export type ClientProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
    /**
     * Filter which ClientProject to delete.
     */
    where: ClientProjectWhereUniqueInput
  }

  /**
   * ClientProject deleteMany
   */
  export type ClientProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientProjects to delete
     */
    where?: ClientProjectWhereInput
    /**
     * Limit how many ClientProjects to delete.
     */
    limit?: number
  }

  /**
   * ClientProject.history
   */
  export type ClientProject$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    where?: ClientProjectHistoryWhereInput
    orderBy?: ClientProjectHistoryOrderByWithRelationInput | ClientProjectHistoryOrderByWithRelationInput[]
    cursor?: ClientProjectHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClientProjectHistoryScalarFieldEnum | ClientProjectHistoryScalarFieldEnum[]
  }

  /**
   * ClientProject without action
   */
  export type ClientProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProject
     */
    select?: ClientProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProject
     */
    omit?: ClientProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectInclude<ExtArgs> | null
  }


  /**
   * Model ClientProjectHistory
   */

  export type AggregateClientProjectHistory = {
    _count: ClientProjectHistoryCountAggregateOutputType | null
    _avg: ClientProjectHistoryAvgAggregateOutputType | null
    _sum: ClientProjectHistorySumAggregateOutputType | null
    _min: ClientProjectHistoryMinAggregateOutputType | null
    _max: ClientProjectHistoryMaxAggregateOutputType | null
  }

  export type ClientProjectHistoryAvgAggregateOutputType = {
    id: number | null
    clientProjectId: number | null
  }

  export type ClientProjectHistorySumAggregateOutputType = {
    id: number | null
    clientProjectId: number | null
  }

  export type ClientProjectHistoryMinAggregateOutputType = {
    id: number | null
    clientProjectId: number | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    deletedAt: Date | null
    createdAt: Date | null
  }

  export type ClientProjectHistoryMaxAggregateOutputType = {
    id: number | null
    clientProjectId: number | null
    status: string | null
    startDate: Date | null
    endDate: Date | null
    deletedAt: Date | null
    createdAt: Date | null
  }

  export type ClientProjectHistoryCountAggregateOutputType = {
    id: number
    clientProjectId: number
    status: number
    startDate: number
    endDate: number
    deletedAt: number
    createdAt: number
    _all: number
  }


  export type ClientProjectHistoryAvgAggregateInputType = {
    id?: true
    clientProjectId?: true
  }

  export type ClientProjectHistorySumAggregateInputType = {
    id?: true
    clientProjectId?: true
  }

  export type ClientProjectHistoryMinAggregateInputType = {
    id?: true
    clientProjectId?: true
    status?: true
    startDate?: true
    endDate?: true
    deletedAt?: true
    createdAt?: true
  }

  export type ClientProjectHistoryMaxAggregateInputType = {
    id?: true
    clientProjectId?: true
    status?: true
    startDate?: true
    endDate?: true
    deletedAt?: true
    createdAt?: true
  }

  export type ClientProjectHistoryCountAggregateInputType = {
    id?: true
    clientProjectId?: true
    status?: true
    startDate?: true
    endDate?: true
    deletedAt?: true
    createdAt?: true
    _all?: true
  }

  export type ClientProjectHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientProjectHistory to aggregate.
     */
    where?: ClientProjectHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientProjectHistories to fetch.
     */
    orderBy?: ClientProjectHistoryOrderByWithRelationInput | ClientProjectHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientProjectHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientProjectHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientProjectHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientProjectHistories
    **/
    _count?: true | ClientProjectHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientProjectHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientProjectHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientProjectHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientProjectHistoryMaxAggregateInputType
  }

  export type GetClientProjectHistoryAggregateType<T extends ClientProjectHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateClientProjectHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientProjectHistory[P]>
      : GetScalarType<T[P], AggregateClientProjectHistory[P]>
  }




  export type ClientProjectHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientProjectHistoryWhereInput
    orderBy?: ClientProjectHistoryOrderByWithAggregationInput | ClientProjectHistoryOrderByWithAggregationInput[]
    by: ClientProjectHistoryScalarFieldEnum[] | ClientProjectHistoryScalarFieldEnum
    having?: ClientProjectHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientProjectHistoryCountAggregateInputType | true
    _avg?: ClientProjectHistoryAvgAggregateInputType
    _sum?: ClientProjectHistorySumAggregateInputType
    _min?: ClientProjectHistoryMinAggregateInputType
    _max?: ClientProjectHistoryMaxAggregateInputType
  }

  export type ClientProjectHistoryGroupByOutputType = {
    id: number
    clientProjectId: number
    status: string
    startDate: Date
    endDate: Date | null
    deletedAt: Date | null
    createdAt: Date
    _count: ClientProjectHistoryCountAggregateOutputType | null
    _avg: ClientProjectHistoryAvgAggregateOutputType | null
    _sum: ClientProjectHistorySumAggregateOutputType | null
    _min: ClientProjectHistoryMinAggregateOutputType | null
    _max: ClientProjectHistoryMaxAggregateOutputType | null
  }

  type GetClientProjectHistoryGroupByPayload<T extends ClientProjectHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientProjectHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientProjectHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientProjectHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ClientProjectHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ClientProjectHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientProjectId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    clientProject?: boolean | ClientProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientProjectHistory"]>

  export type ClientProjectHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientProjectId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    clientProject?: boolean | ClientProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientProjectHistory"]>

  export type ClientProjectHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientProjectId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    deletedAt?: boolean
    createdAt?: boolean
    clientProject?: boolean | ClientProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientProjectHistory"]>

  export type ClientProjectHistorySelectScalar = {
    id?: boolean
    clientProjectId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    deletedAt?: boolean
    createdAt?: boolean
  }

  export type ClientProjectHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientProjectId" | "status" | "startDate" | "endDate" | "deletedAt" | "createdAt", ExtArgs["result"]["clientProjectHistory"]>
  export type ClientProjectHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientProject?: boolean | ClientProjectDefaultArgs<ExtArgs>
  }
  export type ClientProjectHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientProject?: boolean | ClientProjectDefaultArgs<ExtArgs>
  }
  export type ClientProjectHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clientProject?: boolean | ClientProjectDefaultArgs<ExtArgs>
  }

  export type $ClientProjectHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClientProjectHistory"
    objects: {
      clientProject: Prisma.$ClientProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      clientProjectId: number
      status: string
      startDate: Date
      endDate: Date | null
      deletedAt: Date | null
      createdAt: Date
    }, ExtArgs["result"]["clientProjectHistory"]>
    composites: {}
  }

  type ClientProjectHistoryGetPayload<S extends boolean | null | undefined | ClientProjectHistoryDefaultArgs> = $Result.GetResult<Prisma.$ClientProjectHistoryPayload, S>

  type ClientProjectHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClientProjectHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientProjectHistoryCountAggregateInputType | true
    }

  export interface ClientProjectHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientProjectHistory'], meta: { name: 'ClientProjectHistory' } }
    /**
     * Find zero or one ClientProjectHistory that matches the filter.
     * @param {ClientProjectHistoryFindUniqueArgs} args - Arguments to find a ClientProjectHistory
     * @example
     * // Get one ClientProjectHistory
     * const clientProjectHistory = await prisma.clientProjectHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClientProjectHistoryFindUniqueArgs>(args: SelectSubset<T, ClientProjectHistoryFindUniqueArgs<ExtArgs>>): Prisma__ClientProjectHistoryClient<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClientProjectHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClientProjectHistoryFindUniqueOrThrowArgs} args - Arguments to find a ClientProjectHistory
     * @example
     * // Get one ClientProjectHistory
     * const clientProjectHistory = await prisma.clientProjectHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClientProjectHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ClientProjectHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClientProjectHistoryClient<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClientProjectHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectHistoryFindFirstArgs} args - Arguments to find a ClientProjectHistory
     * @example
     * // Get one ClientProjectHistory
     * const clientProjectHistory = await prisma.clientProjectHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClientProjectHistoryFindFirstArgs>(args?: SelectSubset<T, ClientProjectHistoryFindFirstArgs<ExtArgs>>): Prisma__ClientProjectHistoryClient<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClientProjectHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectHistoryFindFirstOrThrowArgs} args - Arguments to find a ClientProjectHistory
     * @example
     * // Get one ClientProjectHistory
     * const clientProjectHistory = await prisma.clientProjectHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClientProjectHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ClientProjectHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClientProjectHistoryClient<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClientProjectHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientProjectHistories
     * const clientProjectHistories = await prisma.clientProjectHistory.findMany()
     * 
     * // Get first 10 ClientProjectHistories
     * const clientProjectHistories = await prisma.clientProjectHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientProjectHistoryWithIdOnly = await prisma.clientProjectHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClientProjectHistoryFindManyArgs>(args?: SelectSubset<T, ClientProjectHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClientProjectHistory.
     * @param {ClientProjectHistoryCreateArgs} args - Arguments to create a ClientProjectHistory.
     * @example
     * // Create one ClientProjectHistory
     * const ClientProjectHistory = await prisma.clientProjectHistory.create({
     *   data: {
     *     // ... data to create a ClientProjectHistory
     *   }
     * })
     * 
     */
    create<T extends ClientProjectHistoryCreateArgs>(args: SelectSubset<T, ClientProjectHistoryCreateArgs<ExtArgs>>): Prisma__ClientProjectHistoryClient<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClientProjectHistories.
     * @param {ClientProjectHistoryCreateManyArgs} args - Arguments to create many ClientProjectHistories.
     * @example
     * // Create many ClientProjectHistories
     * const clientProjectHistory = await prisma.clientProjectHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClientProjectHistoryCreateManyArgs>(args?: SelectSubset<T, ClientProjectHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClientProjectHistories and returns the data saved in the database.
     * @param {ClientProjectHistoryCreateManyAndReturnArgs} args - Arguments to create many ClientProjectHistories.
     * @example
     * // Create many ClientProjectHistories
     * const clientProjectHistory = await prisma.clientProjectHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClientProjectHistories and only return the `id`
     * const clientProjectHistoryWithIdOnly = await prisma.clientProjectHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClientProjectHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ClientProjectHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClientProjectHistory.
     * @param {ClientProjectHistoryDeleteArgs} args - Arguments to delete one ClientProjectHistory.
     * @example
     * // Delete one ClientProjectHistory
     * const ClientProjectHistory = await prisma.clientProjectHistory.delete({
     *   where: {
     *     // ... filter to delete one ClientProjectHistory
     *   }
     * })
     * 
     */
    delete<T extends ClientProjectHistoryDeleteArgs>(args: SelectSubset<T, ClientProjectHistoryDeleteArgs<ExtArgs>>): Prisma__ClientProjectHistoryClient<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClientProjectHistory.
     * @param {ClientProjectHistoryUpdateArgs} args - Arguments to update one ClientProjectHistory.
     * @example
     * // Update one ClientProjectHistory
     * const clientProjectHistory = await prisma.clientProjectHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClientProjectHistoryUpdateArgs>(args: SelectSubset<T, ClientProjectHistoryUpdateArgs<ExtArgs>>): Prisma__ClientProjectHistoryClient<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClientProjectHistories.
     * @param {ClientProjectHistoryDeleteManyArgs} args - Arguments to filter ClientProjectHistories to delete.
     * @example
     * // Delete a few ClientProjectHistories
     * const { count } = await prisma.clientProjectHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClientProjectHistoryDeleteManyArgs>(args?: SelectSubset<T, ClientProjectHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientProjectHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientProjectHistories
     * const clientProjectHistory = await prisma.clientProjectHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClientProjectHistoryUpdateManyArgs>(args: SelectSubset<T, ClientProjectHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientProjectHistories and returns the data updated in the database.
     * @param {ClientProjectHistoryUpdateManyAndReturnArgs} args - Arguments to update many ClientProjectHistories.
     * @example
     * // Update many ClientProjectHistories
     * const clientProjectHistory = await prisma.clientProjectHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClientProjectHistories and only return the `id`
     * const clientProjectHistoryWithIdOnly = await prisma.clientProjectHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClientProjectHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ClientProjectHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClientProjectHistory.
     * @param {ClientProjectHistoryUpsertArgs} args - Arguments to update or create a ClientProjectHistory.
     * @example
     * // Update or create a ClientProjectHistory
     * const clientProjectHistory = await prisma.clientProjectHistory.upsert({
     *   create: {
     *     // ... data to create a ClientProjectHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientProjectHistory we want to update
     *   }
     * })
     */
    upsert<T extends ClientProjectHistoryUpsertArgs>(args: SelectSubset<T, ClientProjectHistoryUpsertArgs<ExtArgs>>): Prisma__ClientProjectHistoryClient<$Result.GetResult<Prisma.$ClientProjectHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClientProjectHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectHistoryCountArgs} args - Arguments to filter ClientProjectHistories to count.
     * @example
     * // Count the number of ClientProjectHistories
     * const count = await prisma.clientProjectHistory.count({
     *   where: {
     *     // ... the filter for the ClientProjectHistories we want to count
     *   }
     * })
    **/
    count<T extends ClientProjectHistoryCountArgs>(
      args?: Subset<T, ClientProjectHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientProjectHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientProjectHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientProjectHistoryAggregateArgs>(args: Subset<T, ClientProjectHistoryAggregateArgs>): Prisma.PrismaPromise<GetClientProjectHistoryAggregateType<T>>

    /**
     * Group by ClientProjectHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientProjectHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientProjectHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientProjectHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ClientProjectHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientProjectHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientProjectHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClientProjectHistory model
   */
  readonly fields: ClientProjectHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientProjectHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientProjectHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clientProject<T extends ClientProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClientProjectDefaultArgs<ExtArgs>>): Prisma__ClientProjectClient<$Result.GetResult<Prisma.$ClientProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClientProjectHistory model
   */
  interface ClientProjectHistoryFieldRefs {
    readonly id: FieldRef<"ClientProjectHistory", 'Int'>
    readonly clientProjectId: FieldRef<"ClientProjectHistory", 'Int'>
    readonly status: FieldRef<"ClientProjectHistory", 'String'>
    readonly startDate: FieldRef<"ClientProjectHistory", 'DateTime'>
    readonly endDate: FieldRef<"ClientProjectHistory", 'DateTime'>
    readonly deletedAt: FieldRef<"ClientProjectHistory", 'DateTime'>
    readonly createdAt: FieldRef<"ClientProjectHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClientProjectHistory findUnique
   */
  export type ClientProjectHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ClientProjectHistory to fetch.
     */
    where: ClientProjectHistoryWhereUniqueInput
  }

  /**
   * ClientProjectHistory findUniqueOrThrow
   */
  export type ClientProjectHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ClientProjectHistory to fetch.
     */
    where: ClientProjectHistoryWhereUniqueInput
  }

  /**
   * ClientProjectHistory findFirst
   */
  export type ClientProjectHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ClientProjectHistory to fetch.
     */
    where?: ClientProjectHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientProjectHistories to fetch.
     */
    orderBy?: ClientProjectHistoryOrderByWithRelationInput | ClientProjectHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientProjectHistories.
     */
    cursor?: ClientProjectHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientProjectHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientProjectHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientProjectHistories.
     */
    distinct?: ClientProjectHistoryScalarFieldEnum | ClientProjectHistoryScalarFieldEnum[]
  }

  /**
   * ClientProjectHistory findFirstOrThrow
   */
  export type ClientProjectHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ClientProjectHistory to fetch.
     */
    where?: ClientProjectHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientProjectHistories to fetch.
     */
    orderBy?: ClientProjectHistoryOrderByWithRelationInput | ClientProjectHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientProjectHistories.
     */
    cursor?: ClientProjectHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientProjectHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientProjectHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientProjectHistories.
     */
    distinct?: ClientProjectHistoryScalarFieldEnum | ClientProjectHistoryScalarFieldEnum[]
  }

  /**
   * ClientProjectHistory findMany
   */
  export type ClientProjectHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ClientProjectHistories to fetch.
     */
    where?: ClientProjectHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientProjectHistories to fetch.
     */
    orderBy?: ClientProjectHistoryOrderByWithRelationInput | ClientProjectHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientProjectHistories.
     */
    cursor?: ClientProjectHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientProjectHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientProjectHistories.
     */
    skip?: number
    distinct?: ClientProjectHistoryScalarFieldEnum | ClientProjectHistoryScalarFieldEnum[]
  }

  /**
   * ClientProjectHistory create
   */
  export type ClientProjectHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ClientProjectHistory.
     */
    data: XOR<ClientProjectHistoryCreateInput, ClientProjectHistoryUncheckedCreateInput>
  }

  /**
   * ClientProjectHistory createMany
   */
  export type ClientProjectHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClientProjectHistories.
     */
    data: ClientProjectHistoryCreateManyInput | ClientProjectHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClientProjectHistory createManyAndReturn
   */
  export type ClientProjectHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many ClientProjectHistories.
     */
    data: ClientProjectHistoryCreateManyInput | ClientProjectHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClientProjectHistory update
   */
  export type ClientProjectHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ClientProjectHistory.
     */
    data: XOR<ClientProjectHistoryUpdateInput, ClientProjectHistoryUncheckedUpdateInput>
    /**
     * Choose, which ClientProjectHistory to update.
     */
    where: ClientProjectHistoryWhereUniqueInput
  }

  /**
   * ClientProjectHistory updateMany
   */
  export type ClientProjectHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClientProjectHistories.
     */
    data: XOR<ClientProjectHistoryUpdateManyMutationInput, ClientProjectHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ClientProjectHistories to update
     */
    where?: ClientProjectHistoryWhereInput
    /**
     * Limit how many ClientProjectHistories to update.
     */
    limit?: number
  }

  /**
   * ClientProjectHistory updateManyAndReturn
   */
  export type ClientProjectHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * The data used to update ClientProjectHistories.
     */
    data: XOR<ClientProjectHistoryUpdateManyMutationInput, ClientProjectHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ClientProjectHistories to update
     */
    where?: ClientProjectHistoryWhereInput
    /**
     * Limit how many ClientProjectHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClientProjectHistory upsert
   */
  export type ClientProjectHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ClientProjectHistory to update in case it exists.
     */
    where: ClientProjectHistoryWhereUniqueInput
    /**
     * In case the ClientProjectHistory found by the `where` argument doesn't exist, create a new ClientProjectHistory with this data.
     */
    create: XOR<ClientProjectHistoryCreateInput, ClientProjectHistoryUncheckedCreateInput>
    /**
     * In case the ClientProjectHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientProjectHistoryUpdateInput, ClientProjectHistoryUncheckedUpdateInput>
  }

  /**
   * ClientProjectHistory delete
   */
  export type ClientProjectHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
    /**
     * Filter which ClientProjectHistory to delete.
     */
    where: ClientProjectHistoryWhereUniqueInput
  }

  /**
   * ClientProjectHistory deleteMany
   */
  export type ClientProjectHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientProjectHistories to delete
     */
    where?: ClientProjectHistoryWhereInput
    /**
     * Limit how many ClientProjectHistories to delete.
     */
    limit?: number
  }

  /**
   * ClientProjectHistory without action
   */
  export type ClientProjectHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientProjectHistory
     */
    select?: ClientProjectHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClientProjectHistory
     */
    omit?: ClientProjectHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClientProjectHistoryInclude<ExtArgs> | null
  }


  /**
   * Model AiChatThread
   */

  export type AggregateAiChatThread = {
    _count: AiChatThreadCountAggregateOutputType | null
    _min: AiChatThreadMinAggregateOutputType | null
    _max: AiChatThreadMaxAggregateOutputType | null
  }

  export type AiChatThreadMinAggregateOutputType = {
    id: string | null
    sessionKey: string | null
    isEscalated: boolean | null
    createdAt: Date | null
  }

  export type AiChatThreadMaxAggregateOutputType = {
    id: string | null
    sessionKey: string | null
    isEscalated: boolean | null
    createdAt: Date | null
  }

  export type AiChatThreadCountAggregateOutputType = {
    id: number
    sessionKey: number
    isEscalated: number
    createdAt: number
    _all: number
  }


  export type AiChatThreadMinAggregateInputType = {
    id?: true
    sessionKey?: true
    isEscalated?: true
    createdAt?: true
  }

  export type AiChatThreadMaxAggregateInputType = {
    id?: true
    sessionKey?: true
    isEscalated?: true
    createdAt?: true
  }

  export type AiChatThreadCountAggregateInputType = {
    id?: true
    sessionKey?: true
    isEscalated?: true
    createdAt?: true
    _all?: true
  }

  export type AiChatThreadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatThread to aggregate.
     */
    where?: AiChatThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatThreads to fetch.
     */
    orderBy?: AiChatThreadOrderByWithRelationInput | AiChatThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AiChatThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AiChatThreads
    **/
    _count?: true | AiChatThreadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AiChatThreadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AiChatThreadMaxAggregateInputType
  }

  export type GetAiChatThreadAggregateType<T extends AiChatThreadAggregateArgs> = {
        [P in keyof T & keyof AggregateAiChatThread]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAiChatThread[P]>
      : GetScalarType<T[P], AggregateAiChatThread[P]>
  }




  export type AiChatThreadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatThreadWhereInput
    orderBy?: AiChatThreadOrderByWithAggregationInput | AiChatThreadOrderByWithAggregationInput[]
    by: AiChatThreadScalarFieldEnum[] | AiChatThreadScalarFieldEnum
    having?: AiChatThreadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AiChatThreadCountAggregateInputType | true
    _min?: AiChatThreadMinAggregateInputType
    _max?: AiChatThreadMaxAggregateInputType
  }

  export type AiChatThreadGroupByOutputType = {
    id: string
    sessionKey: string
    isEscalated: boolean
    createdAt: Date
    _count: AiChatThreadCountAggregateOutputType | null
    _min: AiChatThreadMinAggregateOutputType | null
    _max: AiChatThreadMaxAggregateOutputType | null
  }

  type GetAiChatThreadGroupByPayload<T extends AiChatThreadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AiChatThreadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AiChatThreadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AiChatThreadGroupByOutputType[P]>
            : GetScalarType<T[P], AiChatThreadGroupByOutputType[P]>
        }
      >
    >


  export type AiChatThreadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionKey?: boolean
    isEscalated?: boolean
    createdAt?: boolean
    messages?: boolean | AiChatThread$messagesArgs<ExtArgs>
    escalation?: boolean | AiChatThread$escalationArgs<ExtArgs>
    _count?: boolean | AiChatThreadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatThread"]>

  export type AiChatThreadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionKey?: boolean
    isEscalated?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["aiChatThread"]>

  export type AiChatThreadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionKey?: boolean
    isEscalated?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["aiChatThread"]>

  export type AiChatThreadSelectScalar = {
    id?: boolean
    sessionKey?: boolean
    isEscalated?: boolean
    createdAt?: boolean
  }

  export type AiChatThreadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionKey" | "isEscalated" | "createdAt", ExtArgs["result"]["aiChatThread"]>
  export type AiChatThreadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | AiChatThread$messagesArgs<ExtArgs>
    escalation?: boolean | AiChatThread$escalationArgs<ExtArgs>
    _count?: boolean | AiChatThreadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AiChatThreadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AiChatThreadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AiChatThreadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AiChatThread"
    objects: {
      messages: Prisma.$AiChatMessagePayload<ExtArgs>[]
      escalation: Prisma.$AiChatEscalationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionKey: string
      isEscalated: boolean
      createdAt: Date
    }, ExtArgs["result"]["aiChatThread"]>
    composites: {}
  }

  type AiChatThreadGetPayload<S extends boolean | null | undefined | AiChatThreadDefaultArgs> = $Result.GetResult<Prisma.$AiChatThreadPayload, S>

  type AiChatThreadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AiChatThreadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AiChatThreadCountAggregateInputType | true
    }

  export interface AiChatThreadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AiChatThread'], meta: { name: 'AiChatThread' } }
    /**
     * Find zero or one AiChatThread that matches the filter.
     * @param {AiChatThreadFindUniqueArgs} args - Arguments to find a AiChatThread
     * @example
     * // Get one AiChatThread
     * const aiChatThread = await prisma.aiChatThread.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AiChatThreadFindUniqueArgs>(args: SelectSubset<T, AiChatThreadFindUniqueArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AiChatThread that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AiChatThreadFindUniqueOrThrowArgs} args - Arguments to find a AiChatThread
     * @example
     * // Get one AiChatThread
     * const aiChatThread = await prisma.aiChatThread.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AiChatThreadFindUniqueOrThrowArgs>(args: SelectSubset<T, AiChatThreadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatThread that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatThreadFindFirstArgs} args - Arguments to find a AiChatThread
     * @example
     * // Get one AiChatThread
     * const aiChatThread = await prisma.aiChatThread.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AiChatThreadFindFirstArgs>(args?: SelectSubset<T, AiChatThreadFindFirstArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatThread that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatThreadFindFirstOrThrowArgs} args - Arguments to find a AiChatThread
     * @example
     * // Get one AiChatThread
     * const aiChatThread = await prisma.aiChatThread.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AiChatThreadFindFirstOrThrowArgs>(args?: SelectSubset<T, AiChatThreadFindFirstOrThrowArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AiChatThreads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatThreadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AiChatThreads
     * const aiChatThreads = await prisma.aiChatThread.findMany()
     * 
     * // Get first 10 AiChatThreads
     * const aiChatThreads = await prisma.aiChatThread.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aiChatThreadWithIdOnly = await prisma.aiChatThread.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AiChatThreadFindManyArgs>(args?: SelectSubset<T, AiChatThreadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AiChatThread.
     * @param {AiChatThreadCreateArgs} args - Arguments to create a AiChatThread.
     * @example
     * // Create one AiChatThread
     * const AiChatThread = await prisma.aiChatThread.create({
     *   data: {
     *     // ... data to create a AiChatThread
     *   }
     * })
     * 
     */
    create<T extends AiChatThreadCreateArgs>(args: SelectSubset<T, AiChatThreadCreateArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AiChatThreads.
     * @param {AiChatThreadCreateManyArgs} args - Arguments to create many AiChatThreads.
     * @example
     * // Create many AiChatThreads
     * const aiChatThread = await prisma.aiChatThread.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AiChatThreadCreateManyArgs>(args?: SelectSubset<T, AiChatThreadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AiChatThreads and returns the data saved in the database.
     * @param {AiChatThreadCreateManyAndReturnArgs} args - Arguments to create many AiChatThreads.
     * @example
     * // Create many AiChatThreads
     * const aiChatThread = await prisma.aiChatThread.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AiChatThreads and only return the `id`
     * const aiChatThreadWithIdOnly = await prisma.aiChatThread.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AiChatThreadCreateManyAndReturnArgs>(args?: SelectSubset<T, AiChatThreadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AiChatThread.
     * @param {AiChatThreadDeleteArgs} args - Arguments to delete one AiChatThread.
     * @example
     * // Delete one AiChatThread
     * const AiChatThread = await prisma.aiChatThread.delete({
     *   where: {
     *     // ... filter to delete one AiChatThread
     *   }
     * })
     * 
     */
    delete<T extends AiChatThreadDeleteArgs>(args: SelectSubset<T, AiChatThreadDeleteArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AiChatThread.
     * @param {AiChatThreadUpdateArgs} args - Arguments to update one AiChatThread.
     * @example
     * // Update one AiChatThread
     * const aiChatThread = await prisma.aiChatThread.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AiChatThreadUpdateArgs>(args: SelectSubset<T, AiChatThreadUpdateArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AiChatThreads.
     * @param {AiChatThreadDeleteManyArgs} args - Arguments to filter AiChatThreads to delete.
     * @example
     * // Delete a few AiChatThreads
     * const { count } = await prisma.aiChatThread.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AiChatThreadDeleteManyArgs>(args?: SelectSubset<T, AiChatThreadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatThreadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AiChatThreads
     * const aiChatThread = await prisma.aiChatThread.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AiChatThreadUpdateManyArgs>(args: SelectSubset<T, AiChatThreadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatThreads and returns the data updated in the database.
     * @param {AiChatThreadUpdateManyAndReturnArgs} args - Arguments to update many AiChatThreads.
     * @example
     * // Update many AiChatThreads
     * const aiChatThread = await prisma.aiChatThread.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AiChatThreads and only return the `id`
     * const aiChatThreadWithIdOnly = await prisma.aiChatThread.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AiChatThreadUpdateManyAndReturnArgs>(args: SelectSubset<T, AiChatThreadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AiChatThread.
     * @param {AiChatThreadUpsertArgs} args - Arguments to update or create a AiChatThread.
     * @example
     * // Update or create a AiChatThread
     * const aiChatThread = await prisma.aiChatThread.upsert({
     *   create: {
     *     // ... data to create a AiChatThread
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AiChatThread we want to update
     *   }
     * })
     */
    upsert<T extends AiChatThreadUpsertArgs>(args: SelectSubset<T, AiChatThreadUpsertArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AiChatThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatThreadCountArgs} args - Arguments to filter AiChatThreads to count.
     * @example
     * // Count the number of AiChatThreads
     * const count = await prisma.aiChatThread.count({
     *   where: {
     *     // ... the filter for the AiChatThreads we want to count
     *   }
     * })
    **/
    count<T extends AiChatThreadCountArgs>(
      args?: Subset<T, AiChatThreadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AiChatThreadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AiChatThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatThreadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AiChatThreadAggregateArgs>(args: Subset<T, AiChatThreadAggregateArgs>): Prisma.PrismaPromise<GetAiChatThreadAggregateType<T>>

    /**
     * Group by AiChatThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatThreadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AiChatThreadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AiChatThreadGroupByArgs['orderBy'] }
        : { orderBy?: AiChatThreadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AiChatThreadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAiChatThreadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AiChatThread model
   */
  readonly fields: AiChatThreadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AiChatThread.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AiChatThreadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends AiChatThread$messagesArgs<ExtArgs> = {}>(args?: Subset<T, AiChatThread$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    escalation<T extends AiChatThread$escalationArgs<ExtArgs> = {}>(args?: Subset<T, AiChatThread$escalationArgs<ExtArgs>>): Prisma__AiChatEscalationClient<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AiChatThread model
   */
  interface AiChatThreadFieldRefs {
    readonly id: FieldRef<"AiChatThread", 'String'>
    readonly sessionKey: FieldRef<"AiChatThread", 'String'>
    readonly isEscalated: FieldRef<"AiChatThread", 'Boolean'>
    readonly createdAt: FieldRef<"AiChatThread", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AiChatThread findUnique
   */
  export type AiChatThreadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
    /**
     * Filter, which AiChatThread to fetch.
     */
    where: AiChatThreadWhereUniqueInput
  }

  /**
   * AiChatThread findUniqueOrThrow
   */
  export type AiChatThreadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
    /**
     * Filter, which AiChatThread to fetch.
     */
    where: AiChatThreadWhereUniqueInput
  }

  /**
   * AiChatThread findFirst
   */
  export type AiChatThreadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
    /**
     * Filter, which AiChatThread to fetch.
     */
    where?: AiChatThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatThreads to fetch.
     */
    orderBy?: AiChatThreadOrderByWithRelationInput | AiChatThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatThreads.
     */
    cursor?: AiChatThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatThreads.
     */
    distinct?: AiChatThreadScalarFieldEnum | AiChatThreadScalarFieldEnum[]
  }

  /**
   * AiChatThread findFirstOrThrow
   */
  export type AiChatThreadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
    /**
     * Filter, which AiChatThread to fetch.
     */
    where?: AiChatThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatThreads to fetch.
     */
    orderBy?: AiChatThreadOrderByWithRelationInput | AiChatThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatThreads.
     */
    cursor?: AiChatThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatThreads.
     */
    distinct?: AiChatThreadScalarFieldEnum | AiChatThreadScalarFieldEnum[]
  }

  /**
   * AiChatThread findMany
   */
  export type AiChatThreadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
    /**
     * Filter, which AiChatThreads to fetch.
     */
    where?: AiChatThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatThreads to fetch.
     */
    orderBy?: AiChatThreadOrderByWithRelationInput | AiChatThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AiChatThreads.
     */
    cursor?: AiChatThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatThreads.
     */
    skip?: number
    distinct?: AiChatThreadScalarFieldEnum | AiChatThreadScalarFieldEnum[]
  }

  /**
   * AiChatThread create
   */
  export type AiChatThreadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
    /**
     * The data needed to create a AiChatThread.
     */
    data: XOR<AiChatThreadCreateInput, AiChatThreadUncheckedCreateInput>
  }

  /**
   * AiChatThread createMany
   */
  export type AiChatThreadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AiChatThreads.
     */
    data: AiChatThreadCreateManyInput | AiChatThreadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AiChatThread createManyAndReturn
   */
  export type AiChatThreadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * The data used to create many AiChatThreads.
     */
    data: AiChatThreadCreateManyInput | AiChatThreadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AiChatThread update
   */
  export type AiChatThreadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
    /**
     * The data needed to update a AiChatThread.
     */
    data: XOR<AiChatThreadUpdateInput, AiChatThreadUncheckedUpdateInput>
    /**
     * Choose, which AiChatThread to update.
     */
    where: AiChatThreadWhereUniqueInput
  }

  /**
   * AiChatThread updateMany
   */
  export type AiChatThreadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AiChatThreads.
     */
    data: XOR<AiChatThreadUpdateManyMutationInput, AiChatThreadUncheckedUpdateManyInput>
    /**
     * Filter which AiChatThreads to update
     */
    where?: AiChatThreadWhereInput
    /**
     * Limit how many AiChatThreads to update.
     */
    limit?: number
  }

  /**
   * AiChatThread updateManyAndReturn
   */
  export type AiChatThreadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * The data used to update AiChatThreads.
     */
    data: XOR<AiChatThreadUpdateManyMutationInput, AiChatThreadUncheckedUpdateManyInput>
    /**
     * Filter which AiChatThreads to update
     */
    where?: AiChatThreadWhereInput
    /**
     * Limit how many AiChatThreads to update.
     */
    limit?: number
  }

  /**
   * AiChatThread upsert
   */
  export type AiChatThreadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
    /**
     * The filter to search for the AiChatThread to update in case it exists.
     */
    where: AiChatThreadWhereUniqueInput
    /**
     * In case the AiChatThread found by the `where` argument doesn't exist, create a new AiChatThread with this data.
     */
    create: XOR<AiChatThreadCreateInput, AiChatThreadUncheckedCreateInput>
    /**
     * In case the AiChatThread was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AiChatThreadUpdateInput, AiChatThreadUncheckedUpdateInput>
  }

  /**
   * AiChatThread delete
   */
  export type AiChatThreadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
    /**
     * Filter which AiChatThread to delete.
     */
    where: AiChatThreadWhereUniqueInput
  }

  /**
   * AiChatThread deleteMany
   */
  export type AiChatThreadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatThreads to delete
     */
    where?: AiChatThreadWhereInput
    /**
     * Limit how many AiChatThreads to delete.
     */
    limit?: number
  }

  /**
   * AiChatThread.messages
   */
  export type AiChatThread$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    where?: AiChatMessageWhereInput
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    cursor?: AiChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AiChatMessageScalarFieldEnum | AiChatMessageScalarFieldEnum[]
  }

  /**
   * AiChatThread.escalation
   */
  export type AiChatThread$escalationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    where?: AiChatEscalationWhereInput
  }

  /**
   * AiChatThread without action
   */
  export type AiChatThreadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatThread
     */
    select?: AiChatThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatThread
     */
    omit?: AiChatThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatThreadInclude<ExtArgs> | null
  }


  /**
   * Model AiChatMessage
   */

  export type AggregateAiChatMessage = {
    _count: AiChatMessageCountAggregateOutputType | null
    _min: AiChatMessageMinAggregateOutputType | null
    _max: AiChatMessageMaxAggregateOutputType | null
  }

  export type AiChatMessageMinAggregateOutputType = {
    id: string | null
    threadId: string | null
    sender: string | null
    content: string | null
    createdAt: Date | null
  }

  export type AiChatMessageMaxAggregateOutputType = {
    id: string | null
    threadId: string | null
    sender: string | null
    content: string | null
    createdAt: Date | null
  }

  export type AiChatMessageCountAggregateOutputType = {
    id: number
    threadId: number
    sender: number
    content: number
    createdAt: number
    _all: number
  }


  export type AiChatMessageMinAggregateInputType = {
    id?: true
    threadId?: true
    sender?: true
    content?: true
    createdAt?: true
  }

  export type AiChatMessageMaxAggregateInputType = {
    id?: true
    threadId?: true
    sender?: true
    content?: true
    createdAt?: true
  }

  export type AiChatMessageCountAggregateInputType = {
    id?: true
    threadId?: true
    sender?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type AiChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatMessage to aggregate.
     */
    where?: AiChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatMessages to fetch.
     */
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AiChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AiChatMessages
    **/
    _count?: true | AiChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AiChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AiChatMessageMaxAggregateInputType
  }

  export type GetAiChatMessageAggregateType<T extends AiChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateAiChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAiChatMessage[P]>
      : GetScalarType<T[P], AggregateAiChatMessage[P]>
  }




  export type AiChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatMessageWhereInput
    orderBy?: AiChatMessageOrderByWithAggregationInput | AiChatMessageOrderByWithAggregationInput[]
    by: AiChatMessageScalarFieldEnum[] | AiChatMessageScalarFieldEnum
    having?: AiChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AiChatMessageCountAggregateInputType | true
    _min?: AiChatMessageMinAggregateInputType
    _max?: AiChatMessageMaxAggregateInputType
  }

  export type AiChatMessageGroupByOutputType = {
    id: string
    threadId: string
    sender: string
    content: string
    createdAt: Date
    _count: AiChatMessageCountAggregateOutputType | null
    _min: AiChatMessageMinAggregateOutputType | null
    _max: AiChatMessageMaxAggregateOutputType | null
  }

  type GetAiChatMessageGroupByPayload<T extends AiChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AiChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AiChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AiChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], AiChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type AiChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    sender?: boolean
    content?: boolean
    createdAt?: boolean
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatMessage"]>

  export type AiChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    sender?: boolean
    content?: boolean
    createdAt?: boolean
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatMessage"]>

  export type AiChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    sender?: boolean
    content?: boolean
    createdAt?: boolean
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatMessage"]>

  export type AiChatMessageSelectScalar = {
    id?: boolean
    threadId?: boolean
    sender?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type AiChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "threadId" | "sender" | "content" | "createdAt", ExtArgs["result"]["aiChatMessage"]>
  export type AiChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }
  export type AiChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }
  export type AiChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }

  export type $AiChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AiChatMessage"
    objects: {
      thread: Prisma.$AiChatThreadPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      threadId: string
      sender: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["aiChatMessage"]>
    composites: {}
  }

  type AiChatMessageGetPayload<S extends boolean | null | undefined | AiChatMessageDefaultArgs> = $Result.GetResult<Prisma.$AiChatMessagePayload, S>

  type AiChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AiChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AiChatMessageCountAggregateInputType | true
    }

  export interface AiChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AiChatMessage'], meta: { name: 'AiChatMessage' } }
    /**
     * Find zero or one AiChatMessage that matches the filter.
     * @param {AiChatMessageFindUniqueArgs} args - Arguments to find a AiChatMessage
     * @example
     * // Get one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AiChatMessageFindUniqueArgs>(args: SelectSubset<T, AiChatMessageFindUniqueArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AiChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AiChatMessageFindUniqueOrThrowArgs} args - Arguments to find a AiChatMessage
     * @example
     * // Get one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AiChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, AiChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageFindFirstArgs} args - Arguments to find a AiChatMessage
     * @example
     * // Get one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AiChatMessageFindFirstArgs>(args?: SelectSubset<T, AiChatMessageFindFirstArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageFindFirstOrThrowArgs} args - Arguments to find a AiChatMessage
     * @example
     * // Get one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AiChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, AiChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AiChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AiChatMessages
     * const aiChatMessages = await prisma.aiChatMessage.findMany()
     * 
     * // Get first 10 AiChatMessages
     * const aiChatMessages = await prisma.aiChatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aiChatMessageWithIdOnly = await prisma.aiChatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AiChatMessageFindManyArgs>(args?: SelectSubset<T, AiChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AiChatMessage.
     * @param {AiChatMessageCreateArgs} args - Arguments to create a AiChatMessage.
     * @example
     * // Create one AiChatMessage
     * const AiChatMessage = await prisma.aiChatMessage.create({
     *   data: {
     *     // ... data to create a AiChatMessage
     *   }
     * })
     * 
     */
    create<T extends AiChatMessageCreateArgs>(args: SelectSubset<T, AiChatMessageCreateArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AiChatMessages.
     * @param {AiChatMessageCreateManyArgs} args - Arguments to create many AiChatMessages.
     * @example
     * // Create many AiChatMessages
     * const aiChatMessage = await prisma.aiChatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AiChatMessageCreateManyArgs>(args?: SelectSubset<T, AiChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AiChatMessages and returns the data saved in the database.
     * @param {AiChatMessageCreateManyAndReturnArgs} args - Arguments to create many AiChatMessages.
     * @example
     * // Create many AiChatMessages
     * const aiChatMessage = await prisma.aiChatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AiChatMessages and only return the `id`
     * const aiChatMessageWithIdOnly = await prisma.aiChatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AiChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, AiChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AiChatMessage.
     * @param {AiChatMessageDeleteArgs} args - Arguments to delete one AiChatMessage.
     * @example
     * // Delete one AiChatMessage
     * const AiChatMessage = await prisma.aiChatMessage.delete({
     *   where: {
     *     // ... filter to delete one AiChatMessage
     *   }
     * })
     * 
     */
    delete<T extends AiChatMessageDeleteArgs>(args: SelectSubset<T, AiChatMessageDeleteArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AiChatMessage.
     * @param {AiChatMessageUpdateArgs} args - Arguments to update one AiChatMessage.
     * @example
     * // Update one AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AiChatMessageUpdateArgs>(args: SelectSubset<T, AiChatMessageUpdateArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AiChatMessages.
     * @param {AiChatMessageDeleteManyArgs} args - Arguments to filter AiChatMessages to delete.
     * @example
     * // Delete a few AiChatMessages
     * const { count } = await prisma.aiChatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AiChatMessageDeleteManyArgs>(args?: SelectSubset<T, AiChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AiChatMessages
     * const aiChatMessage = await prisma.aiChatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AiChatMessageUpdateManyArgs>(args: SelectSubset<T, AiChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatMessages and returns the data updated in the database.
     * @param {AiChatMessageUpdateManyAndReturnArgs} args - Arguments to update many AiChatMessages.
     * @example
     * // Update many AiChatMessages
     * const aiChatMessage = await prisma.aiChatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AiChatMessages and only return the `id`
     * const aiChatMessageWithIdOnly = await prisma.aiChatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AiChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, AiChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AiChatMessage.
     * @param {AiChatMessageUpsertArgs} args - Arguments to update or create a AiChatMessage.
     * @example
     * // Update or create a AiChatMessage
     * const aiChatMessage = await prisma.aiChatMessage.upsert({
     *   create: {
     *     // ... data to create a AiChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AiChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends AiChatMessageUpsertArgs>(args: SelectSubset<T, AiChatMessageUpsertArgs<ExtArgs>>): Prisma__AiChatMessageClient<$Result.GetResult<Prisma.$AiChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AiChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageCountArgs} args - Arguments to filter AiChatMessages to count.
     * @example
     * // Count the number of AiChatMessages
     * const count = await prisma.aiChatMessage.count({
     *   where: {
     *     // ... the filter for the AiChatMessages we want to count
     *   }
     * })
    **/
    count<T extends AiChatMessageCountArgs>(
      args?: Subset<T, AiChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AiChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AiChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AiChatMessageAggregateArgs>(args: Subset<T, AiChatMessageAggregateArgs>): Prisma.PrismaPromise<GetAiChatMessageAggregateType<T>>

    /**
     * Group by AiChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AiChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AiChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: AiChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AiChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAiChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AiChatMessage model
   */
  readonly fields: AiChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AiChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AiChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    thread<T extends AiChatThreadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AiChatThreadDefaultArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AiChatMessage model
   */
  interface AiChatMessageFieldRefs {
    readonly id: FieldRef<"AiChatMessage", 'String'>
    readonly threadId: FieldRef<"AiChatMessage", 'String'>
    readonly sender: FieldRef<"AiChatMessage", 'String'>
    readonly content: FieldRef<"AiChatMessage", 'String'>
    readonly createdAt: FieldRef<"AiChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AiChatMessage findUnique
   */
  export type AiChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessage to fetch.
     */
    where: AiChatMessageWhereUniqueInput
  }

  /**
   * AiChatMessage findUniqueOrThrow
   */
  export type AiChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessage to fetch.
     */
    where: AiChatMessageWhereUniqueInput
  }

  /**
   * AiChatMessage findFirst
   */
  export type AiChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessage to fetch.
     */
    where?: AiChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatMessages to fetch.
     */
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatMessages.
     */
    cursor?: AiChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatMessages.
     */
    distinct?: AiChatMessageScalarFieldEnum | AiChatMessageScalarFieldEnum[]
  }

  /**
   * AiChatMessage findFirstOrThrow
   */
  export type AiChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessage to fetch.
     */
    where?: AiChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatMessages to fetch.
     */
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatMessages.
     */
    cursor?: AiChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatMessages.
     */
    distinct?: AiChatMessageScalarFieldEnum | AiChatMessageScalarFieldEnum[]
  }

  /**
   * AiChatMessage findMany
   */
  export type AiChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which AiChatMessages to fetch.
     */
    where?: AiChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatMessages to fetch.
     */
    orderBy?: AiChatMessageOrderByWithRelationInput | AiChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AiChatMessages.
     */
    cursor?: AiChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatMessages.
     */
    skip?: number
    distinct?: AiChatMessageScalarFieldEnum | AiChatMessageScalarFieldEnum[]
  }

  /**
   * AiChatMessage create
   */
  export type AiChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a AiChatMessage.
     */
    data: XOR<AiChatMessageCreateInput, AiChatMessageUncheckedCreateInput>
  }

  /**
   * AiChatMessage createMany
   */
  export type AiChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AiChatMessages.
     */
    data: AiChatMessageCreateManyInput | AiChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AiChatMessage createManyAndReturn
   */
  export type AiChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many AiChatMessages.
     */
    data: AiChatMessageCreateManyInput | AiChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiChatMessage update
   */
  export type AiChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a AiChatMessage.
     */
    data: XOR<AiChatMessageUpdateInput, AiChatMessageUncheckedUpdateInput>
    /**
     * Choose, which AiChatMessage to update.
     */
    where: AiChatMessageWhereUniqueInput
  }

  /**
   * AiChatMessage updateMany
   */
  export type AiChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AiChatMessages.
     */
    data: XOR<AiChatMessageUpdateManyMutationInput, AiChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which AiChatMessages to update
     */
    where?: AiChatMessageWhereInput
    /**
     * Limit how many AiChatMessages to update.
     */
    limit?: number
  }

  /**
   * AiChatMessage updateManyAndReturn
   */
  export type AiChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update AiChatMessages.
     */
    data: XOR<AiChatMessageUpdateManyMutationInput, AiChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which AiChatMessages to update
     */
    where?: AiChatMessageWhereInput
    /**
     * Limit how many AiChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiChatMessage upsert
   */
  export type AiChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the AiChatMessage to update in case it exists.
     */
    where: AiChatMessageWhereUniqueInput
    /**
     * In case the AiChatMessage found by the `where` argument doesn't exist, create a new AiChatMessage with this data.
     */
    create: XOR<AiChatMessageCreateInput, AiChatMessageUncheckedCreateInput>
    /**
     * In case the AiChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AiChatMessageUpdateInput, AiChatMessageUncheckedUpdateInput>
  }

  /**
   * AiChatMessage delete
   */
  export type AiChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
    /**
     * Filter which AiChatMessage to delete.
     */
    where: AiChatMessageWhereUniqueInput
  }

  /**
   * AiChatMessage deleteMany
   */
  export type AiChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatMessages to delete
     */
    where?: AiChatMessageWhereInput
    /**
     * Limit how many AiChatMessages to delete.
     */
    limit?: number
  }

  /**
   * AiChatMessage without action
   */
  export type AiChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatMessage
     */
    select?: AiChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatMessage
     */
    omit?: AiChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model AiChatEscalation
   */

  export type AggregateAiChatEscalation = {
    _count: AiChatEscalationCountAggregateOutputType | null
    _avg: AiChatEscalationAvgAggregateOutputType | null
    _sum: AiChatEscalationSumAggregateOutputType | null
    _min: AiChatEscalationMinAggregateOutputType | null
    _max: AiChatEscalationMaxAggregateOutputType | null
  }

  export type AiChatEscalationAvgAggregateOutputType = {
    id: number | null
  }

  export type AiChatEscalationSumAggregateOutputType = {
    id: number | null
  }

  export type AiChatEscalationMinAggregateOutputType = {
    id: number | null
    sessionKey: string | null
    name: string | null
    email: string | null
    message: string | null
    createdAt: Date | null
  }

  export type AiChatEscalationMaxAggregateOutputType = {
    id: number | null
    sessionKey: string | null
    name: string | null
    email: string | null
    message: string | null
    createdAt: Date | null
  }

  export type AiChatEscalationCountAggregateOutputType = {
    id: number
    sessionKey: number
    name: number
    email: number
    message: number
    createdAt: number
    _all: number
  }


  export type AiChatEscalationAvgAggregateInputType = {
    id?: true
  }

  export type AiChatEscalationSumAggregateInputType = {
    id?: true
  }

  export type AiChatEscalationMinAggregateInputType = {
    id?: true
    sessionKey?: true
    name?: true
    email?: true
    message?: true
    createdAt?: true
  }

  export type AiChatEscalationMaxAggregateInputType = {
    id?: true
    sessionKey?: true
    name?: true
    email?: true
    message?: true
    createdAt?: true
  }

  export type AiChatEscalationCountAggregateInputType = {
    id?: true
    sessionKey?: true
    name?: true
    email?: true
    message?: true
    createdAt?: true
    _all?: true
  }

  export type AiChatEscalationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatEscalation to aggregate.
     */
    where?: AiChatEscalationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatEscalations to fetch.
     */
    orderBy?: AiChatEscalationOrderByWithRelationInput | AiChatEscalationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AiChatEscalationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatEscalations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatEscalations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AiChatEscalations
    **/
    _count?: true | AiChatEscalationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AiChatEscalationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AiChatEscalationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AiChatEscalationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AiChatEscalationMaxAggregateInputType
  }

  export type GetAiChatEscalationAggregateType<T extends AiChatEscalationAggregateArgs> = {
        [P in keyof T & keyof AggregateAiChatEscalation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAiChatEscalation[P]>
      : GetScalarType<T[P], AggregateAiChatEscalation[P]>
  }




  export type AiChatEscalationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiChatEscalationWhereInput
    orderBy?: AiChatEscalationOrderByWithAggregationInput | AiChatEscalationOrderByWithAggregationInput[]
    by: AiChatEscalationScalarFieldEnum[] | AiChatEscalationScalarFieldEnum
    having?: AiChatEscalationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AiChatEscalationCountAggregateInputType | true
    _avg?: AiChatEscalationAvgAggregateInputType
    _sum?: AiChatEscalationSumAggregateInputType
    _min?: AiChatEscalationMinAggregateInputType
    _max?: AiChatEscalationMaxAggregateInputType
  }

  export type AiChatEscalationGroupByOutputType = {
    id: number
    sessionKey: string
    name: string | null
    email: string
    message: string | null
    createdAt: Date
    _count: AiChatEscalationCountAggregateOutputType | null
    _avg: AiChatEscalationAvgAggregateOutputType | null
    _sum: AiChatEscalationSumAggregateOutputType | null
    _min: AiChatEscalationMinAggregateOutputType | null
    _max: AiChatEscalationMaxAggregateOutputType | null
  }

  type GetAiChatEscalationGroupByPayload<T extends AiChatEscalationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AiChatEscalationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AiChatEscalationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AiChatEscalationGroupByOutputType[P]>
            : GetScalarType<T[P], AiChatEscalationGroupByOutputType[P]>
        }
      >
    >


  export type AiChatEscalationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionKey?: boolean
    name?: boolean
    email?: boolean
    message?: boolean
    createdAt?: boolean
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatEscalation"]>

  export type AiChatEscalationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionKey?: boolean
    name?: boolean
    email?: boolean
    message?: boolean
    createdAt?: boolean
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatEscalation"]>

  export type AiChatEscalationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionKey?: boolean
    name?: boolean
    email?: boolean
    message?: boolean
    createdAt?: boolean
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiChatEscalation"]>

  export type AiChatEscalationSelectScalar = {
    id?: boolean
    sessionKey?: boolean
    name?: boolean
    email?: boolean
    message?: boolean
    createdAt?: boolean
  }

  export type AiChatEscalationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionKey" | "name" | "email" | "message" | "createdAt", ExtArgs["result"]["aiChatEscalation"]>
  export type AiChatEscalationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }
  export type AiChatEscalationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }
  export type AiChatEscalationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | AiChatThreadDefaultArgs<ExtArgs>
  }

  export type $AiChatEscalationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AiChatEscalation"
    objects: {
      thread: Prisma.$AiChatThreadPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionKey: string
      name: string | null
      email: string
      message: string | null
      createdAt: Date
    }, ExtArgs["result"]["aiChatEscalation"]>
    composites: {}
  }

  type AiChatEscalationGetPayload<S extends boolean | null | undefined | AiChatEscalationDefaultArgs> = $Result.GetResult<Prisma.$AiChatEscalationPayload, S>

  type AiChatEscalationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AiChatEscalationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AiChatEscalationCountAggregateInputType | true
    }

  export interface AiChatEscalationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AiChatEscalation'], meta: { name: 'AiChatEscalation' } }
    /**
     * Find zero or one AiChatEscalation that matches the filter.
     * @param {AiChatEscalationFindUniqueArgs} args - Arguments to find a AiChatEscalation
     * @example
     * // Get one AiChatEscalation
     * const aiChatEscalation = await prisma.aiChatEscalation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AiChatEscalationFindUniqueArgs>(args: SelectSubset<T, AiChatEscalationFindUniqueArgs<ExtArgs>>): Prisma__AiChatEscalationClient<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AiChatEscalation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AiChatEscalationFindUniqueOrThrowArgs} args - Arguments to find a AiChatEscalation
     * @example
     * // Get one AiChatEscalation
     * const aiChatEscalation = await prisma.aiChatEscalation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AiChatEscalationFindUniqueOrThrowArgs>(args: SelectSubset<T, AiChatEscalationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AiChatEscalationClient<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatEscalation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatEscalationFindFirstArgs} args - Arguments to find a AiChatEscalation
     * @example
     * // Get one AiChatEscalation
     * const aiChatEscalation = await prisma.aiChatEscalation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AiChatEscalationFindFirstArgs>(args?: SelectSubset<T, AiChatEscalationFindFirstArgs<ExtArgs>>): Prisma__AiChatEscalationClient<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiChatEscalation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatEscalationFindFirstOrThrowArgs} args - Arguments to find a AiChatEscalation
     * @example
     * // Get one AiChatEscalation
     * const aiChatEscalation = await prisma.aiChatEscalation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AiChatEscalationFindFirstOrThrowArgs>(args?: SelectSubset<T, AiChatEscalationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AiChatEscalationClient<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AiChatEscalations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatEscalationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AiChatEscalations
     * const aiChatEscalations = await prisma.aiChatEscalation.findMany()
     * 
     * // Get first 10 AiChatEscalations
     * const aiChatEscalations = await prisma.aiChatEscalation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aiChatEscalationWithIdOnly = await prisma.aiChatEscalation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AiChatEscalationFindManyArgs>(args?: SelectSubset<T, AiChatEscalationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AiChatEscalation.
     * @param {AiChatEscalationCreateArgs} args - Arguments to create a AiChatEscalation.
     * @example
     * // Create one AiChatEscalation
     * const AiChatEscalation = await prisma.aiChatEscalation.create({
     *   data: {
     *     // ... data to create a AiChatEscalation
     *   }
     * })
     * 
     */
    create<T extends AiChatEscalationCreateArgs>(args: SelectSubset<T, AiChatEscalationCreateArgs<ExtArgs>>): Prisma__AiChatEscalationClient<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AiChatEscalations.
     * @param {AiChatEscalationCreateManyArgs} args - Arguments to create many AiChatEscalations.
     * @example
     * // Create many AiChatEscalations
     * const aiChatEscalation = await prisma.aiChatEscalation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AiChatEscalationCreateManyArgs>(args?: SelectSubset<T, AiChatEscalationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AiChatEscalations and returns the data saved in the database.
     * @param {AiChatEscalationCreateManyAndReturnArgs} args - Arguments to create many AiChatEscalations.
     * @example
     * // Create many AiChatEscalations
     * const aiChatEscalation = await prisma.aiChatEscalation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AiChatEscalations and only return the `id`
     * const aiChatEscalationWithIdOnly = await prisma.aiChatEscalation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AiChatEscalationCreateManyAndReturnArgs>(args?: SelectSubset<T, AiChatEscalationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AiChatEscalation.
     * @param {AiChatEscalationDeleteArgs} args - Arguments to delete one AiChatEscalation.
     * @example
     * // Delete one AiChatEscalation
     * const AiChatEscalation = await prisma.aiChatEscalation.delete({
     *   where: {
     *     // ... filter to delete one AiChatEscalation
     *   }
     * })
     * 
     */
    delete<T extends AiChatEscalationDeleteArgs>(args: SelectSubset<T, AiChatEscalationDeleteArgs<ExtArgs>>): Prisma__AiChatEscalationClient<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AiChatEscalation.
     * @param {AiChatEscalationUpdateArgs} args - Arguments to update one AiChatEscalation.
     * @example
     * // Update one AiChatEscalation
     * const aiChatEscalation = await prisma.aiChatEscalation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AiChatEscalationUpdateArgs>(args: SelectSubset<T, AiChatEscalationUpdateArgs<ExtArgs>>): Prisma__AiChatEscalationClient<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AiChatEscalations.
     * @param {AiChatEscalationDeleteManyArgs} args - Arguments to filter AiChatEscalations to delete.
     * @example
     * // Delete a few AiChatEscalations
     * const { count } = await prisma.aiChatEscalation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AiChatEscalationDeleteManyArgs>(args?: SelectSubset<T, AiChatEscalationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatEscalations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatEscalationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AiChatEscalations
     * const aiChatEscalation = await prisma.aiChatEscalation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AiChatEscalationUpdateManyArgs>(args: SelectSubset<T, AiChatEscalationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiChatEscalations and returns the data updated in the database.
     * @param {AiChatEscalationUpdateManyAndReturnArgs} args - Arguments to update many AiChatEscalations.
     * @example
     * // Update many AiChatEscalations
     * const aiChatEscalation = await prisma.aiChatEscalation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AiChatEscalations and only return the `id`
     * const aiChatEscalationWithIdOnly = await prisma.aiChatEscalation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AiChatEscalationUpdateManyAndReturnArgs>(args: SelectSubset<T, AiChatEscalationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AiChatEscalation.
     * @param {AiChatEscalationUpsertArgs} args - Arguments to update or create a AiChatEscalation.
     * @example
     * // Update or create a AiChatEscalation
     * const aiChatEscalation = await prisma.aiChatEscalation.upsert({
     *   create: {
     *     // ... data to create a AiChatEscalation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AiChatEscalation we want to update
     *   }
     * })
     */
    upsert<T extends AiChatEscalationUpsertArgs>(args: SelectSubset<T, AiChatEscalationUpsertArgs<ExtArgs>>): Prisma__AiChatEscalationClient<$Result.GetResult<Prisma.$AiChatEscalationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AiChatEscalations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatEscalationCountArgs} args - Arguments to filter AiChatEscalations to count.
     * @example
     * // Count the number of AiChatEscalations
     * const count = await prisma.aiChatEscalation.count({
     *   where: {
     *     // ... the filter for the AiChatEscalations we want to count
     *   }
     * })
    **/
    count<T extends AiChatEscalationCountArgs>(
      args?: Subset<T, AiChatEscalationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AiChatEscalationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AiChatEscalation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatEscalationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AiChatEscalationAggregateArgs>(args: Subset<T, AiChatEscalationAggregateArgs>): Prisma.PrismaPromise<GetAiChatEscalationAggregateType<T>>

    /**
     * Group by AiChatEscalation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiChatEscalationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AiChatEscalationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AiChatEscalationGroupByArgs['orderBy'] }
        : { orderBy?: AiChatEscalationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AiChatEscalationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAiChatEscalationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AiChatEscalation model
   */
  readonly fields: AiChatEscalationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AiChatEscalation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AiChatEscalationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    thread<T extends AiChatThreadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AiChatThreadDefaultArgs<ExtArgs>>): Prisma__AiChatThreadClient<$Result.GetResult<Prisma.$AiChatThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AiChatEscalation model
   */
  interface AiChatEscalationFieldRefs {
    readonly id: FieldRef<"AiChatEscalation", 'Int'>
    readonly sessionKey: FieldRef<"AiChatEscalation", 'String'>
    readonly name: FieldRef<"AiChatEscalation", 'String'>
    readonly email: FieldRef<"AiChatEscalation", 'String'>
    readonly message: FieldRef<"AiChatEscalation", 'String'>
    readonly createdAt: FieldRef<"AiChatEscalation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AiChatEscalation findUnique
   */
  export type AiChatEscalationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatEscalation to fetch.
     */
    where: AiChatEscalationWhereUniqueInput
  }

  /**
   * AiChatEscalation findUniqueOrThrow
   */
  export type AiChatEscalationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatEscalation to fetch.
     */
    where: AiChatEscalationWhereUniqueInput
  }

  /**
   * AiChatEscalation findFirst
   */
  export type AiChatEscalationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatEscalation to fetch.
     */
    where?: AiChatEscalationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatEscalations to fetch.
     */
    orderBy?: AiChatEscalationOrderByWithRelationInput | AiChatEscalationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatEscalations.
     */
    cursor?: AiChatEscalationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatEscalations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatEscalations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatEscalations.
     */
    distinct?: AiChatEscalationScalarFieldEnum | AiChatEscalationScalarFieldEnum[]
  }

  /**
   * AiChatEscalation findFirstOrThrow
   */
  export type AiChatEscalationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatEscalation to fetch.
     */
    where?: AiChatEscalationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatEscalations to fetch.
     */
    orderBy?: AiChatEscalationOrderByWithRelationInput | AiChatEscalationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiChatEscalations.
     */
    cursor?: AiChatEscalationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatEscalations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatEscalations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiChatEscalations.
     */
    distinct?: AiChatEscalationScalarFieldEnum | AiChatEscalationScalarFieldEnum[]
  }

  /**
   * AiChatEscalation findMany
   */
  export type AiChatEscalationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    /**
     * Filter, which AiChatEscalations to fetch.
     */
    where?: AiChatEscalationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiChatEscalations to fetch.
     */
    orderBy?: AiChatEscalationOrderByWithRelationInput | AiChatEscalationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AiChatEscalations.
     */
    cursor?: AiChatEscalationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiChatEscalations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiChatEscalations.
     */
    skip?: number
    distinct?: AiChatEscalationScalarFieldEnum | AiChatEscalationScalarFieldEnum[]
  }

  /**
   * AiChatEscalation create
   */
  export type AiChatEscalationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    /**
     * The data needed to create a AiChatEscalation.
     */
    data: XOR<AiChatEscalationCreateInput, AiChatEscalationUncheckedCreateInput>
  }

  /**
   * AiChatEscalation createMany
   */
  export type AiChatEscalationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AiChatEscalations.
     */
    data: AiChatEscalationCreateManyInput | AiChatEscalationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AiChatEscalation createManyAndReturn
   */
  export type AiChatEscalationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * The data used to create many AiChatEscalations.
     */
    data: AiChatEscalationCreateManyInput | AiChatEscalationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiChatEscalation update
   */
  export type AiChatEscalationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    /**
     * The data needed to update a AiChatEscalation.
     */
    data: XOR<AiChatEscalationUpdateInput, AiChatEscalationUncheckedUpdateInput>
    /**
     * Choose, which AiChatEscalation to update.
     */
    where: AiChatEscalationWhereUniqueInput
  }

  /**
   * AiChatEscalation updateMany
   */
  export type AiChatEscalationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AiChatEscalations.
     */
    data: XOR<AiChatEscalationUpdateManyMutationInput, AiChatEscalationUncheckedUpdateManyInput>
    /**
     * Filter which AiChatEscalations to update
     */
    where?: AiChatEscalationWhereInput
    /**
     * Limit how many AiChatEscalations to update.
     */
    limit?: number
  }

  /**
   * AiChatEscalation updateManyAndReturn
   */
  export type AiChatEscalationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * The data used to update AiChatEscalations.
     */
    data: XOR<AiChatEscalationUpdateManyMutationInput, AiChatEscalationUncheckedUpdateManyInput>
    /**
     * Filter which AiChatEscalations to update
     */
    where?: AiChatEscalationWhereInput
    /**
     * Limit how many AiChatEscalations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiChatEscalation upsert
   */
  export type AiChatEscalationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    /**
     * The filter to search for the AiChatEscalation to update in case it exists.
     */
    where: AiChatEscalationWhereUniqueInput
    /**
     * In case the AiChatEscalation found by the `where` argument doesn't exist, create a new AiChatEscalation with this data.
     */
    create: XOR<AiChatEscalationCreateInput, AiChatEscalationUncheckedCreateInput>
    /**
     * In case the AiChatEscalation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AiChatEscalationUpdateInput, AiChatEscalationUncheckedUpdateInput>
  }

  /**
   * AiChatEscalation delete
   */
  export type AiChatEscalationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
    /**
     * Filter which AiChatEscalation to delete.
     */
    where: AiChatEscalationWhereUniqueInput
  }

  /**
   * AiChatEscalation deleteMany
   */
  export type AiChatEscalationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiChatEscalations to delete
     */
    where?: AiChatEscalationWhereInput
    /**
     * Limit how many AiChatEscalations to delete.
     */
    limit?: number
  }

  /**
   * AiChatEscalation without action
   */
  export type AiChatEscalationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiChatEscalation
     */
    select?: AiChatEscalationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiChatEscalation
     */
    omit?: AiChatEscalationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiChatEscalationInclude<ExtArgs> | null
  }


  /**
   * Model CalcCategory
   */

  export type AggregateCalcCategory = {
    _count: CalcCategoryCountAggregateOutputType | null
    _avg: CalcCategoryAvgAggregateOutputType | null
    _sum: CalcCategorySumAggregateOutputType | null
    _min: CalcCategoryMinAggregateOutputType | null
    _max: CalcCategoryMaxAggregateOutputType | null
  }

  export type CalcCategoryAvgAggregateOutputType = {
    id: number | null
    projectTypeId: number | null
  }

  export type CalcCategorySumAggregateOutputType = {
    id: number | null
    projectTypeId: number | null
  }

  export type CalcCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    isPopular: boolean | null
    projectTypeId: number | null
  }

  export type CalcCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    isPopular: boolean | null
    projectTypeId: number | null
  }

  export type CalcCategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    isPopular: number
    projectTypeId: number
    _all: number
  }


  export type CalcCategoryAvgAggregateInputType = {
    id?: true
    projectTypeId?: true
  }

  export type CalcCategorySumAggregateInputType = {
    id?: true
    projectTypeId?: true
  }

  export type CalcCategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    isPopular?: true
    projectTypeId?: true
  }

  export type CalcCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    isPopular?: true
    projectTypeId?: true
  }

  export type CalcCategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    isPopular?: true
    projectTypeId?: true
    _all?: true
  }

  export type CalcCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcCategory to aggregate.
     */
    where?: CalcCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcCategories to fetch.
     */
    orderBy?: CalcCategoryOrderByWithRelationInput | CalcCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalcCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalcCategories
    **/
    _count?: true | CalcCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalcCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalcCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalcCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalcCategoryMaxAggregateInputType
  }

  export type GetCalcCategoryAggregateType<T extends CalcCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCalcCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalcCategory[P]>
      : GetScalarType<T[P], AggregateCalcCategory[P]>
  }




  export type CalcCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalcCategoryWhereInput
    orderBy?: CalcCategoryOrderByWithAggregationInput | CalcCategoryOrderByWithAggregationInput[]
    by: CalcCategoryScalarFieldEnum[] | CalcCategoryScalarFieldEnum
    having?: CalcCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalcCategoryCountAggregateInputType | true
    _avg?: CalcCategoryAvgAggregateInputType
    _sum?: CalcCategorySumAggregateInputType
    _min?: CalcCategoryMinAggregateInputType
    _max?: CalcCategoryMaxAggregateInputType
  }

  export type CalcCategoryGroupByOutputType = {
    id: number
    name: string
    slug: string
    description: string | null
    isPopular: boolean
    projectTypeId: number | null
    _count: CalcCategoryCountAggregateOutputType | null
    _avg: CalcCategoryAvgAggregateOutputType | null
    _sum: CalcCategorySumAggregateOutputType | null
    _min: CalcCategoryMinAggregateOutputType | null
    _max: CalcCategoryMaxAggregateOutputType | null
  }

  type GetCalcCategoryGroupByPayload<T extends CalcCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalcCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalcCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalcCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CalcCategoryGroupByOutputType[P]>
        }
      >
    >


  export type CalcCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isPopular?: boolean
    projectTypeId?: boolean
    projectType?: boolean | CalcCategory$projectTypeArgs<ExtArgs>
    items?: boolean | CalcCategory$itemsArgs<ExtArgs>
    _count?: boolean | CalcCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calcCategory"]>

  export type CalcCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isPopular?: boolean
    projectTypeId?: boolean
    projectType?: boolean | CalcCategory$projectTypeArgs<ExtArgs>
  }, ExtArgs["result"]["calcCategory"]>

  export type CalcCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isPopular?: boolean
    projectTypeId?: boolean
    projectType?: boolean | CalcCategory$projectTypeArgs<ExtArgs>
  }, ExtArgs["result"]["calcCategory"]>

  export type CalcCategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    isPopular?: boolean
    projectTypeId?: boolean
  }

  export type CalcCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "isPopular" | "projectTypeId", ExtArgs["result"]["calcCategory"]>
  export type CalcCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectType?: boolean | CalcCategory$projectTypeArgs<ExtArgs>
    items?: boolean | CalcCategory$itemsArgs<ExtArgs>
    _count?: boolean | CalcCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CalcCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectType?: boolean | CalcCategory$projectTypeArgs<ExtArgs>
  }
  export type CalcCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projectType?: boolean | CalcCategory$projectTypeArgs<ExtArgs>
  }

  export type $CalcCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalcCategory"
    objects: {
      projectType: Prisma.$CalcProjectTypePayload<ExtArgs> | null
      items: Prisma.$CalcItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      description: string | null
      isPopular: boolean
      projectTypeId: number | null
    }, ExtArgs["result"]["calcCategory"]>
    composites: {}
  }

  type CalcCategoryGetPayload<S extends boolean | null | undefined | CalcCategoryDefaultArgs> = $Result.GetResult<Prisma.$CalcCategoryPayload, S>

  type CalcCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalcCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalcCategoryCountAggregateInputType | true
    }

  export interface CalcCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalcCategory'], meta: { name: 'CalcCategory' } }
    /**
     * Find zero or one CalcCategory that matches the filter.
     * @param {CalcCategoryFindUniqueArgs} args - Arguments to find a CalcCategory
     * @example
     * // Get one CalcCategory
     * const calcCategory = await prisma.calcCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalcCategoryFindUniqueArgs>(args: SelectSubset<T, CalcCategoryFindUniqueArgs<ExtArgs>>): Prisma__CalcCategoryClient<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CalcCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalcCategoryFindUniqueOrThrowArgs} args - Arguments to find a CalcCategory
     * @example
     * // Get one CalcCategory
     * const calcCategory = await prisma.calcCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalcCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CalcCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalcCategoryClient<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcCategoryFindFirstArgs} args - Arguments to find a CalcCategory
     * @example
     * // Get one CalcCategory
     * const calcCategory = await prisma.calcCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalcCategoryFindFirstArgs>(args?: SelectSubset<T, CalcCategoryFindFirstArgs<ExtArgs>>): Prisma__CalcCategoryClient<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcCategoryFindFirstOrThrowArgs} args - Arguments to find a CalcCategory
     * @example
     * // Get one CalcCategory
     * const calcCategory = await prisma.calcCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalcCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CalcCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalcCategoryClient<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CalcCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalcCategories
     * const calcCategories = await prisma.calcCategory.findMany()
     * 
     * // Get first 10 CalcCategories
     * const calcCategories = await prisma.calcCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calcCategoryWithIdOnly = await prisma.calcCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalcCategoryFindManyArgs>(args?: SelectSubset<T, CalcCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CalcCategory.
     * @param {CalcCategoryCreateArgs} args - Arguments to create a CalcCategory.
     * @example
     * // Create one CalcCategory
     * const CalcCategory = await prisma.calcCategory.create({
     *   data: {
     *     // ... data to create a CalcCategory
     *   }
     * })
     * 
     */
    create<T extends CalcCategoryCreateArgs>(args: SelectSubset<T, CalcCategoryCreateArgs<ExtArgs>>): Prisma__CalcCategoryClient<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CalcCategories.
     * @param {CalcCategoryCreateManyArgs} args - Arguments to create many CalcCategories.
     * @example
     * // Create many CalcCategories
     * const calcCategory = await prisma.calcCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalcCategoryCreateManyArgs>(args?: SelectSubset<T, CalcCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalcCategories and returns the data saved in the database.
     * @param {CalcCategoryCreateManyAndReturnArgs} args - Arguments to create many CalcCategories.
     * @example
     * // Create many CalcCategories
     * const calcCategory = await prisma.calcCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalcCategories and only return the `id`
     * const calcCategoryWithIdOnly = await prisma.calcCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalcCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CalcCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CalcCategory.
     * @param {CalcCategoryDeleteArgs} args - Arguments to delete one CalcCategory.
     * @example
     * // Delete one CalcCategory
     * const CalcCategory = await prisma.calcCategory.delete({
     *   where: {
     *     // ... filter to delete one CalcCategory
     *   }
     * })
     * 
     */
    delete<T extends CalcCategoryDeleteArgs>(args: SelectSubset<T, CalcCategoryDeleteArgs<ExtArgs>>): Prisma__CalcCategoryClient<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CalcCategory.
     * @param {CalcCategoryUpdateArgs} args - Arguments to update one CalcCategory.
     * @example
     * // Update one CalcCategory
     * const calcCategory = await prisma.calcCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalcCategoryUpdateArgs>(args: SelectSubset<T, CalcCategoryUpdateArgs<ExtArgs>>): Prisma__CalcCategoryClient<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CalcCategories.
     * @param {CalcCategoryDeleteManyArgs} args - Arguments to filter CalcCategories to delete.
     * @example
     * // Delete a few CalcCategories
     * const { count } = await prisma.calcCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalcCategoryDeleteManyArgs>(args?: SelectSubset<T, CalcCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalcCategories
     * const calcCategory = await prisma.calcCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalcCategoryUpdateManyArgs>(args: SelectSubset<T, CalcCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcCategories and returns the data updated in the database.
     * @param {CalcCategoryUpdateManyAndReturnArgs} args - Arguments to update many CalcCategories.
     * @example
     * // Update many CalcCategories
     * const calcCategory = await prisma.calcCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalcCategories and only return the `id`
     * const calcCategoryWithIdOnly = await prisma.calcCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalcCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CalcCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CalcCategory.
     * @param {CalcCategoryUpsertArgs} args - Arguments to update or create a CalcCategory.
     * @example
     * // Update or create a CalcCategory
     * const calcCategory = await prisma.calcCategory.upsert({
     *   create: {
     *     // ... data to create a CalcCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalcCategory we want to update
     *   }
     * })
     */
    upsert<T extends CalcCategoryUpsertArgs>(args: SelectSubset<T, CalcCategoryUpsertArgs<ExtArgs>>): Prisma__CalcCategoryClient<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CalcCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcCategoryCountArgs} args - Arguments to filter CalcCategories to count.
     * @example
     * // Count the number of CalcCategories
     * const count = await prisma.calcCategory.count({
     *   where: {
     *     // ... the filter for the CalcCategories we want to count
     *   }
     * })
    **/
    count<T extends CalcCategoryCountArgs>(
      args?: Subset<T, CalcCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalcCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalcCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalcCategoryAggregateArgs>(args: Subset<T, CalcCategoryAggregateArgs>): Prisma.PrismaPromise<GetCalcCategoryAggregateType<T>>

    /**
     * Group by CalcCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalcCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalcCategoryGroupByArgs['orderBy'] }
        : { orderBy?: CalcCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalcCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalcCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalcCategory model
   */
  readonly fields: CalcCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalcCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalcCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projectType<T extends CalcCategory$projectTypeArgs<ExtArgs> = {}>(args?: Subset<T, CalcCategory$projectTypeArgs<ExtArgs>>): Prisma__CalcProjectTypeClient<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    items<T extends CalcCategory$itemsArgs<ExtArgs> = {}>(args?: Subset<T, CalcCategory$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalcCategory model
   */
  interface CalcCategoryFieldRefs {
    readonly id: FieldRef<"CalcCategory", 'Int'>
    readonly name: FieldRef<"CalcCategory", 'String'>
    readonly slug: FieldRef<"CalcCategory", 'String'>
    readonly description: FieldRef<"CalcCategory", 'String'>
    readonly isPopular: FieldRef<"CalcCategory", 'Boolean'>
    readonly projectTypeId: FieldRef<"CalcCategory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CalcCategory findUnique
   */
  export type CalcCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CalcCategory to fetch.
     */
    where: CalcCategoryWhereUniqueInput
  }

  /**
   * CalcCategory findUniqueOrThrow
   */
  export type CalcCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CalcCategory to fetch.
     */
    where: CalcCategoryWhereUniqueInput
  }

  /**
   * CalcCategory findFirst
   */
  export type CalcCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CalcCategory to fetch.
     */
    where?: CalcCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcCategories to fetch.
     */
    orderBy?: CalcCategoryOrderByWithRelationInput | CalcCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcCategories.
     */
    cursor?: CalcCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcCategories.
     */
    distinct?: CalcCategoryScalarFieldEnum | CalcCategoryScalarFieldEnum[]
  }

  /**
   * CalcCategory findFirstOrThrow
   */
  export type CalcCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CalcCategory to fetch.
     */
    where?: CalcCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcCategories to fetch.
     */
    orderBy?: CalcCategoryOrderByWithRelationInput | CalcCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcCategories.
     */
    cursor?: CalcCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcCategories.
     */
    distinct?: CalcCategoryScalarFieldEnum | CalcCategoryScalarFieldEnum[]
  }

  /**
   * CalcCategory findMany
   */
  export type CalcCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    /**
     * Filter, which CalcCategories to fetch.
     */
    where?: CalcCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcCategories to fetch.
     */
    orderBy?: CalcCategoryOrderByWithRelationInput | CalcCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalcCategories.
     */
    cursor?: CalcCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcCategories.
     */
    skip?: number
    distinct?: CalcCategoryScalarFieldEnum | CalcCategoryScalarFieldEnum[]
  }

  /**
   * CalcCategory create
   */
  export type CalcCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CalcCategory.
     */
    data: XOR<CalcCategoryCreateInput, CalcCategoryUncheckedCreateInput>
  }

  /**
   * CalcCategory createMany
   */
  export type CalcCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalcCategories.
     */
    data: CalcCategoryCreateManyInput | CalcCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalcCategory createManyAndReturn
   */
  export type CalcCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many CalcCategories.
     */
    data: CalcCategoryCreateManyInput | CalcCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalcCategory update
   */
  export type CalcCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CalcCategory.
     */
    data: XOR<CalcCategoryUpdateInput, CalcCategoryUncheckedUpdateInput>
    /**
     * Choose, which CalcCategory to update.
     */
    where: CalcCategoryWhereUniqueInput
  }

  /**
   * CalcCategory updateMany
   */
  export type CalcCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalcCategories.
     */
    data: XOR<CalcCategoryUpdateManyMutationInput, CalcCategoryUncheckedUpdateManyInput>
    /**
     * Filter which CalcCategories to update
     */
    where?: CalcCategoryWhereInput
    /**
     * Limit how many CalcCategories to update.
     */
    limit?: number
  }

  /**
   * CalcCategory updateManyAndReturn
   */
  export type CalcCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * The data used to update CalcCategories.
     */
    data: XOR<CalcCategoryUpdateManyMutationInput, CalcCategoryUncheckedUpdateManyInput>
    /**
     * Filter which CalcCategories to update
     */
    where?: CalcCategoryWhereInput
    /**
     * Limit how many CalcCategories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalcCategory upsert
   */
  export type CalcCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CalcCategory to update in case it exists.
     */
    where: CalcCategoryWhereUniqueInput
    /**
     * In case the CalcCategory found by the `where` argument doesn't exist, create a new CalcCategory with this data.
     */
    create: XOR<CalcCategoryCreateInput, CalcCategoryUncheckedCreateInput>
    /**
     * In case the CalcCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalcCategoryUpdateInput, CalcCategoryUncheckedUpdateInput>
  }

  /**
   * CalcCategory delete
   */
  export type CalcCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    /**
     * Filter which CalcCategory to delete.
     */
    where: CalcCategoryWhereUniqueInput
  }

  /**
   * CalcCategory deleteMany
   */
  export type CalcCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcCategories to delete
     */
    where?: CalcCategoryWhereInput
    /**
     * Limit how many CalcCategories to delete.
     */
    limit?: number
  }

  /**
   * CalcCategory.projectType
   */
  export type CalcCategory$projectTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    where?: CalcProjectTypeWhereInput
  }

  /**
   * CalcCategory.items
   */
  export type CalcCategory$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    where?: CalcItemWhereInput
    orderBy?: CalcItemOrderByWithRelationInput | CalcItemOrderByWithRelationInput[]
    cursor?: CalcItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalcItemScalarFieldEnum | CalcItemScalarFieldEnum[]
  }

  /**
   * CalcCategory without action
   */
  export type CalcCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
  }


  /**
   * Model CalcItem
   */

  export type AggregateCalcItem = {
    _count: CalcItemCountAggregateOutputType | null
    _avg: CalcItemAvgAggregateOutputType | null
    _sum: CalcItemSumAggregateOutputType | null
    _min: CalcItemMinAggregateOutputType | null
    _max: CalcItemMaxAggregateOutputType | null
  }

  export type CalcItemAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    minPrice: number | null
    maxPrice: number | null
    baseMin: number | null
    baseMax: number | null
  }

  export type CalcItemSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    minPrice: number | null
    maxPrice: number | null
    baseMin: number | null
    baseMax: number | null
  }

  export type CalcItemMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    description: string | null
    unitType: $Enums.CalcUnitType | null
    minPrice: number | null
    maxPrice: number | null
    baseMin: number | null
    baseMax: number | null
    vatIncluded: boolean | null
    visible: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CalcItemMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    name: string | null
    description: string | null
    unitType: $Enums.CalcUnitType | null
    minPrice: number | null
    maxPrice: number | null
    baseMin: number | null
    baseMax: number | null
    vatIncluded: boolean | null
    visible: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CalcItemCountAggregateOutputType = {
    id: number
    categoryId: number
    name: number
    description: number
    unitType: number
    minPrice: number
    maxPrice: number
    baseMin: number
    baseMax: number
    vatIncluded: number
    visible: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CalcItemAvgAggregateInputType = {
    id?: true
    categoryId?: true
    minPrice?: true
    maxPrice?: true
    baseMin?: true
    baseMax?: true
  }

  export type CalcItemSumAggregateInputType = {
    id?: true
    categoryId?: true
    minPrice?: true
    maxPrice?: true
    baseMin?: true
    baseMax?: true
  }

  export type CalcItemMinAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    description?: true
    unitType?: true
    minPrice?: true
    maxPrice?: true
    baseMin?: true
    baseMax?: true
    vatIncluded?: true
    visible?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CalcItemMaxAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    description?: true
    unitType?: true
    minPrice?: true
    maxPrice?: true
    baseMin?: true
    baseMax?: true
    vatIncluded?: true
    visible?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CalcItemCountAggregateInputType = {
    id?: true
    categoryId?: true
    name?: true
    description?: true
    unitType?: true
    minPrice?: true
    maxPrice?: true
    baseMin?: true
    baseMax?: true
    vatIncluded?: true
    visible?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CalcItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcItem to aggregate.
     */
    where?: CalcItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcItems to fetch.
     */
    orderBy?: CalcItemOrderByWithRelationInput | CalcItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalcItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalcItems
    **/
    _count?: true | CalcItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalcItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalcItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalcItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalcItemMaxAggregateInputType
  }

  export type GetCalcItemAggregateType<T extends CalcItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCalcItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalcItem[P]>
      : GetScalarType<T[P], AggregateCalcItem[P]>
  }




  export type CalcItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalcItemWhereInput
    orderBy?: CalcItemOrderByWithAggregationInput | CalcItemOrderByWithAggregationInput[]
    by: CalcItemScalarFieldEnum[] | CalcItemScalarFieldEnum
    having?: CalcItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalcItemCountAggregateInputType | true
    _avg?: CalcItemAvgAggregateInputType
    _sum?: CalcItemSumAggregateInputType
    _min?: CalcItemMinAggregateInputType
    _max?: CalcItemMaxAggregateInputType
  }

  export type CalcItemGroupByOutputType = {
    id: number
    categoryId: number
    name: string
    description: string | null
    unitType: $Enums.CalcUnitType
    minPrice: number
    maxPrice: number
    baseMin: number
    baseMax: number
    vatIncluded: boolean
    visible: boolean
    createdAt: Date
    updatedAt: Date
    _count: CalcItemCountAggregateOutputType | null
    _avg: CalcItemAvgAggregateOutputType | null
    _sum: CalcItemSumAggregateOutputType | null
    _min: CalcItemMinAggregateOutputType | null
    _max: CalcItemMaxAggregateOutputType | null
  }

  type GetCalcItemGroupByPayload<T extends CalcItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalcItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalcItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalcItemGroupByOutputType[P]>
            : GetScalarType<T[P], CalcItemGroupByOutputType[P]>
        }
      >
    >


  export type CalcItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    unitType?: boolean
    minPrice?: boolean
    maxPrice?: boolean
    baseMin?: boolean
    baseMax?: boolean
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CalcCategoryDefaultArgs<ExtArgs>
    conditions?: boolean | CalcItem$conditionsArgs<ExtArgs>
    _count?: boolean | CalcItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calcItem"]>

  export type CalcItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    unitType?: boolean
    minPrice?: boolean
    maxPrice?: boolean
    baseMin?: boolean
    baseMax?: boolean
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CalcCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calcItem"]>

  export type CalcItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    unitType?: boolean
    minPrice?: boolean
    maxPrice?: boolean
    baseMin?: boolean
    baseMax?: boolean
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    category?: boolean | CalcCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calcItem"]>

  export type CalcItemSelectScalar = {
    id?: boolean
    categoryId?: boolean
    name?: boolean
    description?: boolean
    unitType?: boolean
    minPrice?: boolean
    maxPrice?: boolean
    baseMin?: boolean
    baseMax?: boolean
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CalcItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "categoryId" | "name" | "description" | "unitType" | "minPrice" | "maxPrice" | "baseMin" | "baseMax" | "vatIncluded" | "visible" | "createdAt" | "updatedAt", ExtArgs["result"]["calcItem"]>
  export type CalcItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CalcCategoryDefaultArgs<ExtArgs>
    conditions?: boolean | CalcItem$conditionsArgs<ExtArgs>
    _count?: boolean | CalcItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CalcItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CalcCategoryDefaultArgs<ExtArgs>
  }
  export type CalcItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CalcCategoryDefaultArgs<ExtArgs>
  }

  export type $CalcItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalcItem"
    objects: {
      category: Prisma.$CalcCategoryPayload<ExtArgs>
      conditions: Prisma.$CalcConditionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: number
      name: string
      description: string | null
      unitType: $Enums.CalcUnitType
      minPrice: number
      maxPrice: number
      baseMin: number
      baseMax: number
      vatIncluded: boolean
      visible: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["calcItem"]>
    composites: {}
  }

  type CalcItemGetPayload<S extends boolean | null | undefined | CalcItemDefaultArgs> = $Result.GetResult<Prisma.$CalcItemPayload, S>

  type CalcItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalcItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalcItemCountAggregateInputType | true
    }

  export interface CalcItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalcItem'], meta: { name: 'CalcItem' } }
    /**
     * Find zero or one CalcItem that matches the filter.
     * @param {CalcItemFindUniqueArgs} args - Arguments to find a CalcItem
     * @example
     * // Get one CalcItem
     * const calcItem = await prisma.calcItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalcItemFindUniqueArgs>(args: SelectSubset<T, CalcItemFindUniqueArgs<ExtArgs>>): Prisma__CalcItemClient<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CalcItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalcItemFindUniqueOrThrowArgs} args - Arguments to find a CalcItem
     * @example
     * // Get one CalcItem
     * const calcItem = await prisma.calcItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalcItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CalcItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalcItemClient<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcItemFindFirstArgs} args - Arguments to find a CalcItem
     * @example
     * // Get one CalcItem
     * const calcItem = await prisma.calcItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalcItemFindFirstArgs>(args?: SelectSubset<T, CalcItemFindFirstArgs<ExtArgs>>): Prisma__CalcItemClient<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcItemFindFirstOrThrowArgs} args - Arguments to find a CalcItem
     * @example
     * // Get one CalcItem
     * const calcItem = await prisma.calcItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalcItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CalcItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalcItemClient<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CalcItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalcItems
     * const calcItems = await prisma.calcItem.findMany()
     * 
     * // Get first 10 CalcItems
     * const calcItems = await prisma.calcItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calcItemWithIdOnly = await prisma.calcItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalcItemFindManyArgs>(args?: SelectSubset<T, CalcItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CalcItem.
     * @param {CalcItemCreateArgs} args - Arguments to create a CalcItem.
     * @example
     * // Create one CalcItem
     * const CalcItem = await prisma.calcItem.create({
     *   data: {
     *     // ... data to create a CalcItem
     *   }
     * })
     * 
     */
    create<T extends CalcItemCreateArgs>(args: SelectSubset<T, CalcItemCreateArgs<ExtArgs>>): Prisma__CalcItemClient<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CalcItems.
     * @param {CalcItemCreateManyArgs} args - Arguments to create many CalcItems.
     * @example
     * // Create many CalcItems
     * const calcItem = await prisma.calcItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalcItemCreateManyArgs>(args?: SelectSubset<T, CalcItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalcItems and returns the data saved in the database.
     * @param {CalcItemCreateManyAndReturnArgs} args - Arguments to create many CalcItems.
     * @example
     * // Create many CalcItems
     * const calcItem = await prisma.calcItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalcItems and only return the `id`
     * const calcItemWithIdOnly = await prisma.calcItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalcItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CalcItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CalcItem.
     * @param {CalcItemDeleteArgs} args - Arguments to delete one CalcItem.
     * @example
     * // Delete one CalcItem
     * const CalcItem = await prisma.calcItem.delete({
     *   where: {
     *     // ... filter to delete one CalcItem
     *   }
     * })
     * 
     */
    delete<T extends CalcItemDeleteArgs>(args: SelectSubset<T, CalcItemDeleteArgs<ExtArgs>>): Prisma__CalcItemClient<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CalcItem.
     * @param {CalcItemUpdateArgs} args - Arguments to update one CalcItem.
     * @example
     * // Update one CalcItem
     * const calcItem = await prisma.calcItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalcItemUpdateArgs>(args: SelectSubset<T, CalcItemUpdateArgs<ExtArgs>>): Prisma__CalcItemClient<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CalcItems.
     * @param {CalcItemDeleteManyArgs} args - Arguments to filter CalcItems to delete.
     * @example
     * // Delete a few CalcItems
     * const { count } = await prisma.calcItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalcItemDeleteManyArgs>(args?: SelectSubset<T, CalcItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalcItems
     * const calcItem = await prisma.calcItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalcItemUpdateManyArgs>(args: SelectSubset<T, CalcItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcItems and returns the data updated in the database.
     * @param {CalcItemUpdateManyAndReturnArgs} args - Arguments to update many CalcItems.
     * @example
     * // Update many CalcItems
     * const calcItem = await prisma.calcItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalcItems and only return the `id`
     * const calcItemWithIdOnly = await prisma.calcItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalcItemUpdateManyAndReturnArgs>(args: SelectSubset<T, CalcItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CalcItem.
     * @param {CalcItemUpsertArgs} args - Arguments to update or create a CalcItem.
     * @example
     * // Update or create a CalcItem
     * const calcItem = await prisma.calcItem.upsert({
     *   create: {
     *     // ... data to create a CalcItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalcItem we want to update
     *   }
     * })
     */
    upsert<T extends CalcItemUpsertArgs>(args: SelectSubset<T, CalcItemUpsertArgs<ExtArgs>>): Prisma__CalcItemClient<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CalcItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcItemCountArgs} args - Arguments to filter CalcItems to count.
     * @example
     * // Count the number of CalcItems
     * const count = await prisma.calcItem.count({
     *   where: {
     *     // ... the filter for the CalcItems we want to count
     *   }
     * })
    **/
    count<T extends CalcItemCountArgs>(
      args?: Subset<T, CalcItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalcItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalcItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalcItemAggregateArgs>(args: Subset<T, CalcItemAggregateArgs>): Prisma.PrismaPromise<GetCalcItemAggregateType<T>>

    /**
     * Group by CalcItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalcItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalcItemGroupByArgs['orderBy'] }
        : { orderBy?: CalcItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalcItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalcItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalcItem model
   */
  readonly fields: CalcItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalcItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalcItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CalcCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CalcCategoryDefaultArgs<ExtArgs>>): Prisma__CalcCategoryClient<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    conditions<T extends CalcItem$conditionsArgs<ExtArgs> = {}>(args?: Subset<T, CalcItem$conditionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalcItem model
   */
  interface CalcItemFieldRefs {
    readonly id: FieldRef<"CalcItem", 'Int'>
    readonly categoryId: FieldRef<"CalcItem", 'Int'>
    readonly name: FieldRef<"CalcItem", 'String'>
    readonly description: FieldRef<"CalcItem", 'String'>
    readonly unitType: FieldRef<"CalcItem", 'CalcUnitType'>
    readonly minPrice: FieldRef<"CalcItem", 'Float'>
    readonly maxPrice: FieldRef<"CalcItem", 'Float'>
    readonly baseMin: FieldRef<"CalcItem", 'Float'>
    readonly baseMax: FieldRef<"CalcItem", 'Float'>
    readonly vatIncluded: FieldRef<"CalcItem", 'Boolean'>
    readonly visible: FieldRef<"CalcItem", 'Boolean'>
    readonly createdAt: FieldRef<"CalcItem", 'DateTime'>
    readonly updatedAt: FieldRef<"CalcItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CalcItem findUnique
   */
  export type CalcItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    /**
     * Filter, which CalcItem to fetch.
     */
    where: CalcItemWhereUniqueInput
  }

  /**
   * CalcItem findUniqueOrThrow
   */
  export type CalcItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    /**
     * Filter, which CalcItem to fetch.
     */
    where: CalcItemWhereUniqueInput
  }

  /**
   * CalcItem findFirst
   */
  export type CalcItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    /**
     * Filter, which CalcItem to fetch.
     */
    where?: CalcItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcItems to fetch.
     */
    orderBy?: CalcItemOrderByWithRelationInput | CalcItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcItems.
     */
    cursor?: CalcItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcItems.
     */
    distinct?: CalcItemScalarFieldEnum | CalcItemScalarFieldEnum[]
  }

  /**
   * CalcItem findFirstOrThrow
   */
  export type CalcItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    /**
     * Filter, which CalcItem to fetch.
     */
    where?: CalcItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcItems to fetch.
     */
    orderBy?: CalcItemOrderByWithRelationInput | CalcItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcItems.
     */
    cursor?: CalcItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcItems.
     */
    distinct?: CalcItemScalarFieldEnum | CalcItemScalarFieldEnum[]
  }

  /**
   * CalcItem findMany
   */
  export type CalcItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    /**
     * Filter, which CalcItems to fetch.
     */
    where?: CalcItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcItems to fetch.
     */
    orderBy?: CalcItemOrderByWithRelationInput | CalcItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalcItems.
     */
    cursor?: CalcItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcItems.
     */
    skip?: number
    distinct?: CalcItemScalarFieldEnum | CalcItemScalarFieldEnum[]
  }

  /**
   * CalcItem create
   */
  export type CalcItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CalcItem.
     */
    data: XOR<CalcItemCreateInput, CalcItemUncheckedCreateInput>
  }

  /**
   * CalcItem createMany
   */
  export type CalcItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalcItems.
     */
    data: CalcItemCreateManyInput | CalcItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalcItem createManyAndReturn
   */
  export type CalcItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * The data used to create many CalcItems.
     */
    data: CalcItemCreateManyInput | CalcItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalcItem update
   */
  export type CalcItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CalcItem.
     */
    data: XOR<CalcItemUpdateInput, CalcItemUncheckedUpdateInput>
    /**
     * Choose, which CalcItem to update.
     */
    where: CalcItemWhereUniqueInput
  }

  /**
   * CalcItem updateMany
   */
  export type CalcItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalcItems.
     */
    data: XOR<CalcItemUpdateManyMutationInput, CalcItemUncheckedUpdateManyInput>
    /**
     * Filter which CalcItems to update
     */
    where?: CalcItemWhereInput
    /**
     * Limit how many CalcItems to update.
     */
    limit?: number
  }

  /**
   * CalcItem updateManyAndReturn
   */
  export type CalcItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * The data used to update CalcItems.
     */
    data: XOR<CalcItemUpdateManyMutationInput, CalcItemUncheckedUpdateManyInput>
    /**
     * Filter which CalcItems to update
     */
    where?: CalcItemWhereInput
    /**
     * Limit how many CalcItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalcItem upsert
   */
  export type CalcItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CalcItem to update in case it exists.
     */
    where: CalcItemWhereUniqueInput
    /**
     * In case the CalcItem found by the `where` argument doesn't exist, create a new CalcItem with this data.
     */
    create: XOR<CalcItemCreateInput, CalcItemUncheckedCreateInput>
    /**
     * In case the CalcItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalcItemUpdateInput, CalcItemUncheckedUpdateInput>
  }

  /**
   * CalcItem delete
   */
  export type CalcItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
    /**
     * Filter which CalcItem to delete.
     */
    where: CalcItemWhereUniqueInput
  }

  /**
   * CalcItem deleteMany
   */
  export type CalcItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcItems to delete
     */
    where?: CalcItemWhereInput
    /**
     * Limit how many CalcItems to delete.
     */
    limit?: number
  }

  /**
   * CalcItem.conditions
   */
  export type CalcItem$conditionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    where?: CalcConditionWhereInput
    orderBy?: CalcConditionOrderByWithRelationInput | CalcConditionOrderByWithRelationInput[]
    cursor?: CalcConditionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalcConditionScalarFieldEnum | CalcConditionScalarFieldEnum[]
  }

  /**
   * CalcItem without action
   */
  export type CalcItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcItem
     */
    select?: CalcItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcItem
     */
    omit?: CalcItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcItemInclude<ExtArgs> | null
  }


  /**
   * Model CalcSettings
   */

  export type AggregateCalcSettings = {
    _count: CalcSettingsCountAggregateOutputType | null
    _avg: CalcSettingsAvgAggregateOutputType | null
    _sum: CalcSettingsSumAggregateOutputType | null
    _min: CalcSettingsMinAggregateOutputType | null
    _max: CalcSettingsMaxAggregateOutputType | null
  }

  export type CalcSettingsAvgAggregateOutputType = {
    id: number | null
    callOutThreshold: number | null
    callOutFeeMin: number | null
    callOutFeeMax: number | null
    urgencyMultiplier: number | null
    emergencyMultiplier: number | null
    projectTrigger: number | null
    projectFeePercent: number | null
  }

  export type CalcSettingsSumAggregateOutputType = {
    id: number | null
    callOutThreshold: number | null
    callOutFeeMin: number | null
    callOutFeeMax: number | null
    urgencyMultiplier: number | null
    emergencyMultiplier: number | null
    projectTrigger: number | null
    projectFeePercent: number | null
  }

  export type CalcSettingsMinAggregateOutputType = {
    id: number | null
    callOutThreshold: number | null
    callOutFeeMin: number | null
    callOutFeeMax: number | null
    urgencyMultiplier: number | null
    emergencyMultiplier: number | null
    projectTrigger: number | null
    projectFeePercent: number | null
  }

  export type CalcSettingsMaxAggregateOutputType = {
    id: number | null
    callOutThreshold: number | null
    callOutFeeMin: number | null
    callOutFeeMax: number | null
    urgencyMultiplier: number | null
    emergencyMultiplier: number | null
    projectTrigger: number | null
    projectFeePercent: number | null
  }

  export type CalcSettingsCountAggregateOutputType = {
    id: number
    callOutThreshold: number
    callOutFeeMin: number
    callOutFeeMax: number
    urgencyMultiplier: number
    emergencyMultiplier: number
    projectTrigger: number
    projectFeePercent: number
    _all: number
  }


  export type CalcSettingsAvgAggregateInputType = {
    id?: true
    callOutThreshold?: true
    callOutFeeMin?: true
    callOutFeeMax?: true
    urgencyMultiplier?: true
    emergencyMultiplier?: true
    projectTrigger?: true
    projectFeePercent?: true
  }

  export type CalcSettingsSumAggregateInputType = {
    id?: true
    callOutThreshold?: true
    callOutFeeMin?: true
    callOutFeeMax?: true
    urgencyMultiplier?: true
    emergencyMultiplier?: true
    projectTrigger?: true
    projectFeePercent?: true
  }

  export type CalcSettingsMinAggregateInputType = {
    id?: true
    callOutThreshold?: true
    callOutFeeMin?: true
    callOutFeeMax?: true
    urgencyMultiplier?: true
    emergencyMultiplier?: true
    projectTrigger?: true
    projectFeePercent?: true
  }

  export type CalcSettingsMaxAggregateInputType = {
    id?: true
    callOutThreshold?: true
    callOutFeeMin?: true
    callOutFeeMax?: true
    urgencyMultiplier?: true
    emergencyMultiplier?: true
    projectTrigger?: true
    projectFeePercent?: true
  }

  export type CalcSettingsCountAggregateInputType = {
    id?: true
    callOutThreshold?: true
    callOutFeeMin?: true
    callOutFeeMax?: true
    urgencyMultiplier?: true
    emergencyMultiplier?: true
    projectTrigger?: true
    projectFeePercent?: true
    _all?: true
  }

  export type CalcSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcSettings to aggregate.
     */
    where?: CalcSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcSettings to fetch.
     */
    orderBy?: CalcSettingsOrderByWithRelationInput | CalcSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalcSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalcSettings
    **/
    _count?: true | CalcSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalcSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalcSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalcSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalcSettingsMaxAggregateInputType
  }

  export type GetCalcSettingsAggregateType<T extends CalcSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateCalcSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalcSettings[P]>
      : GetScalarType<T[P], AggregateCalcSettings[P]>
  }




  export type CalcSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalcSettingsWhereInput
    orderBy?: CalcSettingsOrderByWithAggregationInput | CalcSettingsOrderByWithAggregationInput[]
    by: CalcSettingsScalarFieldEnum[] | CalcSettingsScalarFieldEnum
    having?: CalcSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalcSettingsCountAggregateInputType | true
    _avg?: CalcSettingsAvgAggregateInputType
    _sum?: CalcSettingsSumAggregateInputType
    _min?: CalcSettingsMinAggregateInputType
    _max?: CalcSettingsMaxAggregateInputType
  }

  export type CalcSettingsGroupByOutputType = {
    id: number
    callOutThreshold: number
    callOutFeeMin: number
    callOutFeeMax: number
    urgencyMultiplier: number
    emergencyMultiplier: number
    projectTrigger: number
    projectFeePercent: number
    _count: CalcSettingsCountAggregateOutputType | null
    _avg: CalcSettingsAvgAggregateOutputType | null
    _sum: CalcSettingsSumAggregateOutputType | null
    _min: CalcSettingsMinAggregateOutputType | null
    _max: CalcSettingsMaxAggregateOutputType | null
  }

  type GetCalcSettingsGroupByPayload<T extends CalcSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalcSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalcSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalcSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], CalcSettingsGroupByOutputType[P]>
        }
      >
    >


  export type CalcSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    callOutThreshold?: boolean
    callOutFeeMin?: boolean
    callOutFeeMax?: boolean
    urgencyMultiplier?: boolean
    emergencyMultiplier?: boolean
    projectTrigger?: boolean
    projectFeePercent?: boolean
  }, ExtArgs["result"]["calcSettings"]>

  export type CalcSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    callOutThreshold?: boolean
    callOutFeeMin?: boolean
    callOutFeeMax?: boolean
    urgencyMultiplier?: boolean
    emergencyMultiplier?: boolean
    projectTrigger?: boolean
    projectFeePercent?: boolean
  }, ExtArgs["result"]["calcSettings"]>

  export type CalcSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    callOutThreshold?: boolean
    callOutFeeMin?: boolean
    callOutFeeMax?: boolean
    urgencyMultiplier?: boolean
    emergencyMultiplier?: boolean
    projectTrigger?: boolean
    projectFeePercent?: boolean
  }, ExtArgs["result"]["calcSettings"]>

  export type CalcSettingsSelectScalar = {
    id?: boolean
    callOutThreshold?: boolean
    callOutFeeMin?: boolean
    callOutFeeMax?: boolean
    urgencyMultiplier?: boolean
    emergencyMultiplier?: boolean
    projectTrigger?: boolean
    projectFeePercent?: boolean
  }

  export type CalcSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "callOutThreshold" | "callOutFeeMin" | "callOutFeeMax" | "urgencyMultiplier" | "emergencyMultiplier" | "projectTrigger" | "projectFeePercent", ExtArgs["result"]["calcSettings"]>

  export type $CalcSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalcSettings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      callOutThreshold: number
      callOutFeeMin: number
      callOutFeeMax: number
      urgencyMultiplier: number
      emergencyMultiplier: number
      projectTrigger: number
      projectFeePercent: number
    }, ExtArgs["result"]["calcSettings"]>
    composites: {}
  }

  type CalcSettingsGetPayload<S extends boolean | null | undefined | CalcSettingsDefaultArgs> = $Result.GetResult<Prisma.$CalcSettingsPayload, S>

  type CalcSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalcSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalcSettingsCountAggregateInputType | true
    }

  export interface CalcSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalcSettings'], meta: { name: 'CalcSettings' } }
    /**
     * Find zero or one CalcSettings that matches the filter.
     * @param {CalcSettingsFindUniqueArgs} args - Arguments to find a CalcSettings
     * @example
     * // Get one CalcSettings
     * const calcSettings = await prisma.calcSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalcSettingsFindUniqueArgs>(args: SelectSubset<T, CalcSettingsFindUniqueArgs<ExtArgs>>): Prisma__CalcSettingsClient<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CalcSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalcSettingsFindUniqueOrThrowArgs} args - Arguments to find a CalcSettings
     * @example
     * // Get one CalcSettings
     * const calcSettings = await prisma.calcSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalcSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, CalcSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalcSettingsClient<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcSettingsFindFirstArgs} args - Arguments to find a CalcSettings
     * @example
     * // Get one CalcSettings
     * const calcSettings = await prisma.calcSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalcSettingsFindFirstArgs>(args?: SelectSubset<T, CalcSettingsFindFirstArgs<ExtArgs>>): Prisma__CalcSettingsClient<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcSettingsFindFirstOrThrowArgs} args - Arguments to find a CalcSettings
     * @example
     * // Get one CalcSettings
     * const calcSettings = await prisma.calcSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalcSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, CalcSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalcSettingsClient<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CalcSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalcSettings
     * const calcSettings = await prisma.calcSettings.findMany()
     * 
     * // Get first 10 CalcSettings
     * const calcSettings = await prisma.calcSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calcSettingsWithIdOnly = await prisma.calcSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalcSettingsFindManyArgs>(args?: SelectSubset<T, CalcSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CalcSettings.
     * @param {CalcSettingsCreateArgs} args - Arguments to create a CalcSettings.
     * @example
     * // Create one CalcSettings
     * const CalcSettings = await prisma.calcSettings.create({
     *   data: {
     *     // ... data to create a CalcSettings
     *   }
     * })
     * 
     */
    create<T extends CalcSettingsCreateArgs>(args: SelectSubset<T, CalcSettingsCreateArgs<ExtArgs>>): Prisma__CalcSettingsClient<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CalcSettings.
     * @param {CalcSettingsCreateManyArgs} args - Arguments to create many CalcSettings.
     * @example
     * // Create many CalcSettings
     * const calcSettings = await prisma.calcSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalcSettingsCreateManyArgs>(args?: SelectSubset<T, CalcSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalcSettings and returns the data saved in the database.
     * @param {CalcSettingsCreateManyAndReturnArgs} args - Arguments to create many CalcSettings.
     * @example
     * // Create many CalcSettings
     * const calcSettings = await prisma.calcSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalcSettings and only return the `id`
     * const calcSettingsWithIdOnly = await prisma.calcSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalcSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, CalcSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CalcSettings.
     * @param {CalcSettingsDeleteArgs} args - Arguments to delete one CalcSettings.
     * @example
     * // Delete one CalcSettings
     * const CalcSettings = await prisma.calcSettings.delete({
     *   where: {
     *     // ... filter to delete one CalcSettings
     *   }
     * })
     * 
     */
    delete<T extends CalcSettingsDeleteArgs>(args: SelectSubset<T, CalcSettingsDeleteArgs<ExtArgs>>): Prisma__CalcSettingsClient<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CalcSettings.
     * @param {CalcSettingsUpdateArgs} args - Arguments to update one CalcSettings.
     * @example
     * // Update one CalcSettings
     * const calcSettings = await prisma.calcSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalcSettingsUpdateArgs>(args: SelectSubset<T, CalcSettingsUpdateArgs<ExtArgs>>): Prisma__CalcSettingsClient<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CalcSettings.
     * @param {CalcSettingsDeleteManyArgs} args - Arguments to filter CalcSettings to delete.
     * @example
     * // Delete a few CalcSettings
     * const { count } = await prisma.calcSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalcSettingsDeleteManyArgs>(args?: SelectSubset<T, CalcSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalcSettings
     * const calcSettings = await prisma.calcSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalcSettingsUpdateManyArgs>(args: SelectSubset<T, CalcSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcSettings and returns the data updated in the database.
     * @param {CalcSettingsUpdateManyAndReturnArgs} args - Arguments to update many CalcSettings.
     * @example
     * // Update many CalcSettings
     * const calcSettings = await prisma.calcSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalcSettings and only return the `id`
     * const calcSettingsWithIdOnly = await prisma.calcSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalcSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, CalcSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CalcSettings.
     * @param {CalcSettingsUpsertArgs} args - Arguments to update or create a CalcSettings.
     * @example
     * // Update or create a CalcSettings
     * const calcSettings = await prisma.calcSettings.upsert({
     *   create: {
     *     // ... data to create a CalcSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalcSettings we want to update
     *   }
     * })
     */
    upsert<T extends CalcSettingsUpsertArgs>(args: SelectSubset<T, CalcSettingsUpsertArgs<ExtArgs>>): Prisma__CalcSettingsClient<$Result.GetResult<Prisma.$CalcSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CalcSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcSettingsCountArgs} args - Arguments to filter CalcSettings to count.
     * @example
     * // Count the number of CalcSettings
     * const count = await prisma.calcSettings.count({
     *   where: {
     *     // ... the filter for the CalcSettings we want to count
     *   }
     * })
    **/
    count<T extends CalcSettingsCountArgs>(
      args?: Subset<T, CalcSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalcSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalcSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalcSettingsAggregateArgs>(args: Subset<T, CalcSettingsAggregateArgs>): Prisma.PrismaPromise<GetCalcSettingsAggregateType<T>>

    /**
     * Group by CalcSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalcSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalcSettingsGroupByArgs['orderBy'] }
        : { orderBy?: CalcSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalcSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalcSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalcSettings model
   */
  readonly fields: CalcSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalcSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalcSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalcSettings model
   */
  interface CalcSettingsFieldRefs {
    readonly id: FieldRef<"CalcSettings", 'Int'>
    readonly callOutThreshold: FieldRef<"CalcSettings", 'Float'>
    readonly callOutFeeMin: FieldRef<"CalcSettings", 'Float'>
    readonly callOutFeeMax: FieldRef<"CalcSettings", 'Float'>
    readonly urgencyMultiplier: FieldRef<"CalcSettings", 'Float'>
    readonly emergencyMultiplier: FieldRef<"CalcSettings", 'Float'>
    readonly projectTrigger: FieldRef<"CalcSettings", 'Float'>
    readonly projectFeePercent: FieldRef<"CalcSettings", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * CalcSettings findUnique
   */
  export type CalcSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * Filter, which CalcSettings to fetch.
     */
    where: CalcSettingsWhereUniqueInput
  }

  /**
   * CalcSettings findUniqueOrThrow
   */
  export type CalcSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * Filter, which CalcSettings to fetch.
     */
    where: CalcSettingsWhereUniqueInput
  }

  /**
   * CalcSettings findFirst
   */
  export type CalcSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * Filter, which CalcSettings to fetch.
     */
    where?: CalcSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcSettings to fetch.
     */
    orderBy?: CalcSettingsOrderByWithRelationInput | CalcSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcSettings.
     */
    cursor?: CalcSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcSettings.
     */
    distinct?: CalcSettingsScalarFieldEnum | CalcSettingsScalarFieldEnum[]
  }

  /**
   * CalcSettings findFirstOrThrow
   */
  export type CalcSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * Filter, which CalcSettings to fetch.
     */
    where?: CalcSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcSettings to fetch.
     */
    orderBy?: CalcSettingsOrderByWithRelationInput | CalcSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcSettings.
     */
    cursor?: CalcSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcSettings.
     */
    distinct?: CalcSettingsScalarFieldEnum | CalcSettingsScalarFieldEnum[]
  }

  /**
   * CalcSettings findMany
   */
  export type CalcSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * Filter, which CalcSettings to fetch.
     */
    where?: CalcSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcSettings to fetch.
     */
    orderBy?: CalcSettingsOrderByWithRelationInput | CalcSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalcSettings.
     */
    cursor?: CalcSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcSettings.
     */
    skip?: number
    distinct?: CalcSettingsScalarFieldEnum | CalcSettingsScalarFieldEnum[]
  }

  /**
   * CalcSettings create
   */
  export type CalcSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a CalcSettings.
     */
    data?: XOR<CalcSettingsCreateInput, CalcSettingsUncheckedCreateInput>
  }

  /**
   * CalcSettings createMany
   */
  export type CalcSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalcSettings.
     */
    data: CalcSettingsCreateManyInput | CalcSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalcSettings createManyAndReturn
   */
  export type CalcSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many CalcSettings.
     */
    data: CalcSettingsCreateManyInput | CalcSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalcSettings update
   */
  export type CalcSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a CalcSettings.
     */
    data: XOR<CalcSettingsUpdateInput, CalcSettingsUncheckedUpdateInput>
    /**
     * Choose, which CalcSettings to update.
     */
    where: CalcSettingsWhereUniqueInput
  }

  /**
   * CalcSettings updateMany
   */
  export type CalcSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalcSettings.
     */
    data: XOR<CalcSettingsUpdateManyMutationInput, CalcSettingsUncheckedUpdateManyInput>
    /**
     * Filter which CalcSettings to update
     */
    where?: CalcSettingsWhereInput
    /**
     * Limit how many CalcSettings to update.
     */
    limit?: number
  }

  /**
   * CalcSettings updateManyAndReturn
   */
  export type CalcSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * The data used to update CalcSettings.
     */
    data: XOR<CalcSettingsUpdateManyMutationInput, CalcSettingsUncheckedUpdateManyInput>
    /**
     * Filter which CalcSettings to update
     */
    where?: CalcSettingsWhereInput
    /**
     * Limit how many CalcSettings to update.
     */
    limit?: number
  }

  /**
   * CalcSettings upsert
   */
  export type CalcSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the CalcSettings to update in case it exists.
     */
    where: CalcSettingsWhereUniqueInput
    /**
     * In case the CalcSettings found by the `where` argument doesn't exist, create a new CalcSettings with this data.
     */
    create: XOR<CalcSettingsCreateInput, CalcSettingsUncheckedCreateInput>
    /**
     * In case the CalcSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalcSettingsUpdateInput, CalcSettingsUncheckedUpdateInput>
  }

  /**
   * CalcSettings delete
   */
  export type CalcSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
    /**
     * Filter which CalcSettings to delete.
     */
    where: CalcSettingsWhereUniqueInput
  }

  /**
   * CalcSettings deleteMany
   */
  export type CalcSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcSettings to delete
     */
    where?: CalcSettingsWhereInput
    /**
     * Limit how many CalcSettings to delete.
     */
    limit?: number
  }

  /**
   * CalcSettings without action
   */
  export type CalcSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcSettings
     */
    select?: CalcSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcSettings
     */
    omit?: CalcSettingsOmit<ExtArgs> | null
  }


  /**
   * Model CalcRequest
   */

  export type AggregateCalcRequest = {
    _count: CalcRequestCountAggregateOutputType | null
    _avg: CalcRequestAvgAggregateOutputType | null
    _sum: CalcRequestSumAggregateOutputType | null
    _min: CalcRequestMinAggregateOutputType | null
    _max: CalcRequestMaxAggregateOutputType | null
  }

  export type CalcRequestAvgAggregateOutputType = {
    id: number | null
    estimateMin: number | null
    estimateMax: number | null
  }

  export type CalcRequestSumAggregateOutputType = {
    id: number | null
    estimateMin: number | null
    estimateMax: number | null
  }

  export type CalcRequestMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    postcode: string | null
    categorySlug: string | null
    urgency: string | null
    estimateMin: number | null
    estimateMax: number | null
    createdAt: Date | null
  }

  export type CalcRequestMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    postcode: string | null
    categorySlug: string | null
    urgency: string | null
    estimateMin: number | null
    estimateMax: number | null
    createdAt: Date | null
  }

  export type CalcRequestCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    postcode: number
    categorySlug: number
    data: number
    urgency: number
    estimateMin: number
    estimateMax: number
    createdAt: number
    _all: number
  }


  export type CalcRequestAvgAggregateInputType = {
    id?: true
    estimateMin?: true
    estimateMax?: true
  }

  export type CalcRequestSumAggregateInputType = {
    id?: true
    estimateMin?: true
    estimateMax?: true
  }

  export type CalcRequestMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    postcode?: true
    categorySlug?: true
    urgency?: true
    estimateMin?: true
    estimateMax?: true
    createdAt?: true
  }

  export type CalcRequestMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    postcode?: true
    categorySlug?: true
    urgency?: true
    estimateMin?: true
    estimateMax?: true
    createdAt?: true
  }

  export type CalcRequestCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    postcode?: true
    categorySlug?: true
    data?: true
    urgency?: true
    estimateMin?: true
    estimateMax?: true
    createdAt?: true
    _all?: true
  }

  export type CalcRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcRequest to aggregate.
     */
    where?: CalcRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcRequests to fetch.
     */
    orderBy?: CalcRequestOrderByWithRelationInput | CalcRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalcRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalcRequests
    **/
    _count?: true | CalcRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalcRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalcRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalcRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalcRequestMaxAggregateInputType
  }

  export type GetCalcRequestAggregateType<T extends CalcRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateCalcRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalcRequest[P]>
      : GetScalarType<T[P], AggregateCalcRequest[P]>
  }




  export type CalcRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalcRequestWhereInput
    orderBy?: CalcRequestOrderByWithAggregationInput | CalcRequestOrderByWithAggregationInput[]
    by: CalcRequestScalarFieldEnum[] | CalcRequestScalarFieldEnum
    having?: CalcRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalcRequestCountAggregateInputType | true
    _avg?: CalcRequestAvgAggregateInputType
    _sum?: CalcRequestSumAggregateInputType
    _min?: CalcRequestMinAggregateInputType
    _max?: CalcRequestMaxAggregateInputType
  }

  export type CalcRequestGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string
    postcode: string
    categorySlug: string
    data: JsonValue
    urgency: string
    estimateMin: number
    estimateMax: number
    createdAt: Date
    _count: CalcRequestCountAggregateOutputType | null
    _avg: CalcRequestAvgAggregateOutputType | null
    _sum: CalcRequestSumAggregateOutputType | null
    _min: CalcRequestMinAggregateOutputType | null
    _max: CalcRequestMaxAggregateOutputType | null
  }

  type GetCalcRequestGroupByPayload<T extends CalcRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalcRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalcRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalcRequestGroupByOutputType[P]>
            : GetScalarType<T[P], CalcRequestGroupByOutputType[P]>
        }
      >
    >


  export type CalcRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    postcode?: boolean
    categorySlug?: boolean
    data?: boolean
    urgency?: boolean
    estimateMin?: boolean
    estimateMax?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["calcRequest"]>

  export type CalcRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    postcode?: boolean
    categorySlug?: boolean
    data?: boolean
    urgency?: boolean
    estimateMin?: boolean
    estimateMax?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["calcRequest"]>

  export type CalcRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    postcode?: boolean
    categorySlug?: boolean
    data?: boolean
    urgency?: boolean
    estimateMin?: boolean
    estimateMax?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["calcRequest"]>

  export type CalcRequestSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    postcode?: boolean
    categorySlug?: boolean
    data?: boolean
    urgency?: boolean
    estimateMin?: boolean
    estimateMax?: boolean
    createdAt?: boolean
  }

  export type CalcRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "postcode" | "categorySlug" | "data" | "urgency" | "estimateMin" | "estimateMax" | "createdAt", ExtArgs["result"]["calcRequest"]>

  export type $CalcRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalcRequest"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string
      postcode: string
      categorySlug: string
      data: Prisma.JsonValue
      urgency: string
      estimateMin: number
      estimateMax: number
      createdAt: Date
    }, ExtArgs["result"]["calcRequest"]>
    composites: {}
  }

  type CalcRequestGetPayload<S extends boolean | null | undefined | CalcRequestDefaultArgs> = $Result.GetResult<Prisma.$CalcRequestPayload, S>

  type CalcRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalcRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalcRequestCountAggregateInputType | true
    }

  export interface CalcRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalcRequest'], meta: { name: 'CalcRequest' } }
    /**
     * Find zero or one CalcRequest that matches the filter.
     * @param {CalcRequestFindUniqueArgs} args - Arguments to find a CalcRequest
     * @example
     * // Get one CalcRequest
     * const calcRequest = await prisma.calcRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalcRequestFindUniqueArgs>(args: SelectSubset<T, CalcRequestFindUniqueArgs<ExtArgs>>): Prisma__CalcRequestClient<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CalcRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalcRequestFindUniqueOrThrowArgs} args - Arguments to find a CalcRequest
     * @example
     * // Get one CalcRequest
     * const calcRequest = await prisma.calcRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalcRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, CalcRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalcRequestClient<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcRequestFindFirstArgs} args - Arguments to find a CalcRequest
     * @example
     * // Get one CalcRequest
     * const calcRequest = await prisma.calcRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalcRequestFindFirstArgs>(args?: SelectSubset<T, CalcRequestFindFirstArgs<ExtArgs>>): Prisma__CalcRequestClient<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcRequestFindFirstOrThrowArgs} args - Arguments to find a CalcRequest
     * @example
     * // Get one CalcRequest
     * const calcRequest = await prisma.calcRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalcRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, CalcRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalcRequestClient<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CalcRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalcRequests
     * const calcRequests = await prisma.calcRequest.findMany()
     * 
     * // Get first 10 CalcRequests
     * const calcRequests = await prisma.calcRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calcRequestWithIdOnly = await prisma.calcRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalcRequestFindManyArgs>(args?: SelectSubset<T, CalcRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CalcRequest.
     * @param {CalcRequestCreateArgs} args - Arguments to create a CalcRequest.
     * @example
     * // Create one CalcRequest
     * const CalcRequest = await prisma.calcRequest.create({
     *   data: {
     *     // ... data to create a CalcRequest
     *   }
     * })
     * 
     */
    create<T extends CalcRequestCreateArgs>(args: SelectSubset<T, CalcRequestCreateArgs<ExtArgs>>): Prisma__CalcRequestClient<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CalcRequests.
     * @param {CalcRequestCreateManyArgs} args - Arguments to create many CalcRequests.
     * @example
     * // Create many CalcRequests
     * const calcRequest = await prisma.calcRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalcRequestCreateManyArgs>(args?: SelectSubset<T, CalcRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalcRequests and returns the data saved in the database.
     * @param {CalcRequestCreateManyAndReturnArgs} args - Arguments to create many CalcRequests.
     * @example
     * // Create many CalcRequests
     * const calcRequest = await prisma.calcRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalcRequests and only return the `id`
     * const calcRequestWithIdOnly = await prisma.calcRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalcRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, CalcRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CalcRequest.
     * @param {CalcRequestDeleteArgs} args - Arguments to delete one CalcRequest.
     * @example
     * // Delete one CalcRequest
     * const CalcRequest = await prisma.calcRequest.delete({
     *   where: {
     *     // ... filter to delete one CalcRequest
     *   }
     * })
     * 
     */
    delete<T extends CalcRequestDeleteArgs>(args: SelectSubset<T, CalcRequestDeleteArgs<ExtArgs>>): Prisma__CalcRequestClient<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CalcRequest.
     * @param {CalcRequestUpdateArgs} args - Arguments to update one CalcRequest.
     * @example
     * // Update one CalcRequest
     * const calcRequest = await prisma.calcRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalcRequestUpdateArgs>(args: SelectSubset<T, CalcRequestUpdateArgs<ExtArgs>>): Prisma__CalcRequestClient<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CalcRequests.
     * @param {CalcRequestDeleteManyArgs} args - Arguments to filter CalcRequests to delete.
     * @example
     * // Delete a few CalcRequests
     * const { count } = await prisma.calcRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalcRequestDeleteManyArgs>(args?: SelectSubset<T, CalcRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalcRequests
     * const calcRequest = await prisma.calcRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalcRequestUpdateManyArgs>(args: SelectSubset<T, CalcRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcRequests and returns the data updated in the database.
     * @param {CalcRequestUpdateManyAndReturnArgs} args - Arguments to update many CalcRequests.
     * @example
     * // Update many CalcRequests
     * const calcRequest = await prisma.calcRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalcRequests and only return the `id`
     * const calcRequestWithIdOnly = await prisma.calcRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalcRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, CalcRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CalcRequest.
     * @param {CalcRequestUpsertArgs} args - Arguments to update or create a CalcRequest.
     * @example
     * // Update or create a CalcRequest
     * const calcRequest = await prisma.calcRequest.upsert({
     *   create: {
     *     // ... data to create a CalcRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalcRequest we want to update
     *   }
     * })
     */
    upsert<T extends CalcRequestUpsertArgs>(args: SelectSubset<T, CalcRequestUpsertArgs<ExtArgs>>): Prisma__CalcRequestClient<$Result.GetResult<Prisma.$CalcRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CalcRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcRequestCountArgs} args - Arguments to filter CalcRequests to count.
     * @example
     * // Count the number of CalcRequests
     * const count = await prisma.calcRequest.count({
     *   where: {
     *     // ... the filter for the CalcRequests we want to count
     *   }
     * })
    **/
    count<T extends CalcRequestCountArgs>(
      args?: Subset<T, CalcRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalcRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalcRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalcRequestAggregateArgs>(args: Subset<T, CalcRequestAggregateArgs>): Prisma.PrismaPromise<GetCalcRequestAggregateType<T>>

    /**
     * Group by CalcRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalcRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalcRequestGroupByArgs['orderBy'] }
        : { orderBy?: CalcRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalcRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalcRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalcRequest model
   */
  readonly fields: CalcRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalcRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalcRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalcRequest model
   */
  interface CalcRequestFieldRefs {
    readonly id: FieldRef<"CalcRequest", 'Int'>
    readonly name: FieldRef<"CalcRequest", 'String'>
    readonly email: FieldRef<"CalcRequest", 'String'>
    readonly phone: FieldRef<"CalcRequest", 'String'>
    readonly postcode: FieldRef<"CalcRequest", 'String'>
    readonly categorySlug: FieldRef<"CalcRequest", 'String'>
    readonly data: FieldRef<"CalcRequest", 'Json'>
    readonly urgency: FieldRef<"CalcRequest", 'String'>
    readonly estimateMin: FieldRef<"CalcRequest", 'Float'>
    readonly estimateMax: FieldRef<"CalcRequest", 'Float'>
    readonly createdAt: FieldRef<"CalcRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CalcRequest findUnique
   */
  export type CalcRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * Filter, which CalcRequest to fetch.
     */
    where: CalcRequestWhereUniqueInput
  }

  /**
   * CalcRequest findUniqueOrThrow
   */
  export type CalcRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * Filter, which CalcRequest to fetch.
     */
    where: CalcRequestWhereUniqueInput
  }

  /**
   * CalcRequest findFirst
   */
  export type CalcRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * Filter, which CalcRequest to fetch.
     */
    where?: CalcRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcRequests to fetch.
     */
    orderBy?: CalcRequestOrderByWithRelationInput | CalcRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcRequests.
     */
    cursor?: CalcRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcRequests.
     */
    distinct?: CalcRequestScalarFieldEnum | CalcRequestScalarFieldEnum[]
  }

  /**
   * CalcRequest findFirstOrThrow
   */
  export type CalcRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * Filter, which CalcRequest to fetch.
     */
    where?: CalcRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcRequests to fetch.
     */
    orderBy?: CalcRequestOrderByWithRelationInput | CalcRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcRequests.
     */
    cursor?: CalcRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcRequests.
     */
    distinct?: CalcRequestScalarFieldEnum | CalcRequestScalarFieldEnum[]
  }

  /**
   * CalcRequest findMany
   */
  export type CalcRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * Filter, which CalcRequests to fetch.
     */
    where?: CalcRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcRequests to fetch.
     */
    orderBy?: CalcRequestOrderByWithRelationInput | CalcRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalcRequests.
     */
    cursor?: CalcRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcRequests.
     */
    skip?: number
    distinct?: CalcRequestScalarFieldEnum | CalcRequestScalarFieldEnum[]
  }

  /**
   * CalcRequest create
   */
  export type CalcRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * The data needed to create a CalcRequest.
     */
    data: XOR<CalcRequestCreateInput, CalcRequestUncheckedCreateInput>
  }

  /**
   * CalcRequest createMany
   */
  export type CalcRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalcRequests.
     */
    data: CalcRequestCreateManyInput | CalcRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalcRequest createManyAndReturn
   */
  export type CalcRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * The data used to create many CalcRequests.
     */
    data: CalcRequestCreateManyInput | CalcRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalcRequest update
   */
  export type CalcRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * The data needed to update a CalcRequest.
     */
    data: XOR<CalcRequestUpdateInput, CalcRequestUncheckedUpdateInput>
    /**
     * Choose, which CalcRequest to update.
     */
    where: CalcRequestWhereUniqueInput
  }

  /**
   * CalcRequest updateMany
   */
  export type CalcRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalcRequests.
     */
    data: XOR<CalcRequestUpdateManyMutationInput, CalcRequestUncheckedUpdateManyInput>
    /**
     * Filter which CalcRequests to update
     */
    where?: CalcRequestWhereInput
    /**
     * Limit how many CalcRequests to update.
     */
    limit?: number
  }

  /**
   * CalcRequest updateManyAndReturn
   */
  export type CalcRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * The data used to update CalcRequests.
     */
    data: XOR<CalcRequestUpdateManyMutationInput, CalcRequestUncheckedUpdateManyInput>
    /**
     * Filter which CalcRequests to update
     */
    where?: CalcRequestWhereInput
    /**
     * Limit how many CalcRequests to update.
     */
    limit?: number
  }

  /**
   * CalcRequest upsert
   */
  export type CalcRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * The filter to search for the CalcRequest to update in case it exists.
     */
    where: CalcRequestWhereUniqueInput
    /**
     * In case the CalcRequest found by the `where` argument doesn't exist, create a new CalcRequest with this data.
     */
    create: XOR<CalcRequestCreateInput, CalcRequestUncheckedCreateInput>
    /**
     * In case the CalcRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalcRequestUpdateInput, CalcRequestUncheckedUpdateInput>
  }

  /**
   * CalcRequest delete
   */
  export type CalcRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
    /**
     * Filter which CalcRequest to delete.
     */
    where: CalcRequestWhereUniqueInput
  }

  /**
   * CalcRequest deleteMany
   */
  export type CalcRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcRequests to delete
     */
    where?: CalcRequestWhereInput
    /**
     * Limit how many CalcRequests to delete.
     */
    limit?: number
  }

  /**
   * CalcRequest without action
   */
  export type CalcRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcRequest
     */
    select?: CalcRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcRequest
     */
    omit?: CalcRequestOmit<ExtArgs> | null
  }


  /**
   * Model CalcProjectType
   */

  export type AggregateCalcProjectType = {
    _count: CalcProjectTypeCountAggregateOutputType | null
    _avg: CalcProjectTypeAvgAggregateOutputType | null
    _sum: CalcProjectTypeSumAggregateOutputType | null
    _min: CalcProjectTypeMinAggregateOutputType | null
    _max: CalcProjectTypeMaxAggregateOutputType | null
  }

  export type CalcProjectTypeAvgAggregateOutputType = {
    id: number | null
    sortOrder: number | null
  }

  export type CalcProjectTypeSumAggregateOutputType = {
    id: number | null
    sortOrder: number | null
  }

  export type CalcProjectTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    sortOrder: number | null
    createdAt: Date | null
  }

  export type CalcProjectTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    description: string | null
    sortOrder: number | null
    createdAt: Date | null
  }

  export type CalcProjectTypeCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    sortOrder: number
    createdAt: number
    _all: number
  }


  export type CalcProjectTypeAvgAggregateInputType = {
    id?: true
    sortOrder?: true
  }

  export type CalcProjectTypeSumAggregateInputType = {
    id?: true
    sortOrder?: true
  }

  export type CalcProjectTypeMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    sortOrder?: true
    createdAt?: true
  }

  export type CalcProjectTypeMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    sortOrder?: true
    createdAt?: true
  }

  export type CalcProjectTypeCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    sortOrder?: true
    createdAt?: true
    _all?: true
  }

  export type CalcProjectTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcProjectType to aggregate.
     */
    where?: CalcProjectTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcProjectTypes to fetch.
     */
    orderBy?: CalcProjectTypeOrderByWithRelationInput | CalcProjectTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalcProjectTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcProjectTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcProjectTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalcProjectTypes
    **/
    _count?: true | CalcProjectTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalcProjectTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalcProjectTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalcProjectTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalcProjectTypeMaxAggregateInputType
  }

  export type GetCalcProjectTypeAggregateType<T extends CalcProjectTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateCalcProjectType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalcProjectType[P]>
      : GetScalarType<T[P], AggregateCalcProjectType[P]>
  }




  export type CalcProjectTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalcProjectTypeWhereInput
    orderBy?: CalcProjectTypeOrderByWithAggregationInput | CalcProjectTypeOrderByWithAggregationInput[]
    by: CalcProjectTypeScalarFieldEnum[] | CalcProjectTypeScalarFieldEnum
    having?: CalcProjectTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalcProjectTypeCountAggregateInputType | true
    _avg?: CalcProjectTypeAvgAggregateInputType
    _sum?: CalcProjectTypeSumAggregateInputType
    _min?: CalcProjectTypeMinAggregateInputType
    _max?: CalcProjectTypeMaxAggregateInputType
  }

  export type CalcProjectTypeGroupByOutputType = {
    id: number
    name: string
    slug: string
    description: string | null
    sortOrder: number
    createdAt: Date
    _count: CalcProjectTypeCountAggregateOutputType | null
    _avg: CalcProjectTypeAvgAggregateOutputType | null
    _sum: CalcProjectTypeSumAggregateOutputType | null
    _min: CalcProjectTypeMinAggregateOutputType | null
    _max: CalcProjectTypeMaxAggregateOutputType | null
  }

  type GetCalcProjectTypeGroupByPayload<T extends CalcProjectTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalcProjectTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalcProjectTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalcProjectTypeGroupByOutputType[P]>
            : GetScalarType<T[P], CalcProjectTypeGroupByOutputType[P]>
        }
      >
    >


  export type CalcProjectTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    sortOrder?: boolean
    createdAt?: boolean
    categories?: boolean | CalcProjectType$categoriesArgs<ExtArgs>
    _count?: boolean | CalcProjectTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calcProjectType"]>

  export type CalcProjectTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    sortOrder?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["calcProjectType"]>

  export type CalcProjectTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    sortOrder?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["calcProjectType"]>

  export type CalcProjectTypeSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    sortOrder?: boolean
    createdAt?: boolean
  }

  export type CalcProjectTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "sortOrder" | "createdAt", ExtArgs["result"]["calcProjectType"]>
  export type CalcProjectTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | CalcProjectType$categoriesArgs<ExtArgs>
    _count?: boolean | CalcProjectTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CalcProjectTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CalcProjectTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CalcProjectTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalcProjectType"
    objects: {
      categories: Prisma.$CalcCategoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      description: string | null
      sortOrder: number
      createdAt: Date
    }, ExtArgs["result"]["calcProjectType"]>
    composites: {}
  }

  type CalcProjectTypeGetPayload<S extends boolean | null | undefined | CalcProjectTypeDefaultArgs> = $Result.GetResult<Prisma.$CalcProjectTypePayload, S>

  type CalcProjectTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalcProjectTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalcProjectTypeCountAggregateInputType | true
    }

  export interface CalcProjectTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalcProjectType'], meta: { name: 'CalcProjectType' } }
    /**
     * Find zero or one CalcProjectType that matches the filter.
     * @param {CalcProjectTypeFindUniqueArgs} args - Arguments to find a CalcProjectType
     * @example
     * // Get one CalcProjectType
     * const calcProjectType = await prisma.calcProjectType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalcProjectTypeFindUniqueArgs>(args: SelectSubset<T, CalcProjectTypeFindUniqueArgs<ExtArgs>>): Prisma__CalcProjectTypeClient<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CalcProjectType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalcProjectTypeFindUniqueOrThrowArgs} args - Arguments to find a CalcProjectType
     * @example
     * // Get one CalcProjectType
     * const calcProjectType = await prisma.calcProjectType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalcProjectTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, CalcProjectTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalcProjectTypeClient<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcProjectType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcProjectTypeFindFirstArgs} args - Arguments to find a CalcProjectType
     * @example
     * // Get one CalcProjectType
     * const calcProjectType = await prisma.calcProjectType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalcProjectTypeFindFirstArgs>(args?: SelectSubset<T, CalcProjectTypeFindFirstArgs<ExtArgs>>): Prisma__CalcProjectTypeClient<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcProjectType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcProjectTypeFindFirstOrThrowArgs} args - Arguments to find a CalcProjectType
     * @example
     * // Get one CalcProjectType
     * const calcProjectType = await prisma.calcProjectType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalcProjectTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, CalcProjectTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalcProjectTypeClient<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CalcProjectTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcProjectTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalcProjectTypes
     * const calcProjectTypes = await prisma.calcProjectType.findMany()
     * 
     * // Get first 10 CalcProjectTypes
     * const calcProjectTypes = await prisma.calcProjectType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calcProjectTypeWithIdOnly = await prisma.calcProjectType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalcProjectTypeFindManyArgs>(args?: SelectSubset<T, CalcProjectTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CalcProjectType.
     * @param {CalcProjectTypeCreateArgs} args - Arguments to create a CalcProjectType.
     * @example
     * // Create one CalcProjectType
     * const CalcProjectType = await prisma.calcProjectType.create({
     *   data: {
     *     // ... data to create a CalcProjectType
     *   }
     * })
     * 
     */
    create<T extends CalcProjectTypeCreateArgs>(args: SelectSubset<T, CalcProjectTypeCreateArgs<ExtArgs>>): Prisma__CalcProjectTypeClient<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CalcProjectTypes.
     * @param {CalcProjectTypeCreateManyArgs} args - Arguments to create many CalcProjectTypes.
     * @example
     * // Create many CalcProjectTypes
     * const calcProjectType = await prisma.calcProjectType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalcProjectTypeCreateManyArgs>(args?: SelectSubset<T, CalcProjectTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalcProjectTypes and returns the data saved in the database.
     * @param {CalcProjectTypeCreateManyAndReturnArgs} args - Arguments to create many CalcProjectTypes.
     * @example
     * // Create many CalcProjectTypes
     * const calcProjectType = await prisma.calcProjectType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalcProjectTypes and only return the `id`
     * const calcProjectTypeWithIdOnly = await prisma.calcProjectType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalcProjectTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, CalcProjectTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CalcProjectType.
     * @param {CalcProjectTypeDeleteArgs} args - Arguments to delete one CalcProjectType.
     * @example
     * // Delete one CalcProjectType
     * const CalcProjectType = await prisma.calcProjectType.delete({
     *   where: {
     *     // ... filter to delete one CalcProjectType
     *   }
     * })
     * 
     */
    delete<T extends CalcProjectTypeDeleteArgs>(args: SelectSubset<T, CalcProjectTypeDeleteArgs<ExtArgs>>): Prisma__CalcProjectTypeClient<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CalcProjectType.
     * @param {CalcProjectTypeUpdateArgs} args - Arguments to update one CalcProjectType.
     * @example
     * // Update one CalcProjectType
     * const calcProjectType = await prisma.calcProjectType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalcProjectTypeUpdateArgs>(args: SelectSubset<T, CalcProjectTypeUpdateArgs<ExtArgs>>): Prisma__CalcProjectTypeClient<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CalcProjectTypes.
     * @param {CalcProjectTypeDeleteManyArgs} args - Arguments to filter CalcProjectTypes to delete.
     * @example
     * // Delete a few CalcProjectTypes
     * const { count } = await prisma.calcProjectType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalcProjectTypeDeleteManyArgs>(args?: SelectSubset<T, CalcProjectTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcProjectTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcProjectTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalcProjectTypes
     * const calcProjectType = await prisma.calcProjectType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalcProjectTypeUpdateManyArgs>(args: SelectSubset<T, CalcProjectTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcProjectTypes and returns the data updated in the database.
     * @param {CalcProjectTypeUpdateManyAndReturnArgs} args - Arguments to update many CalcProjectTypes.
     * @example
     * // Update many CalcProjectTypes
     * const calcProjectType = await prisma.calcProjectType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalcProjectTypes and only return the `id`
     * const calcProjectTypeWithIdOnly = await prisma.calcProjectType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalcProjectTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, CalcProjectTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CalcProjectType.
     * @param {CalcProjectTypeUpsertArgs} args - Arguments to update or create a CalcProjectType.
     * @example
     * // Update or create a CalcProjectType
     * const calcProjectType = await prisma.calcProjectType.upsert({
     *   create: {
     *     // ... data to create a CalcProjectType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalcProjectType we want to update
     *   }
     * })
     */
    upsert<T extends CalcProjectTypeUpsertArgs>(args: SelectSubset<T, CalcProjectTypeUpsertArgs<ExtArgs>>): Prisma__CalcProjectTypeClient<$Result.GetResult<Prisma.$CalcProjectTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CalcProjectTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcProjectTypeCountArgs} args - Arguments to filter CalcProjectTypes to count.
     * @example
     * // Count the number of CalcProjectTypes
     * const count = await prisma.calcProjectType.count({
     *   where: {
     *     // ... the filter for the CalcProjectTypes we want to count
     *   }
     * })
    **/
    count<T extends CalcProjectTypeCountArgs>(
      args?: Subset<T, CalcProjectTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalcProjectTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalcProjectType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcProjectTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalcProjectTypeAggregateArgs>(args: Subset<T, CalcProjectTypeAggregateArgs>): Prisma.PrismaPromise<GetCalcProjectTypeAggregateType<T>>

    /**
     * Group by CalcProjectType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcProjectTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalcProjectTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalcProjectTypeGroupByArgs['orderBy'] }
        : { orderBy?: CalcProjectTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalcProjectTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalcProjectTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalcProjectType model
   */
  readonly fields: CalcProjectTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalcProjectType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalcProjectTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends CalcProjectType$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, CalcProjectType$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalcProjectType model
   */
  interface CalcProjectTypeFieldRefs {
    readonly id: FieldRef<"CalcProjectType", 'Int'>
    readonly name: FieldRef<"CalcProjectType", 'String'>
    readonly slug: FieldRef<"CalcProjectType", 'String'>
    readonly description: FieldRef<"CalcProjectType", 'String'>
    readonly sortOrder: FieldRef<"CalcProjectType", 'Int'>
    readonly createdAt: FieldRef<"CalcProjectType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CalcProjectType findUnique
   */
  export type CalcProjectTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which CalcProjectType to fetch.
     */
    where: CalcProjectTypeWhereUniqueInput
  }

  /**
   * CalcProjectType findUniqueOrThrow
   */
  export type CalcProjectTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which CalcProjectType to fetch.
     */
    where: CalcProjectTypeWhereUniqueInput
  }

  /**
   * CalcProjectType findFirst
   */
  export type CalcProjectTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which CalcProjectType to fetch.
     */
    where?: CalcProjectTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcProjectTypes to fetch.
     */
    orderBy?: CalcProjectTypeOrderByWithRelationInput | CalcProjectTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcProjectTypes.
     */
    cursor?: CalcProjectTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcProjectTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcProjectTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcProjectTypes.
     */
    distinct?: CalcProjectTypeScalarFieldEnum | CalcProjectTypeScalarFieldEnum[]
  }

  /**
   * CalcProjectType findFirstOrThrow
   */
  export type CalcProjectTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which CalcProjectType to fetch.
     */
    where?: CalcProjectTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcProjectTypes to fetch.
     */
    orderBy?: CalcProjectTypeOrderByWithRelationInput | CalcProjectTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcProjectTypes.
     */
    cursor?: CalcProjectTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcProjectTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcProjectTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcProjectTypes.
     */
    distinct?: CalcProjectTypeScalarFieldEnum | CalcProjectTypeScalarFieldEnum[]
  }

  /**
   * CalcProjectType findMany
   */
  export type CalcProjectTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    /**
     * Filter, which CalcProjectTypes to fetch.
     */
    where?: CalcProjectTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcProjectTypes to fetch.
     */
    orderBy?: CalcProjectTypeOrderByWithRelationInput | CalcProjectTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalcProjectTypes.
     */
    cursor?: CalcProjectTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcProjectTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcProjectTypes.
     */
    skip?: number
    distinct?: CalcProjectTypeScalarFieldEnum | CalcProjectTypeScalarFieldEnum[]
  }

  /**
   * CalcProjectType create
   */
  export type CalcProjectTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a CalcProjectType.
     */
    data: XOR<CalcProjectTypeCreateInput, CalcProjectTypeUncheckedCreateInput>
  }

  /**
   * CalcProjectType createMany
   */
  export type CalcProjectTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalcProjectTypes.
     */
    data: CalcProjectTypeCreateManyInput | CalcProjectTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalcProjectType createManyAndReturn
   */
  export type CalcProjectTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * The data used to create many CalcProjectTypes.
     */
    data: CalcProjectTypeCreateManyInput | CalcProjectTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalcProjectType update
   */
  export type CalcProjectTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a CalcProjectType.
     */
    data: XOR<CalcProjectTypeUpdateInput, CalcProjectTypeUncheckedUpdateInput>
    /**
     * Choose, which CalcProjectType to update.
     */
    where: CalcProjectTypeWhereUniqueInput
  }

  /**
   * CalcProjectType updateMany
   */
  export type CalcProjectTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalcProjectTypes.
     */
    data: XOR<CalcProjectTypeUpdateManyMutationInput, CalcProjectTypeUncheckedUpdateManyInput>
    /**
     * Filter which CalcProjectTypes to update
     */
    where?: CalcProjectTypeWhereInput
    /**
     * Limit how many CalcProjectTypes to update.
     */
    limit?: number
  }

  /**
   * CalcProjectType updateManyAndReturn
   */
  export type CalcProjectTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * The data used to update CalcProjectTypes.
     */
    data: XOR<CalcProjectTypeUpdateManyMutationInput, CalcProjectTypeUncheckedUpdateManyInput>
    /**
     * Filter which CalcProjectTypes to update
     */
    where?: CalcProjectTypeWhereInput
    /**
     * Limit how many CalcProjectTypes to update.
     */
    limit?: number
  }

  /**
   * CalcProjectType upsert
   */
  export type CalcProjectTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the CalcProjectType to update in case it exists.
     */
    where: CalcProjectTypeWhereUniqueInput
    /**
     * In case the CalcProjectType found by the `where` argument doesn't exist, create a new CalcProjectType with this data.
     */
    create: XOR<CalcProjectTypeCreateInput, CalcProjectTypeUncheckedCreateInput>
    /**
     * In case the CalcProjectType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalcProjectTypeUpdateInput, CalcProjectTypeUncheckedUpdateInput>
  }

  /**
   * CalcProjectType delete
   */
  export type CalcProjectTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
    /**
     * Filter which CalcProjectType to delete.
     */
    where: CalcProjectTypeWhereUniqueInput
  }

  /**
   * CalcProjectType deleteMany
   */
  export type CalcProjectTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcProjectTypes to delete
     */
    where?: CalcProjectTypeWhereInput
    /**
     * Limit how many CalcProjectTypes to delete.
     */
    limit?: number
  }

  /**
   * CalcProjectType.categories
   */
  export type CalcProjectType$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCategory
     */
    select?: CalcCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCategory
     */
    omit?: CalcCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcCategoryInclude<ExtArgs> | null
    where?: CalcCategoryWhereInput
    orderBy?: CalcCategoryOrderByWithRelationInput | CalcCategoryOrderByWithRelationInput[]
    cursor?: CalcCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalcCategoryScalarFieldEnum | CalcCategoryScalarFieldEnum[]
  }

  /**
   * CalcProjectType without action
   */
  export type CalcProjectTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcProjectType
     */
    select?: CalcProjectTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcProjectType
     */
    omit?: CalcProjectTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcProjectTypeInclude<ExtArgs> | null
  }


  /**
   * Model CalcCondition
   */

  export type AggregateCalcCondition = {
    _count: CalcConditionCountAggregateOutputType | null
    _avg: CalcConditionAvgAggregateOutputType | null
    _sum: CalcConditionSumAggregateOutputType | null
    _min: CalcConditionMinAggregateOutputType | null
    _max: CalcConditionMaxAggregateOutputType | null
  }

  export type CalcConditionAvgAggregateOutputType = {
    id: number | null
    itemId: number | null
    multiplier: number | null
  }

  export type CalcConditionSumAggregateOutputType = {
    id: number | null
    itemId: number | null
    multiplier: number | null
  }

  export type CalcConditionMinAggregateOutputType = {
    id: number | null
    itemId: number | null
    label: string | null
    description: string | null
    multiplier: number | null
    isDefault: boolean | null
  }

  export type CalcConditionMaxAggregateOutputType = {
    id: number | null
    itemId: number | null
    label: string | null
    description: string | null
    multiplier: number | null
    isDefault: boolean | null
  }

  export type CalcConditionCountAggregateOutputType = {
    id: number
    itemId: number
    label: number
    description: number
    multiplier: number
    isDefault: number
    _all: number
  }


  export type CalcConditionAvgAggregateInputType = {
    id?: true
    itemId?: true
    multiplier?: true
  }

  export type CalcConditionSumAggregateInputType = {
    id?: true
    itemId?: true
    multiplier?: true
  }

  export type CalcConditionMinAggregateInputType = {
    id?: true
    itemId?: true
    label?: true
    description?: true
    multiplier?: true
    isDefault?: true
  }

  export type CalcConditionMaxAggregateInputType = {
    id?: true
    itemId?: true
    label?: true
    description?: true
    multiplier?: true
    isDefault?: true
  }

  export type CalcConditionCountAggregateInputType = {
    id?: true
    itemId?: true
    label?: true
    description?: true
    multiplier?: true
    isDefault?: true
    _all?: true
  }

  export type CalcConditionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcCondition to aggregate.
     */
    where?: CalcConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcConditions to fetch.
     */
    orderBy?: CalcConditionOrderByWithRelationInput | CalcConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalcConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalcConditions
    **/
    _count?: true | CalcConditionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalcConditionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalcConditionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalcConditionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalcConditionMaxAggregateInputType
  }

  export type GetCalcConditionAggregateType<T extends CalcConditionAggregateArgs> = {
        [P in keyof T & keyof AggregateCalcCondition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalcCondition[P]>
      : GetScalarType<T[P], AggregateCalcCondition[P]>
  }




  export type CalcConditionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalcConditionWhereInput
    orderBy?: CalcConditionOrderByWithAggregationInput | CalcConditionOrderByWithAggregationInput[]
    by: CalcConditionScalarFieldEnum[] | CalcConditionScalarFieldEnum
    having?: CalcConditionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalcConditionCountAggregateInputType | true
    _avg?: CalcConditionAvgAggregateInputType
    _sum?: CalcConditionSumAggregateInputType
    _min?: CalcConditionMinAggregateInputType
    _max?: CalcConditionMaxAggregateInputType
  }

  export type CalcConditionGroupByOutputType = {
    id: number
    itemId: number
    label: string
    description: string | null
    multiplier: number
    isDefault: boolean
    _count: CalcConditionCountAggregateOutputType | null
    _avg: CalcConditionAvgAggregateOutputType | null
    _sum: CalcConditionSumAggregateOutputType | null
    _min: CalcConditionMinAggregateOutputType | null
    _max: CalcConditionMaxAggregateOutputType | null
  }

  type GetCalcConditionGroupByPayload<T extends CalcConditionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalcConditionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalcConditionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalcConditionGroupByOutputType[P]>
            : GetScalarType<T[P], CalcConditionGroupByOutputType[P]>
        }
      >
    >


  export type CalcConditionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    label?: boolean
    description?: boolean
    multiplier?: boolean
    isDefault?: boolean
    item?: boolean | CalcItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calcCondition"]>

  export type CalcConditionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    label?: boolean
    description?: boolean
    multiplier?: boolean
    isDefault?: boolean
    item?: boolean | CalcItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calcCondition"]>

  export type CalcConditionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    itemId?: boolean
    label?: boolean
    description?: boolean
    multiplier?: boolean
    isDefault?: boolean
    item?: boolean | CalcItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calcCondition"]>

  export type CalcConditionSelectScalar = {
    id?: boolean
    itemId?: boolean
    label?: boolean
    description?: boolean
    multiplier?: boolean
    isDefault?: boolean
  }

  export type CalcConditionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "itemId" | "label" | "description" | "multiplier" | "isDefault", ExtArgs["result"]["calcCondition"]>
  export type CalcConditionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | CalcItemDefaultArgs<ExtArgs>
  }
  export type CalcConditionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | CalcItemDefaultArgs<ExtArgs>
  }
  export type CalcConditionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item?: boolean | CalcItemDefaultArgs<ExtArgs>
  }

  export type $CalcConditionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalcCondition"
    objects: {
      item: Prisma.$CalcItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      itemId: number
      label: string
      description: string | null
      multiplier: number
      isDefault: boolean
    }, ExtArgs["result"]["calcCondition"]>
    composites: {}
  }

  type CalcConditionGetPayload<S extends boolean | null | undefined | CalcConditionDefaultArgs> = $Result.GetResult<Prisma.$CalcConditionPayload, S>

  type CalcConditionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalcConditionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalcConditionCountAggregateInputType | true
    }

  export interface CalcConditionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalcCondition'], meta: { name: 'CalcCondition' } }
    /**
     * Find zero or one CalcCondition that matches the filter.
     * @param {CalcConditionFindUniqueArgs} args - Arguments to find a CalcCondition
     * @example
     * // Get one CalcCondition
     * const calcCondition = await prisma.calcCondition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalcConditionFindUniqueArgs>(args: SelectSubset<T, CalcConditionFindUniqueArgs<ExtArgs>>): Prisma__CalcConditionClient<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CalcCondition that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalcConditionFindUniqueOrThrowArgs} args - Arguments to find a CalcCondition
     * @example
     * // Get one CalcCondition
     * const calcCondition = await prisma.calcCondition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalcConditionFindUniqueOrThrowArgs>(args: SelectSubset<T, CalcConditionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalcConditionClient<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcCondition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcConditionFindFirstArgs} args - Arguments to find a CalcCondition
     * @example
     * // Get one CalcCondition
     * const calcCondition = await prisma.calcCondition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalcConditionFindFirstArgs>(args?: SelectSubset<T, CalcConditionFindFirstArgs<ExtArgs>>): Prisma__CalcConditionClient<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalcCondition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcConditionFindFirstOrThrowArgs} args - Arguments to find a CalcCondition
     * @example
     * // Get one CalcCondition
     * const calcCondition = await prisma.calcCondition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalcConditionFindFirstOrThrowArgs>(args?: SelectSubset<T, CalcConditionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalcConditionClient<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CalcConditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcConditionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalcConditions
     * const calcConditions = await prisma.calcCondition.findMany()
     * 
     * // Get first 10 CalcConditions
     * const calcConditions = await prisma.calcCondition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calcConditionWithIdOnly = await prisma.calcCondition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalcConditionFindManyArgs>(args?: SelectSubset<T, CalcConditionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CalcCondition.
     * @param {CalcConditionCreateArgs} args - Arguments to create a CalcCondition.
     * @example
     * // Create one CalcCondition
     * const CalcCondition = await prisma.calcCondition.create({
     *   data: {
     *     // ... data to create a CalcCondition
     *   }
     * })
     * 
     */
    create<T extends CalcConditionCreateArgs>(args: SelectSubset<T, CalcConditionCreateArgs<ExtArgs>>): Prisma__CalcConditionClient<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CalcConditions.
     * @param {CalcConditionCreateManyArgs} args - Arguments to create many CalcConditions.
     * @example
     * // Create many CalcConditions
     * const calcCondition = await prisma.calcCondition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalcConditionCreateManyArgs>(args?: SelectSubset<T, CalcConditionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalcConditions and returns the data saved in the database.
     * @param {CalcConditionCreateManyAndReturnArgs} args - Arguments to create many CalcConditions.
     * @example
     * // Create many CalcConditions
     * const calcCondition = await prisma.calcCondition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalcConditions and only return the `id`
     * const calcConditionWithIdOnly = await prisma.calcCondition.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalcConditionCreateManyAndReturnArgs>(args?: SelectSubset<T, CalcConditionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CalcCondition.
     * @param {CalcConditionDeleteArgs} args - Arguments to delete one CalcCondition.
     * @example
     * // Delete one CalcCondition
     * const CalcCondition = await prisma.calcCondition.delete({
     *   where: {
     *     // ... filter to delete one CalcCondition
     *   }
     * })
     * 
     */
    delete<T extends CalcConditionDeleteArgs>(args: SelectSubset<T, CalcConditionDeleteArgs<ExtArgs>>): Prisma__CalcConditionClient<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CalcCondition.
     * @param {CalcConditionUpdateArgs} args - Arguments to update one CalcCondition.
     * @example
     * // Update one CalcCondition
     * const calcCondition = await prisma.calcCondition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalcConditionUpdateArgs>(args: SelectSubset<T, CalcConditionUpdateArgs<ExtArgs>>): Prisma__CalcConditionClient<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CalcConditions.
     * @param {CalcConditionDeleteManyArgs} args - Arguments to filter CalcConditions to delete.
     * @example
     * // Delete a few CalcConditions
     * const { count } = await prisma.calcCondition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalcConditionDeleteManyArgs>(args?: SelectSubset<T, CalcConditionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcConditionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalcConditions
     * const calcCondition = await prisma.calcCondition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalcConditionUpdateManyArgs>(args: SelectSubset<T, CalcConditionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalcConditions and returns the data updated in the database.
     * @param {CalcConditionUpdateManyAndReturnArgs} args - Arguments to update many CalcConditions.
     * @example
     * // Update many CalcConditions
     * const calcCondition = await prisma.calcCondition.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalcConditions and only return the `id`
     * const calcConditionWithIdOnly = await prisma.calcCondition.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalcConditionUpdateManyAndReturnArgs>(args: SelectSubset<T, CalcConditionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CalcCondition.
     * @param {CalcConditionUpsertArgs} args - Arguments to update or create a CalcCondition.
     * @example
     * // Update or create a CalcCondition
     * const calcCondition = await prisma.calcCondition.upsert({
     *   create: {
     *     // ... data to create a CalcCondition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalcCondition we want to update
     *   }
     * })
     */
    upsert<T extends CalcConditionUpsertArgs>(args: SelectSubset<T, CalcConditionUpsertArgs<ExtArgs>>): Prisma__CalcConditionClient<$Result.GetResult<Prisma.$CalcConditionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CalcConditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcConditionCountArgs} args - Arguments to filter CalcConditions to count.
     * @example
     * // Count the number of CalcConditions
     * const count = await prisma.calcCondition.count({
     *   where: {
     *     // ... the filter for the CalcConditions we want to count
     *   }
     * })
    **/
    count<T extends CalcConditionCountArgs>(
      args?: Subset<T, CalcConditionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalcConditionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalcCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcConditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalcConditionAggregateArgs>(args: Subset<T, CalcConditionAggregateArgs>): Prisma.PrismaPromise<GetCalcConditionAggregateType<T>>

    /**
     * Group by CalcCondition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalcConditionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalcConditionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalcConditionGroupByArgs['orderBy'] }
        : { orderBy?: CalcConditionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalcConditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalcConditionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalcCondition model
   */
  readonly fields: CalcConditionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalcCondition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalcConditionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    item<T extends CalcItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CalcItemDefaultArgs<ExtArgs>>): Prisma__CalcItemClient<$Result.GetResult<Prisma.$CalcItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalcCondition model
   */
  interface CalcConditionFieldRefs {
    readonly id: FieldRef<"CalcCondition", 'Int'>
    readonly itemId: FieldRef<"CalcCondition", 'Int'>
    readonly label: FieldRef<"CalcCondition", 'String'>
    readonly description: FieldRef<"CalcCondition", 'String'>
    readonly multiplier: FieldRef<"CalcCondition", 'Float'>
    readonly isDefault: FieldRef<"CalcCondition", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * CalcCondition findUnique
   */
  export type CalcConditionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    /**
     * Filter, which CalcCondition to fetch.
     */
    where: CalcConditionWhereUniqueInput
  }

  /**
   * CalcCondition findUniqueOrThrow
   */
  export type CalcConditionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    /**
     * Filter, which CalcCondition to fetch.
     */
    where: CalcConditionWhereUniqueInput
  }

  /**
   * CalcCondition findFirst
   */
  export type CalcConditionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    /**
     * Filter, which CalcCondition to fetch.
     */
    where?: CalcConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcConditions to fetch.
     */
    orderBy?: CalcConditionOrderByWithRelationInput | CalcConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcConditions.
     */
    cursor?: CalcConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcConditions.
     */
    distinct?: CalcConditionScalarFieldEnum | CalcConditionScalarFieldEnum[]
  }

  /**
   * CalcCondition findFirstOrThrow
   */
  export type CalcConditionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    /**
     * Filter, which CalcCondition to fetch.
     */
    where?: CalcConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcConditions to fetch.
     */
    orderBy?: CalcConditionOrderByWithRelationInput | CalcConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalcConditions.
     */
    cursor?: CalcConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcConditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalcConditions.
     */
    distinct?: CalcConditionScalarFieldEnum | CalcConditionScalarFieldEnum[]
  }

  /**
   * CalcCondition findMany
   */
  export type CalcConditionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    /**
     * Filter, which CalcConditions to fetch.
     */
    where?: CalcConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalcConditions to fetch.
     */
    orderBy?: CalcConditionOrderByWithRelationInput | CalcConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalcConditions.
     */
    cursor?: CalcConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalcConditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalcConditions.
     */
    skip?: number
    distinct?: CalcConditionScalarFieldEnum | CalcConditionScalarFieldEnum[]
  }

  /**
   * CalcCondition create
   */
  export type CalcConditionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    /**
     * The data needed to create a CalcCondition.
     */
    data: XOR<CalcConditionCreateInput, CalcConditionUncheckedCreateInput>
  }

  /**
   * CalcCondition createMany
   */
  export type CalcConditionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalcConditions.
     */
    data: CalcConditionCreateManyInput | CalcConditionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalcCondition createManyAndReturn
   */
  export type CalcConditionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * The data used to create many CalcConditions.
     */
    data: CalcConditionCreateManyInput | CalcConditionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalcCondition update
   */
  export type CalcConditionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    /**
     * The data needed to update a CalcCondition.
     */
    data: XOR<CalcConditionUpdateInput, CalcConditionUncheckedUpdateInput>
    /**
     * Choose, which CalcCondition to update.
     */
    where: CalcConditionWhereUniqueInput
  }

  /**
   * CalcCondition updateMany
   */
  export type CalcConditionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalcConditions.
     */
    data: XOR<CalcConditionUpdateManyMutationInput, CalcConditionUncheckedUpdateManyInput>
    /**
     * Filter which CalcConditions to update
     */
    where?: CalcConditionWhereInput
    /**
     * Limit how many CalcConditions to update.
     */
    limit?: number
  }

  /**
   * CalcCondition updateManyAndReturn
   */
  export type CalcConditionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * The data used to update CalcConditions.
     */
    data: XOR<CalcConditionUpdateManyMutationInput, CalcConditionUncheckedUpdateManyInput>
    /**
     * Filter which CalcConditions to update
     */
    where?: CalcConditionWhereInput
    /**
     * Limit how many CalcConditions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalcCondition upsert
   */
  export type CalcConditionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    /**
     * The filter to search for the CalcCondition to update in case it exists.
     */
    where: CalcConditionWhereUniqueInput
    /**
     * In case the CalcCondition found by the `where` argument doesn't exist, create a new CalcCondition with this data.
     */
    create: XOR<CalcConditionCreateInput, CalcConditionUncheckedCreateInput>
    /**
     * In case the CalcCondition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalcConditionUpdateInput, CalcConditionUncheckedUpdateInput>
  }

  /**
   * CalcCondition delete
   */
  export type CalcConditionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
    /**
     * Filter which CalcCondition to delete.
     */
    where: CalcConditionWhereUniqueInput
  }

  /**
   * CalcCondition deleteMany
   */
  export type CalcConditionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalcConditions to delete
     */
    where?: CalcConditionWhereInput
    /**
     * Limit how many CalcConditions to delete.
     */
    limit?: number
  }

  /**
   * CalcCondition without action
   */
  export type CalcConditionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalcCondition
     */
    select?: CalcConditionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalcCondition
     */
    omit?: CalcConditionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalcConditionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    name: 'name',
    address: 'address',
    phone: 'phone',
    lastLogin: 'lastLogin',
    isConfirmed: 'isConfirmed',
    isActive: 'isActive'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    clientName: 'clientName',
    rating: 'rating',
    content: 'content',
    status: 'status',
    companyReply: 'companyReply',
    createdAt: 'createdAt',
    projectId: 'projectId'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    title: 'title',
    category: 'category',
    description: 'description',
    icon: 'icon',
    isFeatured: 'isFeatured',
    sortOrder: 'sortOrder',
    isHot: 'isHot',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const WarrantyScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    clientId: 'clientId',
    startDate: 'startDate',
    durationMonths: 'durationMonths',
    projectName: 'projectName',
    createdAt: 'createdAt'
  };

  export type WarrantyScalarFieldEnum = (typeof WarrantyScalarFieldEnum)[keyof typeof WarrantyScalarFieldEnum]


  export const CertificateScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    fileUrl: 'fileUrl',
    title: 'title',
    issuedDate: 'issuedDate',
    createdAt: 'createdAt'
  };

  export type CertificateScalarFieldEnum = (typeof CertificateScalarFieldEnum)[keyof typeof CertificateScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    category: 'category',
    content: 'content',
    imagePath: 'imagePath',
    seoTitle: 'seoTitle',
    seoDescription: 'seoDescription',
    seoKeywords: 'seoKeywords',
    published: 'published',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const ChatSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionKey: 'sessionKey',
    createdAt: 'createdAt'
  };

  export type ChatSessionScalarFieldEnum = (typeof ChatSessionScalarFieldEnum)[keyof typeof ChatSessionScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    chatSessionId: 'chatSessionId',
    sender: 'sender',
    content: 'content',
    isTransferred: 'isTransferred',
    createdAt: 'createdAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const KnowledgeBaseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type KnowledgeBaseScalarFieldEnum = (typeof KnowledgeBaseScalarFieldEnum)[keyof typeof KnowledgeBaseScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    description: 'description',
    content: 'content',
    imagePaths: 'imagePaths',
    videoUrl: 'videoUrl',
    category: 'category',
    tags: 'tags',
    location: 'location',
    completionDate: 'completionDate',
    seoTitle: 'seoTitle',
    seoDescription: 'seoDescription',
    seoKeywords: 'seoKeywords',
    published: 'published',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ProjectTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    icon: 'icon',
    steps: 'steps',
    active: 'active',
    createdAt: 'createdAt'
  };

  export type ProjectTypeScalarFieldEnum = (typeof ProjectTypeScalarFieldEnum)[keyof typeof ProjectTypeScalarFieldEnum]


  export const WorkPackageScalarFieldEnum: {
    id: 'id',
    projectTypeId: 'projectTypeId',
    name: 'name',
    description: 'description',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt'
  };

  export type WorkPackageScalarFieldEnum = (typeof WorkPackageScalarFieldEnum)[keyof typeof WorkPackageScalarFieldEnum]


  export const ServiceItemScalarFieldEnum: {
    id: 'id',
    packageId: 'packageId',
    name: 'name',
    description: 'description',
    group: 'group',
    unit: 'unit',
    basePrice: 'basePrice',
    multiplier: 'multiplier',
    required: 'required',
    visibleByDefault: 'visibleByDefault',
    aiSuggestible: 'aiSuggestible',
    additionalNotes: 'additionalNotes',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt'
  };

  export type ServiceItemScalarFieldEnum = (typeof ServiceItemScalarFieldEnum)[keyof typeof ServiceItemScalarFieldEnum]


  export const ServiceOptionScalarFieldEnum: {
    id: 'id',
    serviceId: 'serviceId',
    name: 'name',
    priceDelta: 'priceDelta',
    description: 'description',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt'
  };

  export type ServiceOptionScalarFieldEnum = (typeof ServiceOptionScalarFieldEnum)[keyof typeof ServiceOptionScalarFieldEnum]


  export const FollowUpScalarFieldEnum: {
    id: 'id',
    sourceId: 'sourceId',
    targetId: 'targetId',
    reason: 'reason',
    condition: 'condition'
  };

  export type FollowUpScalarFieldEnum = (typeof FollowUpScalarFieldEnum)[keyof typeof FollowUpScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    title: 'title',
    fileUrl: 'fileUrl',
    issuedDate: 'issuedDate',
    totalAmount: 'totalAmount',
    projectName: 'projectName',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const ClientProjectScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    name: 'name',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClientProjectScalarFieldEnum = (typeof ClientProjectScalarFieldEnum)[keyof typeof ClientProjectScalarFieldEnum]


  export const ClientProjectHistoryScalarFieldEnum: {
    id: 'id',
    clientProjectId: 'clientProjectId',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    deletedAt: 'deletedAt',
    createdAt: 'createdAt'
  };

  export type ClientProjectHistoryScalarFieldEnum = (typeof ClientProjectHistoryScalarFieldEnum)[keyof typeof ClientProjectHistoryScalarFieldEnum]


  export const AiChatThreadScalarFieldEnum: {
    id: 'id',
    sessionKey: 'sessionKey',
    isEscalated: 'isEscalated',
    createdAt: 'createdAt'
  };

  export type AiChatThreadScalarFieldEnum = (typeof AiChatThreadScalarFieldEnum)[keyof typeof AiChatThreadScalarFieldEnum]


  export const AiChatMessageScalarFieldEnum: {
    id: 'id',
    threadId: 'threadId',
    sender: 'sender',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type AiChatMessageScalarFieldEnum = (typeof AiChatMessageScalarFieldEnum)[keyof typeof AiChatMessageScalarFieldEnum]


  export const AiChatEscalationScalarFieldEnum: {
    id: 'id',
    sessionKey: 'sessionKey',
    name: 'name',
    email: 'email',
    message: 'message',
    createdAt: 'createdAt'
  };

  export type AiChatEscalationScalarFieldEnum = (typeof AiChatEscalationScalarFieldEnum)[keyof typeof AiChatEscalationScalarFieldEnum]


  export const CalcCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    isPopular: 'isPopular',
    projectTypeId: 'projectTypeId'
  };

  export type CalcCategoryScalarFieldEnum = (typeof CalcCategoryScalarFieldEnum)[keyof typeof CalcCategoryScalarFieldEnum]


  export const CalcItemScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    name: 'name',
    description: 'description',
    unitType: 'unitType',
    minPrice: 'minPrice',
    maxPrice: 'maxPrice',
    baseMin: 'baseMin',
    baseMax: 'baseMax',
    vatIncluded: 'vatIncluded',
    visible: 'visible',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CalcItemScalarFieldEnum = (typeof CalcItemScalarFieldEnum)[keyof typeof CalcItemScalarFieldEnum]


  export const CalcSettingsScalarFieldEnum: {
    id: 'id',
    callOutThreshold: 'callOutThreshold',
    callOutFeeMin: 'callOutFeeMin',
    callOutFeeMax: 'callOutFeeMax',
    urgencyMultiplier: 'urgencyMultiplier',
    emergencyMultiplier: 'emergencyMultiplier',
    projectTrigger: 'projectTrigger',
    projectFeePercent: 'projectFeePercent'
  };

  export type CalcSettingsScalarFieldEnum = (typeof CalcSettingsScalarFieldEnum)[keyof typeof CalcSettingsScalarFieldEnum]


  export const CalcRequestScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    postcode: 'postcode',
    categorySlug: 'categorySlug',
    data: 'data',
    urgency: 'urgency',
    estimateMin: 'estimateMin',
    estimateMax: 'estimateMax',
    createdAt: 'createdAt'
  };

  export type CalcRequestScalarFieldEnum = (typeof CalcRequestScalarFieldEnum)[keyof typeof CalcRequestScalarFieldEnum]


  export const CalcProjectTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    sortOrder: 'sortOrder',
    createdAt: 'createdAt'
  };

  export type CalcProjectTypeScalarFieldEnum = (typeof CalcProjectTypeScalarFieldEnum)[keyof typeof CalcProjectTypeScalarFieldEnum]


  export const CalcConditionScalarFieldEnum: {
    id: 'id',
    itemId: 'itemId',
    label: 'label',
    description: 'description',
    multiplier: 'multiplier',
    isDefault: 'isDefault'
  };

  export type CalcConditionScalarFieldEnum = (typeof CalcConditionScalarFieldEnum)[keyof typeof CalcConditionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ReviewStatus'
   */
  export type EnumReviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReviewStatus'>
    


  /**
   * Reference to a field of type 'ReviewStatus[]'
   */
  export type ListEnumReviewStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReviewStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'CalcUnitType'
   */
  export type EnumCalcUnitTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalcUnitType'>
    


  /**
   * Reference to a field of type 'CalcUnitType[]'
   */
  export type ListEnumCalcUnitTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalcUnitType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    name?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    isConfirmed?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    warranties?: WarrantyListRelationFilter
    certificates?: CertificateListRelationFilter
    notifications?: NotificationListRelationFilter
    invoices?: InvoiceListRelationFilter
    clientProjects?: ClientProjectListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    isConfirmed?: SortOrder
    isActive?: SortOrder
    warranties?: WarrantyOrderByRelationAggregateInput
    certificates?: CertificateOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    invoices?: InvoiceOrderByRelationAggregateInput
    clientProjects?: ClientProjectOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    name?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    isConfirmed?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    warranties?: WarrantyListRelationFilter
    certificates?: CertificateListRelationFilter
    notifications?: NotificationListRelationFilter
    invoices?: InvoiceListRelationFilter
    clientProjects?: ClientProjectListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    isConfirmed?: SortOrder
    isActive?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isConfirmed?: BoolWithAggregatesFilter<"User"> | boolean
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    clientName?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    content?: StringFilter<"Review"> | string
    status?: EnumReviewStatusFilter<"Review"> | $Enums.ReviewStatus
    companyReply?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    projectId?: IntNullableFilter<"Review"> | number | null
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    clientName?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    status?: SortOrder
    companyReply?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    projectId?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    clientName?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    content?: StringFilter<"Review"> | string
    status?: EnumReviewStatusFilter<"Review"> | $Enums.ReviewStatus
    companyReply?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    projectId?: IntNullableFilter<"Review"> | number | null
    project?: XOR<ProjectNullableScalarRelationFilter, ProjectWhereInput> | null
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    clientName?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    status?: SortOrder
    companyReply?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    projectId?: SortOrderInput | SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    clientName?: StringWithAggregatesFilter<"Review"> | string
    rating?: IntWithAggregatesFilter<"Review"> | number
    content?: StringWithAggregatesFilter<"Review"> | string
    status?: EnumReviewStatusWithAggregatesFilter<"Review"> | $Enums.ReviewStatus
    companyReply?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    projectId?: IntNullableWithAggregatesFilter<"Review"> | number | null
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: IntFilter<"Service"> | number
    title?: StringFilter<"Service"> | string
    category?: StringFilter<"Service"> | string
    description?: StringNullableFilter<"Service"> | string | null
    icon?: StringFilter<"Service"> | string
    isFeatured?: BoolFilter<"Service"> | boolean
    sortOrder?: IntFilter<"Service"> | number
    isHot?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Service"> | Date | string | null
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrder
    isFeatured?: SortOrder
    sortOrder?: SortOrder
    isHot?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    title?: StringFilter<"Service"> | string
    category?: StringFilter<"Service"> | string
    description?: StringNullableFilter<"Service"> | string | null
    icon?: StringFilter<"Service"> | string
    isFeatured?: BoolFilter<"Service"> | boolean
    sortOrder?: IntFilter<"Service"> | number
    isHot?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Service"> | Date | string | null
  }, "id">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrder
    isFeatured?: SortOrder
    sortOrder?: SortOrder
    isHot?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Service"> | number
    title?: StringWithAggregatesFilter<"Service"> | string
    category?: StringWithAggregatesFilter<"Service"> | string
    description?: StringNullableWithAggregatesFilter<"Service"> | string | null
    icon?: StringWithAggregatesFilter<"Service"> | string
    isFeatured?: BoolWithAggregatesFilter<"Service"> | boolean
    sortOrder?: IntWithAggregatesFilter<"Service"> | number
    isHot?: BoolWithAggregatesFilter<"Service"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Service"> | Date | string | null
  }

  export type WarrantyWhereInput = {
    AND?: WarrantyWhereInput | WarrantyWhereInput[]
    OR?: WarrantyWhereInput[]
    NOT?: WarrantyWhereInput | WarrantyWhereInput[]
    id?: IntFilter<"Warranty"> | number
    projectId?: IntNullableFilter<"Warranty"> | number | null
    clientId?: StringFilter<"Warranty"> | string
    startDate?: DateTimeFilter<"Warranty"> | Date | string
    durationMonths?: IntFilter<"Warranty"> | number
    projectName?: StringFilter<"Warranty"> | string
    createdAt?: DateTimeFilter<"Warranty"> | Date | string
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WarrantyOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrderInput | SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
    client?: UserOrderByWithRelationInput
  }

  export type WarrantyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WarrantyWhereInput | WarrantyWhereInput[]
    OR?: WarrantyWhereInput[]
    NOT?: WarrantyWhereInput | WarrantyWhereInput[]
    projectId?: IntNullableFilter<"Warranty"> | number | null
    clientId?: StringFilter<"Warranty"> | string
    startDate?: DateTimeFilter<"Warranty"> | Date | string
    durationMonths?: IntFilter<"Warranty"> | number
    projectName?: StringFilter<"Warranty"> | string
    createdAt?: DateTimeFilter<"Warranty"> | Date | string
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type WarrantyOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrderInput | SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
    _count?: WarrantyCountOrderByAggregateInput
    _avg?: WarrantyAvgOrderByAggregateInput
    _max?: WarrantyMaxOrderByAggregateInput
    _min?: WarrantyMinOrderByAggregateInput
    _sum?: WarrantySumOrderByAggregateInput
  }

  export type WarrantyScalarWhereWithAggregatesInput = {
    AND?: WarrantyScalarWhereWithAggregatesInput | WarrantyScalarWhereWithAggregatesInput[]
    OR?: WarrantyScalarWhereWithAggregatesInput[]
    NOT?: WarrantyScalarWhereWithAggregatesInput | WarrantyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Warranty"> | number
    projectId?: IntNullableWithAggregatesFilter<"Warranty"> | number | null
    clientId?: StringWithAggregatesFilter<"Warranty"> | string
    startDate?: DateTimeWithAggregatesFilter<"Warranty"> | Date | string
    durationMonths?: IntWithAggregatesFilter<"Warranty"> | number
    projectName?: StringWithAggregatesFilter<"Warranty"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Warranty"> | Date | string
  }

  export type CertificateWhereInput = {
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    id?: IntFilter<"Certificate"> | number
    clientId?: StringFilter<"Certificate"> | string
    fileUrl?: StringFilter<"Certificate"> | string
    title?: StringFilter<"Certificate"> | string
    issuedDate?: DateTimeFilter<"Certificate"> | Date | string
    createdAt?: DateTimeFilter<"Certificate"> | Date | string
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CertificateOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    fileUrl?: SortOrder
    title?: SortOrder
    issuedDate?: SortOrder
    createdAt?: SortOrder
    client?: UserOrderByWithRelationInput
  }

  export type CertificateWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    clientId?: StringFilter<"Certificate"> | string
    fileUrl?: StringFilter<"Certificate"> | string
    title?: StringFilter<"Certificate"> | string
    issuedDate?: DateTimeFilter<"Certificate"> | Date | string
    createdAt?: DateTimeFilter<"Certificate"> | Date | string
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type CertificateOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    fileUrl?: SortOrder
    title?: SortOrder
    issuedDate?: SortOrder
    createdAt?: SortOrder
    _count?: CertificateCountOrderByAggregateInput
    _avg?: CertificateAvgOrderByAggregateInput
    _max?: CertificateMaxOrderByAggregateInput
    _min?: CertificateMinOrderByAggregateInput
    _sum?: CertificateSumOrderByAggregateInput
  }

  export type CertificateScalarWhereWithAggregatesInput = {
    AND?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    OR?: CertificateScalarWhereWithAggregatesInput[]
    NOT?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Certificate"> | number
    clientId?: StringWithAggregatesFilter<"Certificate"> | string
    fileUrl?: StringWithAggregatesFilter<"Certificate"> | string
    title?: StringWithAggregatesFilter<"Certificate"> | string
    issuedDate?: DateTimeWithAggregatesFilter<"Certificate"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Certificate"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    clientId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    client?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    clientId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    clientId?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    title?: StringFilter<"Post"> | string
    slug?: StringFilter<"Post"> | string
    category?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    imagePath?: StringFilter<"Post"> | string
    seoTitle?: StringNullableFilter<"Post"> | string | null
    seoDescription?: StringNullableFilter<"Post"> | string | null
    seoKeywords?: StringNullableFilter<"Post"> | string | null
    published?: BoolFilter<"Post"> | boolean
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    category?: SortOrder
    content?: SortOrder
    imagePath?: SortOrder
    seoTitle?: SortOrderInput | SortOrder
    seoDescription?: SortOrderInput | SortOrder
    seoKeywords?: SortOrderInput | SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    title?: StringFilter<"Post"> | string
    category?: StringFilter<"Post"> | string
    content?: StringFilter<"Post"> | string
    imagePath?: StringFilter<"Post"> | string
    seoTitle?: StringNullableFilter<"Post"> | string | null
    seoDescription?: StringNullableFilter<"Post"> | string | null
    seoKeywords?: StringNullableFilter<"Post"> | string | null
    published?: BoolFilter<"Post"> | boolean
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
  }, "id" | "slug">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    category?: SortOrder
    content?: SortOrder
    imagePath?: SortOrder
    seoTitle?: SortOrderInput | SortOrder
    seoDescription?: SortOrderInput | SortOrder
    seoKeywords?: SortOrderInput | SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    title?: StringWithAggregatesFilter<"Post"> | string
    slug?: StringWithAggregatesFilter<"Post"> | string
    category?: StringWithAggregatesFilter<"Post"> | string
    content?: StringWithAggregatesFilter<"Post"> | string
    imagePath?: StringWithAggregatesFilter<"Post"> | string
    seoTitle?: StringNullableWithAggregatesFilter<"Post"> | string | null
    seoDescription?: StringNullableWithAggregatesFilter<"Post"> | string | null
    seoKeywords?: StringNullableWithAggregatesFilter<"Post"> | string | null
    published?: BoolWithAggregatesFilter<"Post"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
  }

  export type ChatSessionWhereInput = {
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    id?: IntFilter<"ChatSession"> | number
    userId?: IntNullableFilter<"ChatSession"> | number | null
    sessionKey?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    messages?: MessageListRelationFilter
  }

  export type ChatSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    sessionKey?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    messages?: MessageOrderByRelationAggregateInput
  }

  export type ChatSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatSessionWhereInput | ChatSessionWhereInput[]
    OR?: ChatSessionWhereInput[]
    NOT?: ChatSessionWhereInput | ChatSessionWhereInput[]
    userId?: IntNullableFilter<"ChatSession"> | number | null
    sessionKey?: StringNullableFilter<"ChatSession"> | string | null
    createdAt?: DateTimeFilter<"ChatSession"> | Date | string
    messages?: MessageListRelationFilter
  }, "id">

  export type ChatSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    sessionKey?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ChatSessionCountOrderByAggregateInput
    _avg?: ChatSessionAvgOrderByAggregateInput
    _max?: ChatSessionMaxOrderByAggregateInput
    _min?: ChatSessionMinOrderByAggregateInput
    _sum?: ChatSessionSumOrderByAggregateInput
  }

  export type ChatSessionScalarWhereWithAggregatesInput = {
    AND?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    OR?: ChatSessionScalarWhereWithAggregatesInput[]
    NOT?: ChatSessionScalarWhereWithAggregatesInput | ChatSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatSession"> | number
    userId?: IntNullableWithAggregatesFilter<"ChatSession"> | number | null
    sessionKey?: StringNullableWithAggregatesFilter<"ChatSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ChatSession"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    chatSessionId?: IntFilter<"Message"> | number
    sender?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    isTransferred?: BoolFilter<"Message"> | boolean
    createdAt?: DateTimeFilter<"Message"> | Date | string
    chatSession?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    chatSessionId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    isTransferred?: SortOrder
    createdAt?: SortOrder
    chatSession?: ChatSessionOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    chatSessionId?: IntFilter<"Message"> | number
    sender?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    isTransferred?: BoolFilter<"Message"> | boolean
    createdAt?: DateTimeFilter<"Message"> | Date | string
    chatSession?: XOR<ChatSessionScalarRelationFilter, ChatSessionWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    chatSessionId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    isTransferred?: SortOrder
    createdAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    chatSessionId?: IntWithAggregatesFilter<"Message"> | number
    sender?: StringWithAggregatesFilter<"Message"> | string
    content?: StringWithAggregatesFilter<"Message"> | string
    isTransferred?: BoolWithAggregatesFilter<"Message"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type KnowledgeBaseWhereInput = {
    AND?: KnowledgeBaseWhereInput | KnowledgeBaseWhereInput[]
    OR?: KnowledgeBaseWhereInput[]
    NOT?: KnowledgeBaseWhereInput | KnowledgeBaseWhereInput[]
    id?: IntFilter<"KnowledgeBase"> | number
    title?: StringFilter<"KnowledgeBase"> | string
    content?: StringFilter<"KnowledgeBase"> | string
    createdAt?: DateTimeFilter<"KnowledgeBase"> | Date | string
  }

  export type KnowledgeBaseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type KnowledgeBaseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KnowledgeBaseWhereInput | KnowledgeBaseWhereInput[]
    OR?: KnowledgeBaseWhereInput[]
    NOT?: KnowledgeBaseWhereInput | KnowledgeBaseWhereInput[]
    title?: StringFilter<"KnowledgeBase"> | string
    content?: StringFilter<"KnowledgeBase"> | string
    createdAt?: DateTimeFilter<"KnowledgeBase"> | Date | string
  }, "id">

  export type KnowledgeBaseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: KnowledgeBaseCountOrderByAggregateInput
    _avg?: KnowledgeBaseAvgOrderByAggregateInput
    _max?: KnowledgeBaseMaxOrderByAggregateInput
    _min?: KnowledgeBaseMinOrderByAggregateInput
    _sum?: KnowledgeBaseSumOrderByAggregateInput
  }

  export type KnowledgeBaseScalarWhereWithAggregatesInput = {
    AND?: KnowledgeBaseScalarWhereWithAggregatesInput | KnowledgeBaseScalarWhereWithAggregatesInput[]
    OR?: KnowledgeBaseScalarWhereWithAggregatesInput[]
    NOT?: KnowledgeBaseScalarWhereWithAggregatesInput | KnowledgeBaseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KnowledgeBase"> | number
    title?: StringWithAggregatesFilter<"KnowledgeBase"> | string
    content?: StringWithAggregatesFilter<"KnowledgeBase"> | string
    createdAt?: DateTimeWithAggregatesFilter<"KnowledgeBase"> | Date | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: IntFilter<"Project"> | number
    title?: StringFilter<"Project"> | string
    slug?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    content?: StringFilter<"Project"> | string
    imagePaths?: StringNullableListFilter<"Project">
    videoUrl?: StringNullableFilter<"Project"> | string | null
    category?: StringFilter<"Project"> | string
    tags?: StringNullableListFilter<"Project">
    location?: StringNullableFilter<"Project"> | string | null
    completionDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    seoTitle?: StringNullableFilter<"Project"> | string | null
    seoDescription?: StringNullableFilter<"Project"> | string | null
    seoKeywords?: StringNullableFilter<"Project"> | string | null
    published?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Project"> | Date | string | null
    reviews?: ReviewListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    content?: SortOrder
    imagePaths?: SortOrder
    videoUrl?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    location?: SortOrderInput | SortOrder
    completionDate?: SortOrderInput | SortOrder
    seoTitle?: SortOrderInput | SortOrder
    seoDescription?: SortOrderInput | SortOrder
    seoKeywords?: SortOrderInput | SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    title?: StringFilter<"Project"> | string
    description?: StringFilter<"Project"> | string
    content?: StringFilter<"Project"> | string
    imagePaths?: StringNullableListFilter<"Project">
    videoUrl?: StringNullableFilter<"Project"> | string | null
    category?: StringFilter<"Project"> | string
    tags?: StringNullableListFilter<"Project">
    location?: StringNullableFilter<"Project"> | string | null
    completionDate?: DateTimeNullableFilter<"Project"> | Date | string | null
    seoTitle?: StringNullableFilter<"Project"> | string | null
    seoDescription?: StringNullableFilter<"Project"> | string | null
    seoKeywords?: StringNullableFilter<"Project"> | string | null
    published?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Project"> | Date | string | null
    reviews?: ReviewListRelationFilter
  }, "id" | "slug">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    content?: SortOrder
    imagePaths?: SortOrder
    videoUrl?: SortOrderInput | SortOrder
    category?: SortOrder
    tags?: SortOrder
    location?: SortOrderInput | SortOrder
    completionDate?: SortOrderInput | SortOrder
    seoTitle?: SortOrderInput | SortOrder
    seoDescription?: SortOrderInput | SortOrder
    seoKeywords?: SortOrderInput | SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Project"> | number
    title?: StringWithAggregatesFilter<"Project"> | string
    slug?: StringWithAggregatesFilter<"Project"> | string
    description?: StringWithAggregatesFilter<"Project"> | string
    content?: StringWithAggregatesFilter<"Project"> | string
    imagePaths?: StringNullableListFilter<"Project">
    videoUrl?: StringNullableWithAggregatesFilter<"Project"> | string | null
    category?: StringWithAggregatesFilter<"Project"> | string
    tags?: StringNullableListFilter<"Project">
    location?: StringNullableWithAggregatesFilter<"Project"> | string | null
    completionDate?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
    seoTitle?: StringNullableWithAggregatesFilter<"Project"> | string | null
    seoDescription?: StringNullableWithAggregatesFilter<"Project"> | string | null
    seoKeywords?: StringNullableWithAggregatesFilter<"Project"> | string | null
    published?: BoolWithAggregatesFilter<"Project"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Project"> | Date | string | null
  }

  export type ProjectTypeWhereInput = {
    AND?: ProjectTypeWhereInput | ProjectTypeWhereInput[]
    OR?: ProjectTypeWhereInput[]
    NOT?: ProjectTypeWhereInput | ProjectTypeWhereInput[]
    id?: IntFilter<"ProjectType"> | number
    name?: StringFilter<"ProjectType"> | string
    slug?: StringFilter<"ProjectType"> | string
    description?: StringNullableFilter<"ProjectType"> | string | null
    icon?: StringNullableFilter<"ProjectType"> | string | null
    steps?: IntFilter<"ProjectType"> | number
    active?: BoolFilter<"ProjectType"> | boolean
    createdAt?: DateTimeFilter<"ProjectType"> | Date | string
    packages?: WorkPackageListRelationFilter
  }

  export type ProjectTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    steps?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    packages?: WorkPackageOrderByRelationAggregateInput
  }

  export type ProjectTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: ProjectTypeWhereInput | ProjectTypeWhereInput[]
    OR?: ProjectTypeWhereInput[]
    NOT?: ProjectTypeWhereInput | ProjectTypeWhereInput[]
    name?: StringFilter<"ProjectType"> | string
    description?: StringNullableFilter<"ProjectType"> | string | null
    icon?: StringNullableFilter<"ProjectType"> | string | null
    steps?: IntFilter<"ProjectType"> | number
    active?: BoolFilter<"ProjectType"> | boolean
    createdAt?: DateTimeFilter<"ProjectType"> | Date | string
    packages?: WorkPackageListRelationFilter
  }, "id" | "slug">

  export type ProjectTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    steps?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    _count?: ProjectTypeCountOrderByAggregateInput
    _avg?: ProjectTypeAvgOrderByAggregateInput
    _max?: ProjectTypeMaxOrderByAggregateInput
    _min?: ProjectTypeMinOrderByAggregateInput
    _sum?: ProjectTypeSumOrderByAggregateInput
  }

  export type ProjectTypeScalarWhereWithAggregatesInput = {
    AND?: ProjectTypeScalarWhereWithAggregatesInput | ProjectTypeScalarWhereWithAggregatesInput[]
    OR?: ProjectTypeScalarWhereWithAggregatesInput[]
    NOT?: ProjectTypeScalarWhereWithAggregatesInput | ProjectTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProjectType"> | number
    name?: StringWithAggregatesFilter<"ProjectType"> | string
    slug?: StringWithAggregatesFilter<"ProjectType"> | string
    description?: StringNullableWithAggregatesFilter<"ProjectType"> | string | null
    icon?: StringNullableWithAggregatesFilter<"ProjectType"> | string | null
    steps?: IntWithAggregatesFilter<"ProjectType"> | number
    active?: BoolWithAggregatesFilter<"ProjectType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ProjectType"> | Date | string
  }

  export type WorkPackageWhereInput = {
    AND?: WorkPackageWhereInput | WorkPackageWhereInput[]
    OR?: WorkPackageWhereInput[]
    NOT?: WorkPackageWhereInput | WorkPackageWhereInput[]
    id?: IntFilter<"WorkPackage"> | number
    projectTypeId?: IntFilter<"WorkPackage"> | number
    name?: StringFilter<"WorkPackage"> | string
    description?: StringNullableFilter<"WorkPackage"> | string | null
    sortOrder?: IntFilter<"WorkPackage"> | number
    createdAt?: DateTimeFilter<"WorkPackage"> | Date | string
    projectType?: XOR<ProjectTypeScalarRelationFilter, ProjectTypeWhereInput>
    services?: ServiceItemListRelationFilter
  }

  export type WorkPackageOrderByWithRelationInput = {
    id?: SortOrder
    projectTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    projectType?: ProjectTypeOrderByWithRelationInput
    services?: ServiceItemOrderByRelationAggregateInput
  }

  export type WorkPackageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkPackageWhereInput | WorkPackageWhereInput[]
    OR?: WorkPackageWhereInput[]
    NOT?: WorkPackageWhereInput | WorkPackageWhereInput[]
    projectTypeId?: IntFilter<"WorkPackage"> | number
    name?: StringFilter<"WorkPackage"> | string
    description?: StringNullableFilter<"WorkPackage"> | string | null
    sortOrder?: IntFilter<"WorkPackage"> | number
    createdAt?: DateTimeFilter<"WorkPackage"> | Date | string
    projectType?: XOR<ProjectTypeScalarRelationFilter, ProjectTypeWhereInput>
    services?: ServiceItemListRelationFilter
  }, "id">

  export type WorkPackageOrderByWithAggregationInput = {
    id?: SortOrder
    projectTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    _count?: WorkPackageCountOrderByAggregateInput
    _avg?: WorkPackageAvgOrderByAggregateInput
    _max?: WorkPackageMaxOrderByAggregateInput
    _min?: WorkPackageMinOrderByAggregateInput
    _sum?: WorkPackageSumOrderByAggregateInput
  }

  export type WorkPackageScalarWhereWithAggregatesInput = {
    AND?: WorkPackageScalarWhereWithAggregatesInput | WorkPackageScalarWhereWithAggregatesInput[]
    OR?: WorkPackageScalarWhereWithAggregatesInput[]
    NOT?: WorkPackageScalarWhereWithAggregatesInput | WorkPackageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkPackage"> | number
    projectTypeId?: IntWithAggregatesFilter<"WorkPackage"> | number
    name?: StringWithAggregatesFilter<"WorkPackage"> | string
    description?: StringNullableWithAggregatesFilter<"WorkPackage"> | string | null
    sortOrder?: IntWithAggregatesFilter<"WorkPackage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkPackage"> | Date | string
  }

  export type ServiceItemWhereInput = {
    AND?: ServiceItemWhereInput | ServiceItemWhereInput[]
    OR?: ServiceItemWhereInput[]
    NOT?: ServiceItemWhereInput | ServiceItemWhereInput[]
    id?: IntFilter<"ServiceItem"> | number
    packageId?: IntFilter<"ServiceItem"> | number
    name?: StringFilter<"ServiceItem"> | string
    description?: StringNullableFilter<"ServiceItem"> | string | null
    group?: StringNullableFilter<"ServiceItem"> | string | null
    unit?: StringFilter<"ServiceItem"> | string
    basePrice?: FloatFilter<"ServiceItem"> | number
    multiplier?: FloatNullableFilter<"ServiceItem"> | number | null
    required?: BoolFilter<"ServiceItem"> | boolean
    visibleByDefault?: BoolFilter<"ServiceItem"> | boolean
    aiSuggestible?: BoolFilter<"ServiceItem"> | boolean
    additionalNotes?: StringNullableFilter<"ServiceItem"> | string | null
    sortOrder?: IntFilter<"ServiceItem"> | number
    createdAt?: DateTimeFilter<"ServiceItem"> | Date | string
    package?: XOR<WorkPackageScalarRelationFilter, WorkPackageWhereInput>
    options?: ServiceOptionListRelationFilter
    followUps?: FollowUpListRelationFilter
    suggestedBy?: FollowUpListRelationFilter
  }

  export type ServiceItemOrderByWithRelationInput = {
    id?: SortOrder
    packageId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    group?: SortOrderInput | SortOrder
    unit?: SortOrder
    basePrice?: SortOrder
    multiplier?: SortOrderInput | SortOrder
    required?: SortOrder
    visibleByDefault?: SortOrder
    aiSuggestible?: SortOrder
    additionalNotes?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    package?: WorkPackageOrderByWithRelationInput
    options?: ServiceOptionOrderByRelationAggregateInput
    followUps?: FollowUpOrderByRelationAggregateInput
    suggestedBy?: FollowUpOrderByRelationAggregateInput
  }

  export type ServiceItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServiceItemWhereInput | ServiceItemWhereInput[]
    OR?: ServiceItemWhereInput[]
    NOT?: ServiceItemWhereInput | ServiceItemWhereInput[]
    packageId?: IntFilter<"ServiceItem"> | number
    name?: StringFilter<"ServiceItem"> | string
    description?: StringNullableFilter<"ServiceItem"> | string | null
    group?: StringNullableFilter<"ServiceItem"> | string | null
    unit?: StringFilter<"ServiceItem"> | string
    basePrice?: FloatFilter<"ServiceItem"> | number
    multiplier?: FloatNullableFilter<"ServiceItem"> | number | null
    required?: BoolFilter<"ServiceItem"> | boolean
    visibleByDefault?: BoolFilter<"ServiceItem"> | boolean
    aiSuggestible?: BoolFilter<"ServiceItem"> | boolean
    additionalNotes?: StringNullableFilter<"ServiceItem"> | string | null
    sortOrder?: IntFilter<"ServiceItem"> | number
    createdAt?: DateTimeFilter<"ServiceItem"> | Date | string
    package?: XOR<WorkPackageScalarRelationFilter, WorkPackageWhereInput>
    options?: ServiceOptionListRelationFilter
    followUps?: FollowUpListRelationFilter
    suggestedBy?: FollowUpListRelationFilter
  }, "id">

  export type ServiceItemOrderByWithAggregationInput = {
    id?: SortOrder
    packageId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    group?: SortOrderInput | SortOrder
    unit?: SortOrder
    basePrice?: SortOrder
    multiplier?: SortOrderInput | SortOrder
    required?: SortOrder
    visibleByDefault?: SortOrder
    aiSuggestible?: SortOrder
    additionalNotes?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    _count?: ServiceItemCountOrderByAggregateInput
    _avg?: ServiceItemAvgOrderByAggregateInput
    _max?: ServiceItemMaxOrderByAggregateInput
    _min?: ServiceItemMinOrderByAggregateInput
    _sum?: ServiceItemSumOrderByAggregateInput
  }

  export type ServiceItemScalarWhereWithAggregatesInput = {
    AND?: ServiceItemScalarWhereWithAggregatesInput | ServiceItemScalarWhereWithAggregatesInput[]
    OR?: ServiceItemScalarWhereWithAggregatesInput[]
    NOT?: ServiceItemScalarWhereWithAggregatesInput | ServiceItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ServiceItem"> | number
    packageId?: IntWithAggregatesFilter<"ServiceItem"> | number
    name?: StringWithAggregatesFilter<"ServiceItem"> | string
    description?: StringNullableWithAggregatesFilter<"ServiceItem"> | string | null
    group?: StringNullableWithAggregatesFilter<"ServiceItem"> | string | null
    unit?: StringWithAggregatesFilter<"ServiceItem"> | string
    basePrice?: FloatWithAggregatesFilter<"ServiceItem"> | number
    multiplier?: FloatNullableWithAggregatesFilter<"ServiceItem"> | number | null
    required?: BoolWithAggregatesFilter<"ServiceItem"> | boolean
    visibleByDefault?: BoolWithAggregatesFilter<"ServiceItem"> | boolean
    aiSuggestible?: BoolWithAggregatesFilter<"ServiceItem"> | boolean
    additionalNotes?: StringNullableWithAggregatesFilter<"ServiceItem"> | string | null
    sortOrder?: IntWithAggregatesFilter<"ServiceItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ServiceItem"> | Date | string
  }

  export type ServiceOptionWhereInput = {
    AND?: ServiceOptionWhereInput | ServiceOptionWhereInput[]
    OR?: ServiceOptionWhereInput[]
    NOT?: ServiceOptionWhereInput | ServiceOptionWhereInput[]
    id?: IntFilter<"ServiceOption"> | number
    serviceId?: IntFilter<"ServiceOption"> | number
    name?: StringFilter<"ServiceOption"> | string
    priceDelta?: FloatFilter<"ServiceOption"> | number
    description?: StringNullableFilter<"ServiceOption"> | string | null
    imageUrl?: StringNullableFilter<"ServiceOption"> | string | null
    createdAt?: DateTimeFilter<"ServiceOption"> | Date | string
    service?: XOR<ServiceItemScalarRelationFilter, ServiceItemWhereInput>
  }

  export type ServiceOptionOrderByWithRelationInput = {
    id?: SortOrder
    serviceId?: SortOrder
    name?: SortOrder
    priceDelta?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    service?: ServiceItemOrderByWithRelationInput
  }

  export type ServiceOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServiceOptionWhereInput | ServiceOptionWhereInput[]
    OR?: ServiceOptionWhereInput[]
    NOT?: ServiceOptionWhereInput | ServiceOptionWhereInput[]
    serviceId?: IntFilter<"ServiceOption"> | number
    name?: StringFilter<"ServiceOption"> | string
    priceDelta?: FloatFilter<"ServiceOption"> | number
    description?: StringNullableFilter<"ServiceOption"> | string | null
    imageUrl?: StringNullableFilter<"ServiceOption"> | string | null
    createdAt?: DateTimeFilter<"ServiceOption"> | Date | string
    service?: XOR<ServiceItemScalarRelationFilter, ServiceItemWhereInput>
  }, "id">

  export type ServiceOptionOrderByWithAggregationInput = {
    id?: SortOrder
    serviceId?: SortOrder
    name?: SortOrder
    priceDelta?: SortOrder
    description?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ServiceOptionCountOrderByAggregateInput
    _avg?: ServiceOptionAvgOrderByAggregateInput
    _max?: ServiceOptionMaxOrderByAggregateInput
    _min?: ServiceOptionMinOrderByAggregateInput
    _sum?: ServiceOptionSumOrderByAggregateInput
  }

  export type ServiceOptionScalarWhereWithAggregatesInput = {
    AND?: ServiceOptionScalarWhereWithAggregatesInput | ServiceOptionScalarWhereWithAggregatesInput[]
    OR?: ServiceOptionScalarWhereWithAggregatesInput[]
    NOT?: ServiceOptionScalarWhereWithAggregatesInput | ServiceOptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ServiceOption"> | number
    serviceId?: IntWithAggregatesFilter<"ServiceOption"> | number
    name?: StringWithAggregatesFilter<"ServiceOption"> | string
    priceDelta?: FloatWithAggregatesFilter<"ServiceOption"> | number
    description?: StringNullableWithAggregatesFilter<"ServiceOption"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"ServiceOption"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ServiceOption"> | Date | string
  }

  export type FollowUpWhereInput = {
    AND?: FollowUpWhereInput | FollowUpWhereInput[]
    OR?: FollowUpWhereInput[]
    NOT?: FollowUpWhereInput | FollowUpWhereInput[]
    id?: IntFilter<"FollowUp"> | number
    sourceId?: IntFilter<"FollowUp"> | number
    targetId?: IntFilter<"FollowUp"> | number
    reason?: StringNullableFilter<"FollowUp"> | string | null
    condition?: StringNullableFilter<"FollowUp"> | string | null
    source?: XOR<ServiceItemScalarRelationFilter, ServiceItemWhereInput>
    target?: XOR<ServiceItemScalarRelationFilter, ServiceItemWhereInput>
  }

  export type FollowUpOrderByWithRelationInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    reason?: SortOrderInput | SortOrder
    condition?: SortOrderInput | SortOrder
    source?: ServiceItemOrderByWithRelationInput
    target?: ServiceItemOrderByWithRelationInput
  }

  export type FollowUpWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FollowUpWhereInput | FollowUpWhereInput[]
    OR?: FollowUpWhereInput[]
    NOT?: FollowUpWhereInput | FollowUpWhereInput[]
    sourceId?: IntFilter<"FollowUp"> | number
    targetId?: IntFilter<"FollowUp"> | number
    reason?: StringNullableFilter<"FollowUp"> | string | null
    condition?: StringNullableFilter<"FollowUp"> | string | null
    source?: XOR<ServiceItemScalarRelationFilter, ServiceItemWhereInput>
    target?: XOR<ServiceItemScalarRelationFilter, ServiceItemWhereInput>
  }, "id">

  export type FollowUpOrderByWithAggregationInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    reason?: SortOrderInput | SortOrder
    condition?: SortOrderInput | SortOrder
    _count?: FollowUpCountOrderByAggregateInput
    _avg?: FollowUpAvgOrderByAggregateInput
    _max?: FollowUpMaxOrderByAggregateInput
    _min?: FollowUpMinOrderByAggregateInput
    _sum?: FollowUpSumOrderByAggregateInput
  }

  export type FollowUpScalarWhereWithAggregatesInput = {
    AND?: FollowUpScalarWhereWithAggregatesInput | FollowUpScalarWhereWithAggregatesInput[]
    OR?: FollowUpScalarWhereWithAggregatesInput[]
    NOT?: FollowUpScalarWhereWithAggregatesInput | FollowUpScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FollowUp"> | number
    sourceId?: IntWithAggregatesFilter<"FollowUp"> | number
    targetId?: IntWithAggregatesFilter<"FollowUp"> | number
    reason?: StringNullableWithAggregatesFilter<"FollowUp"> | string | null
    condition?: StringNullableWithAggregatesFilter<"FollowUp"> | string | null
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: IntFilter<"Invoice"> | number
    clientId?: StringFilter<"Invoice"> | string
    title?: StringFilter<"Invoice"> | string
    fileUrl?: StringFilter<"Invoice"> | string
    issuedDate?: DateTimeFilter<"Invoice"> | Date | string
    totalAmount?: FloatFilter<"Invoice"> | number
    projectName?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    issuedDate?: SortOrder
    totalAmount?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    client?: UserOrderByWithRelationInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    clientId?: StringFilter<"Invoice"> | string
    title?: StringFilter<"Invoice"> | string
    fileUrl?: StringFilter<"Invoice"> | string
    issuedDate?: DateTimeFilter<"Invoice"> | Date | string
    totalAmount?: FloatFilter<"Invoice"> | number
    projectName?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    issuedDate?: SortOrder
    totalAmount?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Invoice"> | number
    clientId?: StringWithAggregatesFilter<"Invoice"> | string
    title?: StringWithAggregatesFilter<"Invoice"> | string
    fileUrl?: StringWithAggregatesFilter<"Invoice"> | string
    issuedDate?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    totalAmount?: FloatWithAggregatesFilter<"Invoice"> | number
    projectName?: StringWithAggregatesFilter<"Invoice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Invoice"> | Date | string | null
  }

  export type ClientProjectWhereInput = {
    AND?: ClientProjectWhereInput | ClientProjectWhereInput[]
    OR?: ClientProjectWhereInput[]
    NOT?: ClientProjectWhereInput | ClientProjectWhereInput[]
    id?: IntFilter<"ClientProject"> | number
    clientId?: StringFilter<"ClientProject"> | string
    name?: StringFilter<"ClientProject"> | string
    status?: StringFilter<"ClientProject"> | string
    startDate?: DateTimeFilter<"ClientProject"> | Date | string
    endDate?: DateTimeNullableFilter<"ClientProject"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"ClientProject"> | Date | string | null
    createdAt?: DateTimeFilter<"ClientProject"> | Date | string
    updatedAt?: DateTimeFilter<"ClientProject"> | Date | string
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
    history?: ClientProjectHistoryListRelationFilter
  }

  export type ClientProjectOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    client?: UserOrderByWithRelationInput
    history?: ClientProjectHistoryOrderByRelationAggregateInput
  }

  export type ClientProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClientProjectWhereInput | ClientProjectWhereInput[]
    OR?: ClientProjectWhereInput[]
    NOT?: ClientProjectWhereInput | ClientProjectWhereInput[]
    clientId?: StringFilter<"ClientProject"> | string
    name?: StringFilter<"ClientProject"> | string
    status?: StringFilter<"ClientProject"> | string
    startDate?: DateTimeFilter<"ClientProject"> | Date | string
    endDate?: DateTimeNullableFilter<"ClientProject"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"ClientProject"> | Date | string | null
    createdAt?: DateTimeFilter<"ClientProject"> | Date | string
    updatedAt?: DateTimeFilter<"ClientProject"> | Date | string
    client?: XOR<UserScalarRelationFilter, UserWhereInput>
    history?: ClientProjectHistoryListRelationFilter
  }, "id">

  export type ClientProjectOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClientProjectCountOrderByAggregateInput
    _avg?: ClientProjectAvgOrderByAggregateInput
    _max?: ClientProjectMaxOrderByAggregateInput
    _min?: ClientProjectMinOrderByAggregateInput
    _sum?: ClientProjectSumOrderByAggregateInput
  }

  export type ClientProjectScalarWhereWithAggregatesInput = {
    AND?: ClientProjectScalarWhereWithAggregatesInput | ClientProjectScalarWhereWithAggregatesInput[]
    OR?: ClientProjectScalarWhereWithAggregatesInput[]
    NOT?: ClientProjectScalarWhereWithAggregatesInput | ClientProjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClientProject"> | number
    clientId?: StringWithAggregatesFilter<"ClientProject"> | string
    name?: StringWithAggregatesFilter<"ClientProject"> | string
    status?: StringWithAggregatesFilter<"ClientProject"> | string
    startDate?: DateTimeWithAggregatesFilter<"ClientProject"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"ClientProject"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ClientProject"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ClientProject"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClientProject"> | Date | string
  }

  export type ClientProjectHistoryWhereInput = {
    AND?: ClientProjectHistoryWhereInput | ClientProjectHistoryWhereInput[]
    OR?: ClientProjectHistoryWhereInput[]
    NOT?: ClientProjectHistoryWhereInput | ClientProjectHistoryWhereInput[]
    id?: IntFilter<"ClientProjectHistory"> | number
    clientProjectId?: IntFilter<"ClientProjectHistory"> | number
    status?: StringFilter<"ClientProjectHistory"> | string
    startDate?: DateTimeFilter<"ClientProjectHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"ClientProjectHistory"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"ClientProjectHistory"> | Date | string | null
    createdAt?: DateTimeFilter<"ClientProjectHistory"> | Date | string
    clientProject?: XOR<ClientProjectScalarRelationFilter, ClientProjectWhereInput>
  }

  export type ClientProjectHistoryOrderByWithRelationInput = {
    id?: SortOrder
    clientProjectId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    clientProject?: ClientProjectOrderByWithRelationInput
  }

  export type ClientProjectHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClientProjectHistoryWhereInput | ClientProjectHistoryWhereInput[]
    OR?: ClientProjectHistoryWhereInput[]
    NOT?: ClientProjectHistoryWhereInput | ClientProjectHistoryWhereInput[]
    clientProjectId?: IntFilter<"ClientProjectHistory"> | number
    status?: StringFilter<"ClientProjectHistory"> | string
    startDate?: DateTimeFilter<"ClientProjectHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"ClientProjectHistory"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"ClientProjectHistory"> | Date | string | null
    createdAt?: DateTimeFilter<"ClientProjectHistory"> | Date | string
    clientProject?: XOR<ClientProjectScalarRelationFilter, ClientProjectWhereInput>
  }, "id">

  export type ClientProjectHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    clientProjectId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ClientProjectHistoryCountOrderByAggregateInput
    _avg?: ClientProjectHistoryAvgOrderByAggregateInput
    _max?: ClientProjectHistoryMaxOrderByAggregateInput
    _min?: ClientProjectHistoryMinOrderByAggregateInput
    _sum?: ClientProjectHistorySumOrderByAggregateInput
  }

  export type ClientProjectHistoryScalarWhereWithAggregatesInput = {
    AND?: ClientProjectHistoryScalarWhereWithAggregatesInput | ClientProjectHistoryScalarWhereWithAggregatesInput[]
    OR?: ClientProjectHistoryScalarWhereWithAggregatesInput[]
    NOT?: ClientProjectHistoryScalarWhereWithAggregatesInput | ClientProjectHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClientProjectHistory"> | number
    clientProjectId?: IntWithAggregatesFilter<"ClientProjectHistory"> | number
    status?: StringWithAggregatesFilter<"ClientProjectHistory"> | string
    startDate?: DateTimeWithAggregatesFilter<"ClientProjectHistory"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"ClientProjectHistory"> | Date | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ClientProjectHistory"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ClientProjectHistory"> | Date | string
  }

  export type AiChatThreadWhereInput = {
    AND?: AiChatThreadWhereInput | AiChatThreadWhereInput[]
    OR?: AiChatThreadWhereInput[]
    NOT?: AiChatThreadWhereInput | AiChatThreadWhereInput[]
    id?: StringFilter<"AiChatThread"> | string
    sessionKey?: StringFilter<"AiChatThread"> | string
    isEscalated?: BoolFilter<"AiChatThread"> | boolean
    createdAt?: DateTimeFilter<"AiChatThread"> | Date | string
    messages?: AiChatMessageListRelationFilter
    escalation?: XOR<AiChatEscalationNullableScalarRelationFilter, AiChatEscalationWhereInput> | null
  }

  export type AiChatThreadOrderByWithRelationInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    isEscalated?: SortOrder
    createdAt?: SortOrder
    messages?: AiChatMessageOrderByRelationAggregateInput
    escalation?: AiChatEscalationOrderByWithRelationInput
  }

  export type AiChatThreadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionKey?: string
    AND?: AiChatThreadWhereInput | AiChatThreadWhereInput[]
    OR?: AiChatThreadWhereInput[]
    NOT?: AiChatThreadWhereInput | AiChatThreadWhereInput[]
    isEscalated?: BoolFilter<"AiChatThread"> | boolean
    createdAt?: DateTimeFilter<"AiChatThread"> | Date | string
    messages?: AiChatMessageListRelationFilter
    escalation?: XOR<AiChatEscalationNullableScalarRelationFilter, AiChatEscalationWhereInput> | null
  }, "id" | "sessionKey">

  export type AiChatThreadOrderByWithAggregationInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    isEscalated?: SortOrder
    createdAt?: SortOrder
    _count?: AiChatThreadCountOrderByAggregateInput
    _max?: AiChatThreadMaxOrderByAggregateInput
    _min?: AiChatThreadMinOrderByAggregateInput
  }

  export type AiChatThreadScalarWhereWithAggregatesInput = {
    AND?: AiChatThreadScalarWhereWithAggregatesInput | AiChatThreadScalarWhereWithAggregatesInput[]
    OR?: AiChatThreadScalarWhereWithAggregatesInput[]
    NOT?: AiChatThreadScalarWhereWithAggregatesInput | AiChatThreadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AiChatThread"> | string
    sessionKey?: StringWithAggregatesFilter<"AiChatThread"> | string
    isEscalated?: BoolWithAggregatesFilter<"AiChatThread"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AiChatThread"> | Date | string
  }

  export type AiChatMessageWhereInput = {
    AND?: AiChatMessageWhereInput | AiChatMessageWhereInput[]
    OR?: AiChatMessageWhereInput[]
    NOT?: AiChatMessageWhereInput | AiChatMessageWhereInput[]
    id?: StringFilter<"AiChatMessage"> | string
    threadId?: StringFilter<"AiChatMessage"> | string
    sender?: StringFilter<"AiChatMessage"> | string
    content?: StringFilter<"AiChatMessage"> | string
    createdAt?: DateTimeFilter<"AiChatMessage"> | Date | string
    thread?: XOR<AiChatThreadScalarRelationFilter, AiChatThreadWhereInput>
  }

  export type AiChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    threadId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    thread?: AiChatThreadOrderByWithRelationInput
  }

  export type AiChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AiChatMessageWhereInput | AiChatMessageWhereInput[]
    OR?: AiChatMessageWhereInput[]
    NOT?: AiChatMessageWhereInput | AiChatMessageWhereInput[]
    threadId?: StringFilter<"AiChatMessage"> | string
    sender?: StringFilter<"AiChatMessage"> | string
    content?: StringFilter<"AiChatMessage"> | string
    createdAt?: DateTimeFilter<"AiChatMessage"> | Date | string
    thread?: XOR<AiChatThreadScalarRelationFilter, AiChatThreadWhereInput>
  }, "id">

  export type AiChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    threadId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: AiChatMessageCountOrderByAggregateInput
    _max?: AiChatMessageMaxOrderByAggregateInput
    _min?: AiChatMessageMinOrderByAggregateInput
  }

  export type AiChatMessageScalarWhereWithAggregatesInput = {
    AND?: AiChatMessageScalarWhereWithAggregatesInput | AiChatMessageScalarWhereWithAggregatesInput[]
    OR?: AiChatMessageScalarWhereWithAggregatesInput[]
    NOT?: AiChatMessageScalarWhereWithAggregatesInput | AiChatMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AiChatMessage"> | string
    threadId?: StringWithAggregatesFilter<"AiChatMessage"> | string
    sender?: StringWithAggregatesFilter<"AiChatMessage"> | string
    content?: StringWithAggregatesFilter<"AiChatMessage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AiChatMessage"> | Date | string
  }

  export type AiChatEscalationWhereInput = {
    AND?: AiChatEscalationWhereInput | AiChatEscalationWhereInput[]
    OR?: AiChatEscalationWhereInput[]
    NOT?: AiChatEscalationWhereInput | AiChatEscalationWhereInput[]
    id?: IntFilter<"AiChatEscalation"> | number
    sessionKey?: StringFilter<"AiChatEscalation"> | string
    name?: StringNullableFilter<"AiChatEscalation"> | string | null
    email?: StringFilter<"AiChatEscalation"> | string
    message?: StringNullableFilter<"AiChatEscalation"> | string | null
    createdAt?: DateTimeFilter<"AiChatEscalation"> | Date | string
    thread?: XOR<AiChatThreadScalarRelationFilter, AiChatThreadWhereInput>
  }

  export type AiChatEscalationOrderByWithRelationInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    thread?: AiChatThreadOrderByWithRelationInput
  }

  export type AiChatEscalationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sessionKey?: string
    AND?: AiChatEscalationWhereInput | AiChatEscalationWhereInput[]
    OR?: AiChatEscalationWhereInput[]
    NOT?: AiChatEscalationWhereInput | AiChatEscalationWhereInput[]
    name?: StringNullableFilter<"AiChatEscalation"> | string | null
    email?: StringFilter<"AiChatEscalation"> | string
    message?: StringNullableFilter<"AiChatEscalation"> | string | null
    createdAt?: DateTimeFilter<"AiChatEscalation"> | Date | string
    thread?: XOR<AiChatThreadScalarRelationFilter, AiChatThreadWhereInput>
  }, "id" | "sessionKey">

  export type AiChatEscalationOrderByWithAggregationInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AiChatEscalationCountOrderByAggregateInput
    _avg?: AiChatEscalationAvgOrderByAggregateInput
    _max?: AiChatEscalationMaxOrderByAggregateInput
    _min?: AiChatEscalationMinOrderByAggregateInput
    _sum?: AiChatEscalationSumOrderByAggregateInput
  }

  export type AiChatEscalationScalarWhereWithAggregatesInput = {
    AND?: AiChatEscalationScalarWhereWithAggregatesInput | AiChatEscalationScalarWhereWithAggregatesInput[]
    OR?: AiChatEscalationScalarWhereWithAggregatesInput[]
    NOT?: AiChatEscalationScalarWhereWithAggregatesInput | AiChatEscalationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AiChatEscalation"> | number
    sessionKey?: StringWithAggregatesFilter<"AiChatEscalation"> | string
    name?: StringNullableWithAggregatesFilter<"AiChatEscalation"> | string | null
    email?: StringWithAggregatesFilter<"AiChatEscalation"> | string
    message?: StringNullableWithAggregatesFilter<"AiChatEscalation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AiChatEscalation"> | Date | string
  }

  export type CalcCategoryWhereInput = {
    AND?: CalcCategoryWhereInput | CalcCategoryWhereInput[]
    OR?: CalcCategoryWhereInput[]
    NOT?: CalcCategoryWhereInput | CalcCategoryWhereInput[]
    id?: IntFilter<"CalcCategory"> | number
    name?: StringFilter<"CalcCategory"> | string
    slug?: StringFilter<"CalcCategory"> | string
    description?: StringNullableFilter<"CalcCategory"> | string | null
    isPopular?: BoolFilter<"CalcCategory"> | boolean
    projectTypeId?: IntNullableFilter<"CalcCategory"> | number | null
    projectType?: XOR<CalcProjectTypeNullableScalarRelationFilter, CalcProjectTypeWhereInput> | null
    items?: CalcItemListRelationFilter
  }

  export type CalcCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    isPopular?: SortOrder
    projectTypeId?: SortOrderInput | SortOrder
    projectType?: CalcProjectTypeOrderByWithRelationInput
    items?: CalcItemOrderByRelationAggregateInput
  }

  export type CalcCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: CalcCategoryWhereInput | CalcCategoryWhereInput[]
    OR?: CalcCategoryWhereInput[]
    NOT?: CalcCategoryWhereInput | CalcCategoryWhereInput[]
    name?: StringFilter<"CalcCategory"> | string
    description?: StringNullableFilter<"CalcCategory"> | string | null
    isPopular?: BoolFilter<"CalcCategory"> | boolean
    projectTypeId?: IntNullableFilter<"CalcCategory"> | number | null
    projectType?: XOR<CalcProjectTypeNullableScalarRelationFilter, CalcProjectTypeWhereInput> | null
    items?: CalcItemListRelationFilter
  }, "id" | "slug">

  export type CalcCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    isPopular?: SortOrder
    projectTypeId?: SortOrderInput | SortOrder
    _count?: CalcCategoryCountOrderByAggregateInput
    _avg?: CalcCategoryAvgOrderByAggregateInput
    _max?: CalcCategoryMaxOrderByAggregateInput
    _min?: CalcCategoryMinOrderByAggregateInput
    _sum?: CalcCategorySumOrderByAggregateInput
  }

  export type CalcCategoryScalarWhereWithAggregatesInput = {
    AND?: CalcCategoryScalarWhereWithAggregatesInput | CalcCategoryScalarWhereWithAggregatesInput[]
    OR?: CalcCategoryScalarWhereWithAggregatesInput[]
    NOT?: CalcCategoryScalarWhereWithAggregatesInput | CalcCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CalcCategory"> | number
    name?: StringWithAggregatesFilter<"CalcCategory"> | string
    slug?: StringWithAggregatesFilter<"CalcCategory"> | string
    description?: StringNullableWithAggregatesFilter<"CalcCategory"> | string | null
    isPopular?: BoolWithAggregatesFilter<"CalcCategory"> | boolean
    projectTypeId?: IntNullableWithAggregatesFilter<"CalcCategory"> | number | null
  }

  export type CalcItemWhereInput = {
    AND?: CalcItemWhereInput | CalcItemWhereInput[]
    OR?: CalcItemWhereInput[]
    NOT?: CalcItemWhereInput | CalcItemWhereInput[]
    id?: IntFilter<"CalcItem"> | number
    categoryId?: IntFilter<"CalcItem"> | number
    name?: StringFilter<"CalcItem"> | string
    description?: StringNullableFilter<"CalcItem"> | string | null
    unitType?: EnumCalcUnitTypeFilter<"CalcItem"> | $Enums.CalcUnitType
    minPrice?: FloatFilter<"CalcItem"> | number
    maxPrice?: FloatFilter<"CalcItem"> | number
    baseMin?: FloatFilter<"CalcItem"> | number
    baseMax?: FloatFilter<"CalcItem"> | number
    vatIncluded?: BoolFilter<"CalcItem"> | boolean
    visible?: BoolFilter<"CalcItem"> | boolean
    createdAt?: DateTimeFilter<"CalcItem"> | Date | string
    updatedAt?: DateTimeFilter<"CalcItem"> | Date | string
    category?: XOR<CalcCategoryScalarRelationFilter, CalcCategoryWhereInput>
    conditions?: CalcConditionListRelationFilter
  }

  export type CalcItemOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    unitType?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    baseMin?: SortOrder
    baseMax?: SortOrder
    vatIncluded?: SortOrder
    visible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    category?: CalcCategoryOrderByWithRelationInput
    conditions?: CalcConditionOrderByRelationAggregateInput
  }

  export type CalcItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CalcItemWhereInput | CalcItemWhereInput[]
    OR?: CalcItemWhereInput[]
    NOT?: CalcItemWhereInput | CalcItemWhereInput[]
    categoryId?: IntFilter<"CalcItem"> | number
    name?: StringFilter<"CalcItem"> | string
    description?: StringNullableFilter<"CalcItem"> | string | null
    unitType?: EnumCalcUnitTypeFilter<"CalcItem"> | $Enums.CalcUnitType
    minPrice?: FloatFilter<"CalcItem"> | number
    maxPrice?: FloatFilter<"CalcItem"> | number
    baseMin?: FloatFilter<"CalcItem"> | number
    baseMax?: FloatFilter<"CalcItem"> | number
    vatIncluded?: BoolFilter<"CalcItem"> | boolean
    visible?: BoolFilter<"CalcItem"> | boolean
    createdAt?: DateTimeFilter<"CalcItem"> | Date | string
    updatedAt?: DateTimeFilter<"CalcItem"> | Date | string
    category?: XOR<CalcCategoryScalarRelationFilter, CalcCategoryWhereInput>
    conditions?: CalcConditionListRelationFilter
  }, "id">

  export type CalcItemOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    unitType?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    baseMin?: SortOrder
    baseMax?: SortOrder
    vatIncluded?: SortOrder
    visible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CalcItemCountOrderByAggregateInput
    _avg?: CalcItemAvgOrderByAggregateInput
    _max?: CalcItemMaxOrderByAggregateInput
    _min?: CalcItemMinOrderByAggregateInput
    _sum?: CalcItemSumOrderByAggregateInput
  }

  export type CalcItemScalarWhereWithAggregatesInput = {
    AND?: CalcItemScalarWhereWithAggregatesInput | CalcItemScalarWhereWithAggregatesInput[]
    OR?: CalcItemScalarWhereWithAggregatesInput[]
    NOT?: CalcItemScalarWhereWithAggregatesInput | CalcItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CalcItem"> | number
    categoryId?: IntWithAggregatesFilter<"CalcItem"> | number
    name?: StringWithAggregatesFilter<"CalcItem"> | string
    description?: StringNullableWithAggregatesFilter<"CalcItem"> | string | null
    unitType?: EnumCalcUnitTypeWithAggregatesFilter<"CalcItem"> | $Enums.CalcUnitType
    minPrice?: FloatWithAggregatesFilter<"CalcItem"> | number
    maxPrice?: FloatWithAggregatesFilter<"CalcItem"> | number
    baseMin?: FloatWithAggregatesFilter<"CalcItem"> | number
    baseMax?: FloatWithAggregatesFilter<"CalcItem"> | number
    vatIncluded?: BoolWithAggregatesFilter<"CalcItem"> | boolean
    visible?: BoolWithAggregatesFilter<"CalcItem"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CalcItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CalcItem"> | Date | string
  }

  export type CalcSettingsWhereInput = {
    AND?: CalcSettingsWhereInput | CalcSettingsWhereInput[]
    OR?: CalcSettingsWhereInput[]
    NOT?: CalcSettingsWhereInput | CalcSettingsWhereInput[]
    id?: IntFilter<"CalcSettings"> | number
    callOutThreshold?: FloatFilter<"CalcSettings"> | number
    callOutFeeMin?: FloatFilter<"CalcSettings"> | number
    callOutFeeMax?: FloatFilter<"CalcSettings"> | number
    urgencyMultiplier?: FloatFilter<"CalcSettings"> | number
    emergencyMultiplier?: FloatFilter<"CalcSettings"> | number
    projectTrigger?: FloatFilter<"CalcSettings"> | number
    projectFeePercent?: FloatFilter<"CalcSettings"> | number
  }

  export type CalcSettingsOrderByWithRelationInput = {
    id?: SortOrder
    callOutThreshold?: SortOrder
    callOutFeeMin?: SortOrder
    callOutFeeMax?: SortOrder
    urgencyMultiplier?: SortOrder
    emergencyMultiplier?: SortOrder
    projectTrigger?: SortOrder
    projectFeePercent?: SortOrder
  }

  export type CalcSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CalcSettingsWhereInput | CalcSettingsWhereInput[]
    OR?: CalcSettingsWhereInput[]
    NOT?: CalcSettingsWhereInput | CalcSettingsWhereInput[]
    callOutThreshold?: FloatFilter<"CalcSettings"> | number
    callOutFeeMin?: FloatFilter<"CalcSettings"> | number
    callOutFeeMax?: FloatFilter<"CalcSettings"> | number
    urgencyMultiplier?: FloatFilter<"CalcSettings"> | number
    emergencyMultiplier?: FloatFilter<"CalcSettings"> | number
    projectTrigger?: FloatFilter<"CalcSettings"> | number
    projectFeePercent?: FloatFilter<"CalcSettings"> | number
  }, "id">

  export type CalcSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    callOutThreshold?: SortOrder
    callOutFeeMin?: SortOrder
    callOutFeeMax?: SortOrder
    urgencyMultiplier?: SortOrder
    emergencyMultiplier?: SortOrder
    projectTrigger?: SortOrder
    projectFeePercent?: SortOrder
    _count?: CalcSettingsCountOrderByAggregateInput
    _avg?: CalcSettingsAvgOrderByAggregateInput
    _max?: CalcSettingsMaxOrderByAggregateInput
    _min?: CalcSettingsMinOrderByAggregateInput
    _sum?: CalcSettingsSumOrderByAggregateInput
  }

  export type CalcSettingsScalarWhereWithAggregatesInput = {
    AND?: CalcSettingsScalarWhereWithAggregatesInput | CalcSettingsScalarWhereWithAggregatesInput[]
    OR?: CalcSettingsScalarWhereWithAggregatesInput[]
    NOT?: CalcSettingsScalarWhereWithAggregatesInput | CalcSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CalcSettings"> | number
    callOutThreshold?: FloatWithAggregatesFilter<"CalcSettings"> | number
    callOutFeeMin?: FloatWithAggregatesFilter<"CalcSettings"> | number
    callOutFeeMax?: FloatWithAggregatesFilter<"CalcSettings"> | number
    urgencyMultiplier?: FloatWithAggregatesFilter<"CalcSettings"> | number
    emergencyMultiplier?: FloatWithAggregatesFilter<"CalcSettings"> | number
    projectTrigger?: FloatWithAggregatesFilter<"CalcSettings"> | number
    projectFeePercent?: FloatWithAggregatesFilter<"CalcSettings"> | number
  }

  export type CalcRequestWhereInput = {
    AND?: CalcRequestWhereInput | CalcRequestWhereInput[]
    OR?: CalcRequestWhereInput[]
    NOT?: CalcRequestWhereInput | CalcRequestWhereInput[]
    id?: IntFilter<"CalcRequest"> | number
    name?: StringFilter<"CalcRequest"> | string
    email?: StringFilter<"CalcRequest"> | string
    phone?: StringFilter<"CalcRequest"> | string
    postcode?: StringFilter<"CalcRequest"> | string
    categorySlug?: StringFilter<"CalcRequest"> | string
    data?: JsonFilter<"CalcRequest">
    urgency?: StringFilter<"CalcRequest"> | string
    estimateMin?: FloatFilter<"CalcRequest"> | number
    estimateMax?: FloatFilter<"CalcRequest"> | number
    createdAt?: DateTimeFilter<"CalcRequest"> | Date | string
  }

  export type CalcRequestOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    postcode?: SortOrder
    categorySlug?: SortOrder
    data?: SortOrder
    urgency?: SortOrder
    estimateMin?: SortOrder
    estimateMax?: SortOrder
    createdAt?: SortOrder
  }

  export type CalcRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CalcRequestWhereInput | CalcRequestWhereInput[]
    OR?: CalcRequestWhereInput[]
    NOT?: CalcRequestWhereInput | CalcRequestWhereInput[]
    name?: StringFilter<"CalcRequest"> | string
    email?: StringFilter<"CalcRequest"> | string
    phone?: StringFilter<"CalcRequest"> | string
    postcode?: StringFilter<"CalcRequest"> | string
    categorySlug?: StringFilter<"CalcRequest"> | string
    data?: JsonFilter<"CalcRequest">
    urgency?: StringFilter<"CalcRequest"> | string
    estimateMin?: FloatFilter<"CalcRequest"> | number
    estimateMax?: FloatFilter<"CalcRequest"> | number
    createdAt?: DateTimeFilter<"CalcRequest"> | Date | string
  }, "id">

  export type CalcRequestOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    postcode?: SortOrder
    categorySlug?: SortOrder
    data?: SortOrder
    urgency?: SortOrder
    estimateMin?: SortOrder
    estimateMax?: SortOrder
    createdAt?: SortOrder
    _count?: CalcRequestCountOrderByAggregateInput
    _avg?: CalcRequestAvgOrderByAggregateInput
    _max?: CalcRequestMaxOrderByAggregateInput
    _min?: CalcRequestMinOrderByAggregateInput
    _sum?: CalcRequestSumOrderByAggregateInput
  }

  export type CalcRequestScalarWhereWithAggregatesInput = {
    AND?: CalcRequestScalarWhereWithAggregatesInput | CalcRequestScalarWhereWithAggregatesInput[]
    OR?: CalcRequestScalarWhereWithAggregatesInput[]
    NOT?: CalcRequestScalarWhereWithAggregatesInput | CalcRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CalcRequest"> | number
    name?: StringWithAggregatesFilter<"CalcRequest"> | string
    email?: StringWithAggregatesFilter<"CalcRequest"> | string
    phone?: StringWithAggregatesFilter<"CalcRequest"> | string
    postcode?: StringWithAggregatesFilter<"CalcRequest"> | string
    categorySlug?: StringWithAggregatesFilter<"CalcRequest"> | string
    data?: JsonWithAggregatesFilter<"CalcRequest">
    urgency?: StringWithAggregatesFilter<"CalcRequest"> | string
    estimateMin?: FloatWithAggregatesFilter<"CalcRequest"> | number
    estimateMax?: FloatWithAggregatesFilter<"CalcRequest"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CalcRequest"> | Date | string
  }

  export type CalcProjectTypeWhereInput = {
    AND?: CalcProjectTypeWhereInput | CalcProjectTypeWhereInput[]
    OR?: CalcProjectTypeWhereInput[]
    NOT?: CalcProjectTypeWhereInput | CalcProjectTypeWhereInput[]
    id?: IntFilter<"CalcProjectType"> | number
    name?: StringFilter<"CalcProjectType"> | string
    slug?: StringFilter<"CalcProjectType"> | string
    description?: StringNullableFilter<"CalcProjectType"> | string | null
    sortOrder?: IntFilter<"CalcProjectType"> | number
    createdAt?: DateTimeFilter<"CalcProjectType"> | Date | string
    categories?: CalcCategoryListRelationFilter
  }

  export type CalcProjectTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    categories?: CalcCategoryOrderByRelationAggregateInput
  }

  export type CalcProjectTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: CalcProjectTypeWhereInput | CalcProjectTypeWhereInput[]
    OR?: CalcProjectTypeWhereInput[]
    NOT?: CalcProjectTypeWhereInput | CalcProjectTypeWhereInput[]
    name?: StringFilter<"CalcProjectType"> | string
    description?: StringNullableFilter<"CalcProjectType"> | string | null
    sortOrder?: IntFilter<"CalcProjectType"> | number
    createdAt?: DateTimeFilter<"CalcProjectType"> | Date | string
    categories?: CalcCategoryListRelationFilter
  }, "id" | "slug">

  export type CalcProjectTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
    _count?: CalcProjectTypeCountOrderByAggregateInput
    _avg?: CalcProjectTypeAvgOrderByAggregateInput
    _max?: CalcProjectTypeMaxOrderByAggregateInput
    _min?: CalcProjectTypeMinOrderByAggregateInput
    _sum?: CalcProjectTypeSumOrderByAggregateInput
  }

  export type CalcProjectTypeScalarWhereWithAggregatesInput = {
    AND?: CalcProjectTypeScalarWhereWithAggregatesInput | CalcProjectTypeScalarWhereWithAggregatesInput[]
    OR?: CalcProjectTypeScalarWhereWithAggregatesInput[]
    NOT?: CalcProjectTypeScalarWhereWithAggregatesInput | CalcProjectTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CalcProjectType"> | number
    name?: StringWithAggregatesFilter<"CalcProjectType"> | string
    slug?: StringWithAggregatesFilter<"CalcProjectType"> | string
    description?: StringNullableWithAggregatesFilter<"CalcProjectType"> | string | null
    sortOrder?: IntWithAggregatesFilter<"CalcProjectType"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CalcProjectType"> | Date | string
  }

  export type CalcConditionWhereInput = {
    AND?: CalcConditionWhereInput | CalcConditionWhereInput[]
    OR?: CalcConditionWhereInput[]
    NOT?: CalcConditionWhereInput | CalcConditionWhereInput[]
    id?: IntFilter<"CalcCondition"> | number
    itemId?: IntFilter<"CalcCondition"> | number
    label?: StringFilter<"CalcCondition"> | string
    description?: StringNullableFilter<"CalcCondition"> | string | null
    multiplier?: FloatFilter<"CalcCondition"> | number
    isDefault?: BoolFilter<"CalcCondition"> | boolean
    item?: XOR<CalcItemScalarRelationFilter, CalcItemWhereInput>
  }

  export type CalcConditionOrderByWithRelationInput = {
    id?: SortOrder
    itemId?: SortOrder
    label?: SortOrder
    description?: SortOrderInput | SortOrder
    multiplier?: SortOrder
    isDefault?: SortOrder
    item?: CalcItemOrderByWithRelationInput
  }

  export type CalcConditionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CalcConditionWhereInput | CalcConditionWhereInput[]
    OR?: CalcConditionWhereInput[]
    NOT?: CalcConditionWhereInput | CalcConditionWhereInput[]
    itemId?: IntFilter<"CalcCondition"> | number
    label?: StringFilter<"CalcCondition"> | string
    description?: StringNullableFilter<"CalcCondition"> | string | null
    multiplier?: FloatFilter<"CalcCondition"> | number
    isDefault?: BoolFilter<"CalcCondition"> | boolean
    item?: XOR<CalcItemScalarRelationFilter, CalcItemWhereInput>
  }, "id">

  export type CalcConditionOrderByWithAggregationInput = {
    id?: SortOrder
    itemId?: SortOrder
    label?: SortOrder
    description?: SortOrderInput | SortOrder
    multiplier?: SortOrder
    isDefault?: SortOrder
    _count?: CalcConditionCountOrderByAggregateInput
    _avg?: CalcConditionAvgOrderByAggregateInput
    _max?: CalcConditionMaxOrderByAggregateInput
    _min?: CalcConditionMinOrderByAggregateInput
    _sum?: CalcConditionSumOrderByAggregateInput
  }

  export type CalcConditionScalarWhereWithAggregatesInput = {
    AND?: CalcConditionScalarWhereWithAggregatesInput | CalcConditionScalarWhereWithAggregatesInput[]
    OR?: CalcConditionScalarWhereWithAggregatesInput[]
    NOT?: CalcConditionScalarWhereWithAggregatesInput | CalcConditionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CalcCondition"> | number
    itemId?: IntWithAggregatesFilter<"CalcCondition"> | number
    label?: StringWithAggregatesFilter<"CalcCondition"> | string
    description?: StringNullableWithAggregatesFilter<"CalcCondition"> | string | null
    multiplier?: FloatWithAggregatesFilter<"CalcCondition"> | number
    isDefault?: BoolWithAggregatesFilter<"CalcCondition"> | boolean
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyCreateNestedManyWithoutClientInput
    certificates?: CertificateCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectCreateNestedManyWithoutClientInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyUncheckedCreateNestedManyWithoutClientInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectUncheckedCreateNestedManyWithoutClientInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUpdateManyWithoutClientNestedInput
    certificates?: CertificateUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUpdateManyWithoutClientNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUncheckedUpdateManyWithoutClientNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUncheckedUpdateManyWithoutClientNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReviewCreateInput = {
    clientName: string
    rating: number
    content: string
    status?: $Enums.ReviewStatus
    companyReply?: string | null
    createdAt?: Date | string
    project?: ProjectCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    clientName: string
    rating: number
    content: string
    status?: $Enums.ReviewStatus
    companyReply?: string | null
    createdAt?: Date | string
    projectId?: number | null
  }

  export type ReviewUpdateInput = {
    clientName?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    companyReply?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    companyReply?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ReviewCreateManyInput = {
    id?: number
    clientName: string
    rating: number
    content: string
    status?: $Enums.ReviewStatus
    companyReply?: string | null
    createdAt?: Date | string
    projectId?: number | null
  }

  export type ReviewUpdateManyMutationInput = {
    clientName?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    companyReply?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    companyReply?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ServiceCreateInput = {
    title: string
    category: string
    description?: string | null
    icon: string
    isFeatured?: boolean
    sortOrder?: number
    isHot?: boolean
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ServiceUncheckedCreateInput = {
    id?: number
    title: string
    category: string
    description?: string | null
    icon: string
    isFeatured?: boolean
    sortOrder?: number
    isHot?: boolean
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ServiceUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ServiceCreateManyInput = {
    id?: number
    title: string
    category: string
    description?: string | null
    icon: string
    isFeatured?: boolean
    sortOrder?: number
    isHot?: boolean
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ServiceUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: StringFieldUpdateOperationsInput | string
    isFeatured?: BoolFieldUpdateOperationsInput | boolean
    sortOrder?: IntFieldUpdateOperationsInput | number
    isHot?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WarrantyCreateInput = {
    projectId?: number | null
    startDate: Date | string
    durationMonths: number
    projectName: string
    createdAt?: Date | string
    client: UserCreateNestedOneWithoutWarrantiesInput
  }

  export type WarrantyUncheckedCreateInput = {
    id?: number
    projectId?: number | null
    clientId: string
    startDate: Date | string
    durationMonths: number
    projectName: string
    createdAt?: Date | string
  }

  export type WarrantyUpdateInput = {
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: UserUpdateOneRequiredWithoutWarrantiesNestedInput
  }

  export type WarrantyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarrantyCreateManyInput = {
    id?: number
    projectId?: number | null
    clientId: string
    startDate: Date | string
    durationMonths: number
    projectName: string
    createdAt?: Date | string
  }

  export type WarrantyUpdateManyMutationInput = {
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarrantyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateCreateInput = {
    fileUrl: string
    title: string
    issuedDate: Date | string
    createdAt?: Date | string
    client: UserCreateNestedOneWithoutCertificatesInput
  }

  export type CertificateUncheckedCreateInput = {
    id?: number
    clientId: string
    fileUrl: string
    title: string
    issuedDate: Date | string
    createdAt?: Date | string
  }

  export type CertificateUpdateInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: UserUpdateOneRequiredWithoutCertificatesNestedInput
  }

  export type CertificateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateCreateManyInput = {
    id?: number
    clientId: string
    fileUrl: string
    title: string
    issuedDate: Date | string
    createdAt?: Date | string
  }

  export type CertificateUpdateManyMutationInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    client: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    clientId: string
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    clientId: string
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    id?: string
    title: string
    slug: string
    category: string
    content: string
    imagePath: string
    seoTitle?: string | null
    seoDescription?: string | null
    seoKeywords?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUncheckedCreateInput = {
    id?: string
    title: string
    slug: string
    category: string
    content: string
    imagePath: string
    seoTitle?: string | null
    seoDescription?: string | null
    seoKeywords?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateManyInput = {
    id?: string
    title: string
    slug: string
    category: string
    content: string
    imagePath: string
    seoTitle?: string | null
    seoDescription?: string | null
    seoKeywords?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePath?: StringFieldUpdateOperationsInput | string
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionCreateInput = {
    userId?: number | null
    sessionKey?: string | null
    createdAt?: Date | string
    messages?: MessageCreateNestedManyWithoutChatSessionInput
  }

  export type ChatSessionUncheckedCreateInput = {
    id?: number
    userId?: number | null
    sessionKey?: string | null
    createdAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutChatSessionInput
  }

  export type ChatSessionUpdateInput = {
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutChatSessionNestedInput
  }

  export type ChatSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutChatSessionNestedInput
  }

  export type ChatSessionCreateManyInput = {
    id?: number
    userId?: number | null
    sessionKey?: string | null
    createdAt?: Date | string
  }

  export type ChatSessionUpdateManyMutationInput = {
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    sender: string
    content: string
    isTransferred?: boolean
    createdAt?: Date | string
    chatSession: ChatSessionCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    chatSessionId: number
    sender: string
    content: string
    isTransferred?: boolean
    createdAt?: Date | string
  }

  export type MessageUpdateInput = {
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTransferred?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatSession?: ChatSessionUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatSessionId?: IntFieldUpdateOperationsInput | number
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTransferred?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: number
    chatSessionId: number
    sender: string
    content: string
    isTransferred?: boolean
    createdAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTransferred?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatSessionId?: IntFieldUpdateOperationsInput | number
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTransferred?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeBaseCreateInput = {
    title: string
    content: string
    createdAt?: Date | string
  }

  export type KnowledgeBaseUncheckedCreateInput = {
    id?: number
    title: string
    content: string
    createdAt?: Date | string
  }

  export type KnowledgeBaseUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeBaseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeBaseCreateManyInput = {
    id?: number
    title: string
    content: string
    createdAt?: Date | string
  }

  export type KnowledgeBaseUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeBaseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    title: string
    slug: string
    description: string
    content: string
    imagePaths?: ProjectCreateimagePathsInput | string[]
    videoUrl?: string | null
    category: string
    tags?: ProjectCreatetagsInput | string[]
    location?: string | null
    completionDate?: Date | string | null
    seoTitle?: string | null
    seoDescription?: string | null
    seoKeywords?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    reviews?: ReviewCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    description: string
    content: string
    imagePaths?: ProjectCreateimagePathsInput | string[]
    videoUrl?: string | null
    category: string
    tags?: ProjectCreatetagsInput | string[]
    location?: string | null
    completionDate?: Date | string | null
    seoTitle?: string | null
    seoDescription?: string | null
    seoKeywords?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    reviews?: ReviewUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePaths?: ProjectUpdateimagePathsInput | string[]
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: ProjectUpdatetagsInput | string[]
    location?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviews?: ReviewUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePaths?: ProjectUpdateimagePathsInput | string[]
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: ProjectUpdatetagsInput | string[]
    location?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviews?: ReviewUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: number
    title: string
    slug: string
    description: string
    content: string
    imagePaths?: ProjectCreateimagePathsInput | string[]
    videoUrl?: string | null
    category: string
    tags?: ProjectCreatetagsInput | string[]
    location?: string | null
    completionDate?: Date | string | null
    seoTitle?: string | null
    seoDescription?: string | null
    seoKeywords?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ProjectUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePaths?: ProjectUpdateimagePathsInput | string[]
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: ProjectUpdatetagsInput | string[]
    location?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePaths?: ProjectUpdateimagePathsInput | string[]
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: ProjectUpdatetagsInput | string[]
    location?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectTypeCreateInput = {
    name: string
    slug: string
    description?: string | null
    icon?: string | null
    steps?: number
    active?: boolean
    createdAt?: Date | string
    packages?: WorkPackageCreateNestedManyWithoutProjectTypeInput
  }

  export type ProjectTypeUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    icon?: string | null
    steps?: number
    active?: boolean
    createdAt?: Date | string
    packages?: WorkPackageUncheckedCreateNestedManyWithoutProjectTypeInput
  }

  export type ProjectTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: WorkPackageUpdateManyWithoutProjectTypeNestedInput
  }

  export type ProjectTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: WorkPackageUncheckedUpdateManyWithoutProjectTypeNestedInput
  }

  export type ProjectTypeCreateManyInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    icon?: string | null
    steps?: number
    active?: boolean
    createdAt?: Date | string
  }

  export type ProjectTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkPackageCreateInput = {
    name: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
    projectType: ProjectTypeCreateNestedOneWithoutPackagesInput
    services?: ServiceItemCreateNestedManyWithoutPackageInput
  }

  export type WorkPackageUncheckedCreateInput = {
    id?: number
    projectTypeId: number
    name: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
    services?: ServiceItemUncheckedCreateNestedManyWithoutPackageInput
  }

  export type WorkPackageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectType?: ProjectTypeUpdateOneRequiredWithoutPackagesNestedInput
    services?: ServiceItemUpdateManyWithoutPackageNestedInput
  }

  export type WorkPackageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceItemUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type WorkPackageCreateManyInput = {
    id?: number
    projectTypeId: number
    name: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type WorkPackageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkPackageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceItemCreateInput = {
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    package: WorkPackageCreateNestedOneWithoutServicesInput
    options?: ServiceOptionCreateNestedManyWithoutServiceInput
    followUps?: FollowUpCreateNestedManyWithoutSourceInput
    suggestedBy?: FollowUpCreateNestedManyWithoutTargetInput
  }

  export type ServiceItemUncheckedCreateInput = {
    id?: number
    packageId: number
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    options?: ServiceOptionUncheckedCreateNestedManyWithoutServiceInput
    followUps?: FollowUpUncheckedCreateNestedManyWithoutSourceInput
    suggestedBy?: FollowUpUncheckedCreateNestedManyWithoutTargetInput
  }

  export type ServiceItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: WorkPackageUpdateOneRequiredWithoutServicesNestedInput
    options?: ServiceOptionUpdateManyWithoutServiceNestedInput
    followUps?: FollowUpUpdateManyWithoutSourceNestedInput
    suggestedBy?: FollowUpUpdateManyWithoutTargetNestedInput
  }

  export type ServiceItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: ServiceOptionUncheckedUpdateManyWithoutServiceNestedInput
    followUps?: FollowUpUncheckedUpdateManyWithoutSourceNestedInput
    suggestedBy?: FollowUpUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type ServiceItemCreateManyInput = {
    id?: number
    packageId: number
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type ServiceItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceOptionCreateInput = {
    name: string
    priceDelta: number
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    service: ServiceItemCreateNestedOneWithoutOptionsInput
  }

  export type ServiceOptionUncheckedCreateInput = {
    id?: number
    serviceId: number
    name: string
    priceDelta: number
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type ServiceOptionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    priceDelta?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServiceItemUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type ServiceOptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    priceDelta?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceOptionCreateManyInput = {
    id?: number
    serviceId: number
    name: string
    priceDelta: number
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type ServiceOptionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    priceDelta?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceOptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    priceDelta?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUpCreateInput = {
    reason?: string | null
    condition?: string | null
    source: ServiceItemCreateNestedOneWithoutFollowUpsInput
    target: ServiceItemCreateNestedOneWithoutSuggestedByInput
  }

  export type FollowUpUncheckedCreateInput = {
    id?: number
    sourceId: number
    targetId: number
    reason?: string | null
    condition?: string | null
  }

  export type FollowUpUpdateInput = {
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    source?: ServiceItemUpdateOneRequiredWithoutFollowUpsNestedInput
    target?: ServiceItemUpdateOneRequiredWithoutSuggestedByNestedInput
  }

  export type FollowUpUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FollowUpCreateManyInput = {
    id?: number
    sourceId: number
    targetId: number
    reason?: string | null
    condition?: string | null
  }

  export type FollowUpUpdateManyMutationInput = {
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FollowUpUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceId?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvoiceCreateInput = {
    title: string
    fileUrl: string
    issuedDate?: Date | string
    totalAmount: number
    projectName: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    client: UserCreateNestedOneWithoutInvoicesInput
  }

  export type InvoiceUncheckedCreateInput = {
    id?: number
    clientId: string
    title: string
    fileUrl: string
    issuedDate?: Date | string
    totalAmount: number
    projectName: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InvoiceUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    client?: UserUpdateOneRequiredWithoutInvoicesNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvoiceCreateManyInput = {
    id?: number
    clientId: string
    title: string
    fileUrl: string
    issuedDate?: Date | string
    totalAmount: number
    projectName: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InvoiceUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientProjectCreateInput = {
    name: string
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: UserCreateNestedOneWithoutClientProjectsInput
    history?: ClientProjectHistoryCreateNestedManyWithoutClientProjectInput
  }

  export type ClientProjectUncheckedCreateInput = {
    id?: number
    clientId: string
    name: string
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: ClientProjectHistoryUncheckedCreateNestedManyWithoutClientProjectInput
  }

  export type ClientProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: UserUpdateOneRequiredWithoutClientProjectsNestedInput
    history?: ClientProjectHistoryUpdateManyWithoutClientProjectNestedInput
  }

  export type ClientProjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: ClientProjectHistoryUncheckedUpdateManyWithoutClientProjectNestedInput
  }

  export type ClientProjectCreateManyInput = {
    id?: number
    clientId: string
    name: string
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientProjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientProjectHistoryCreateInput = {
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    clientProject: ClientProjectCreateNestedOneWithoutHistoryInput
  }

  export type ClientProjectHistoryUncheckedCreateInput = {
    id?: number
    clientProjectId: number
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ClientProjectHistoryUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientProject?: ClientProjectUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type ClientProjectHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientProjectId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientProjectHistoryCreateManyInput = {
    id?: number
    clientProjectId: number
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ClientProjectHistoryUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientProjectHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientProjectId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatThreadCreateInput = {
    id?: string
    sessionKey: string
    isEscalated?: boolean
    createdAt?: Date | string
    messages?: AiChatMessageCreateNestedManyWithoutThreadInput
    escalation?: AiChatEscalationCreateNestedOneWithoutThreadInput
  }

  export type AiChatThreadUncheckedCreateInput = {
    id?: string
    sessionKey: string
    isEscalated?: boolean
    createdAt?: Date | string
    messages?: AiChatMessageUncheckedCreateNestedManyWithoutThreadInput
    escalation?: AiChatEscalationUncheckedCreateNestedOneWithoutThreadInput
  }

  export type AiChatThreadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    isEscalated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: AiChatMessageUpdateManyWithoutThreadNestedInput
    escalation?: AiChatEscalationUpdateOneWithoutThreadNestedInput
  }

  export type AiChatThreadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    isEscalated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: AiChatMessageUncheckedUpdateManyWithoutThreadNestedInput
    escalation?: AiChatEscalationUncheckedUpdateOneWithoutThreadNestedInput
  }

  export type AiChatThreadCreateManyInput = {
    id?: string
    sessionKey: string
    isEscalated?: boolean
    createdAt?: Date | string
  }

  export type AiChatThreadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    isEscalated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatThreadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    isEscalated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatMessageCreateInput = {
    id?: string
    sender: string
    content: string
    createdAt?: Date | string
    thread: AiChatThreadCreateNestedOneWithoutMessagesInput
  }

  export type AiChatMessageUncheckedCreateInput = {
    id?: string
    threadId: string
    sender: string
    content: string
    createdAt?: Date | string
  }

  export type AiChatMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thread?: AiChatThreadUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type AiChatMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatMessageCreateManyInput = {
    id?: string
    threadId: string
    sender: string
    content: string
    createdAt?: Date | string
  }

  export type AiChatMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatEscalationCreateInput = {
    name?: string | null
    email: string
    message?: string | null
    createdAt?: Date | string
    thread: AiChatThreadCreateNestedOneWithoutEscalationInput
  }

  export type AiChatEscalationUncheckedCreateInput = {
    id?: number
    sessionKey: string
    name?: string | null
    email: string
    message?: string | null
    createdAt?: Date | string
  }

  export type AiChatEscalationUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    thread?: AiChatThreadUpdateOneRequiredWithoutEscalationNestedInput
  }

  export type AiChatEscalationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatEscalationCreateManyInput = {
    id?: number
    sessionKey: string
    name?: string | null
    email: string
    message?: string | null
    createdAt?: Date | string
  }

  export type AiChatEscalationUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatEscalationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionKey?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcCategoryCreateInput = {
    name: string
    slug: string
    description?: string | null
    isPopular?: boolean
    projectType?: CalcProjectTypeCreateNestedOneWithoutCategoriesInput
    items?: CalcItemCreateNestedManyWithoutCategoryInput
  }

  export type CalcCategoryUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isPopular?: boolean
    projectTypeId?: number | null
    items?: CalcItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CalcCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPopular?: BoolFieldUpdateOperationsInput | boolean
    projectType?: CalcProjectTypeUpdateOneWithoutCategoriesNestedInput
    items?: CalcItemUpdateManyWithoutCategoryNestedInput
  }

  export type CalcCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPopular?: BoolFieldUpdateOperationsInput | boolean
    projectTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    items?: CalcItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CalcCategoryCreateManyInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isPopular?: boolean
    projectTypeId?: number | null
  }

  export type CalcCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPopular?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CalcCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPopular?: BoolFieldUpdateOperationsInput | boolean
    projectTypeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CalcItemCreateInput = {
    name: string
    description?: string | null
    unitType: $Enums.CalcUnitType
    minPrice: number
    maxPrice: number
    baseMin?: number
    baseMax?: number
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CalcCategoryCreateNestedOneWithoutItemsInput
    conditions?: CalcConditionCreateNestedManyWithoutItemInput
  }

  export type CalcItemUncheckedCreateInput = {
    id?: number
    categoryId: number
    name: string
    description?: string | null
    unitType: $Enums.CalcUnitType
    minPrice: number
    maxPrice: number
    baseMin?: number
    baseMax?: number
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: CalcConditionUncheckedCreateNestedManyWithoutItemInput
  }

  export type CalcItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitType?: EnumCalcUnitTypeFieldUpdateOperationsInput | $Enums.CalcUnitType
    minPrice?: FloatFieldUpdateOperationsInput | number
    maxPrice?: FloatFieldUpdateOperationsInput | number
    baseMin?: FloatFieldUpdateOperationsInput | number
    baseMax?: FloatFieldUpdateOperationsInput | number
    vatIncluded?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CalcCategoryUpdateOneRequiredWithoutItemsNestedInput
    conditions?: CalcConditionUpdateManyWithoutItemNestedInput
  }

  export type CalcItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitType?: EnumCalcUnitTypeFieldUpdateOperationsInput | $Enums.CalcUnitType
    minPrice?: FloatFieldUpdateOperationsInput | number
    maxPrice?: FloatFieldUpdateOperationsInput | number
    baseMin?: FloatFieldUpdateOperationsInput | number
    baseMax?: FloatFieldUpdateOperationsInput | number
    vatIncluded?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: CalcConditionUncheckedUpdateManyWithoutItemNestedInput
  }

  export type CalcItemCreateManyInput = {
    id?: number
    categoryId: number
    name: string
    description?: string | null
    unitType: $Enums.CalcUnitType
    minPrice: number
    maxPrice: number
    baseMin?: number
    baseMax?: number
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalcItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitType?: EnumCalcUnitTypeFieldUpdateOperationsInput | $Enums.CalcUnitType
    minPrice?: FloatFieldUpdateOperationsInput | number
    maxPrice?: FloatFieldUpdateOperationsInput | number
    baseMin?: FloatFieldUpdateOperationsInput | number
    baseMax?: FloatFieldUpdateOperationsInput | number
    vatIncluded?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitType?: EnumCalcUnitTypeFieldUpdateOperationsInput | $Enums.CalcUnitType
    minPrice?: FloatFieldUpdateOperationsInput | number
    maxPrice?: FloatFieldUpdateOperationsInput | number
    baseMin?: FloatFieldUpdateOperationsInput | number
    baseMax?: FloatFieldUpdateOperationsInput | number
    vatIncluded?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcSettingsCreateInput = {
    id?: number
    callOutThreshold?: number
    callOutFeeMin?: number
    callOutFeeMax?: number
    urgencyMultiplier?: number
    emergencyMultiplier?: number
    projectTrigger?: number
    projectFeePercent?: number
  }

  export type CalcSettingsUncheckedCreateInput = {
    id?: number
    callOutThreshold?: number
    callOutFeeMin?: number
    callOutFeeMax?: number
    urgencyMultiplier?: number
    emergencyMultiplier?: number
    projectTrigger?: number
    projectFeePercent?: number
  }

  export type CalcSettingsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    callOutThreshold?: FloatFieldUpdateOperationsInput | number
    callOutFeeMin?: FloatFieldUpdateOperationsInput | number
    callOutFeeMax?: FloatFieldUpdateOperationsInput | number
    urgencyMultiplier?: FloatFieldUpdateOperationsInput | number
    emergencyMultiplier?: FloatFieldUpdateOperationsInput | number
    projectTrigger?: FloatFieldUpdateOperationsInput | number
    projectFeePercent?: FloatFieldUpdateOperationsInput | number
  }

  export type CalcSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    callOutThreshold?: FloatFieldUpdateOperationsInput | number
    callOutFeeMin?: FloatFieldUpdateOperationsInput | number
    callOutFeeMax?: FloatFieldUpdateOperationsInput | number
    urgencyMultiplier?: FloatFieldUpdateOperationsInput | number
    emergencyMultiplier?: FloatFieldUpdateOperationsInput | number
    projectTrigger?: FloatFieldUpdateOperationsInput | number
    projectFeePercent?: FloatFieldUpdateOperationsInput | number
  }

  export type CalcSettingsCreateManyInput = {
    id?: number
    callOutThreshold?: number
    callOutFeeMin?: number
    callOutFeeMax?: number
    urgencyMultiplier?: number
    emergencyMultiplier?: number
    projectTrigger?: number
    projectFeePercent?: number
  }

  export type CalcSettingsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    callOutThreshold?: FloatFieldUpdateOperationsInput | number
    callOutFeeMin?: FloatFieldUpdateOperationsInput | number
    callOutFeeMax?: FloatFieldUpdateOperationsInput | number
    urgencyMultiplier?: FloatFieldUpdateOperationsInput | number
    emergencyMultiplier?: FloatFieldUpdateOperationsInput | number
    projectTrigger?: FloatFieldUpdateOperationsInput | number
    projectFeePercent?: FloatFieldUpdateOperationsInput | number
  }

  export type CalcSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    callOutThreshold?: FloatFieldUpdateOperationsInput | number
    callOutFeeMin?: FloatFieldUpdateOperationsInput | number
    callOutFeeMax?: FloatFieldUpdateOperationsInput | number
    urgencyMultiplier?: FloatFieldUpdateOperationsInput | number
    emergencyMultiplier?: FloatFieldUpdateOperationsInput | number
    projectTrigger?: FloatFieldUpdateOperationsInput | number
    projectFeePercent?: FloatFieldUpdateOperationsInput | number
  }

  export type CalcRequestCreateInput = {
    name: string
    email: string
    phone: string
    postcode: string
    categorySlug: string
    data: JsonNullValueInput | InputJsonValue
    urgency: string
    estimateMin: number
    estimateMax: number
    createdAt?: Date | string
  }

  export type CalcRequestUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone: string
    postcode: string
    categorySlug: string
    data: JsonNullValueInput | InputJsonValue
    urgency: string
    estimateMin: number
    estimateMax: number
    createdAt?: Date | string
  }

  export type CalcRequestUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    categorySlug?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    urgency?: StringFieldUpdateOperationsInput | string
    estimateMin?: FloatFieldUpdateOperationsInput | number
    estimateMax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    categorySlug?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    urgency?: StringFieldUpdateOperationsInput | string
    estimateMin?: FloatFieldUpdateOperationsInput | number
    estimateMax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcRequestCreateManyInput = {
    id?: number
    name: string
    email: string
    phone: string
    postcode: string
    categorySlug: string
    data: JsonNullValueInput | InputJsonValue
    urgency: string
    estimateMin: number
    estimateMax: number
    createdAt?: Date | string
  }

  export type CalcRequestUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    categorySlug?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    urgency?: StringFieldUpdateOperationsInput | string
    estimateMin?: FloatFieldUpdateOperationsInput | number
    estimateMax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    categorySlug?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    urgency?: StringFieldUpdateOperationsInput | string
    estimateMin?: FloatFieldUpdateOperationsInput | number
    estimateMax?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcProjectTypeCreateInput = {
    name: string
    slug: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
    categories?: CalcCategoryCreateNestedManyWithoutProjectTypeInput
  }

  export type CalcProjectTypeUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
    categories?: CalcCategoryUncheckedCreateNestedManyWithoutProjectTypeInput
  }

  export type CalcProjectTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CalcCategoryUpdateManyWithoutProjectTypeNestedInput
  }

  export type CalcProjectTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CalcCategoryUncheckedUpdateManyWithoutProjectTypeNestedInput
  }

  export type CalcProjectTypeCreateManyInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type CalcProjectTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcProjectTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcConditionCreateInput = {
    label: string
    description?: string | null
    multiplier: number
    isDefault?: boolean
    item: CalcItemCreateNestedOneWithoutConditionsInput
  }

  export type CalcConditionUncheckedCreateInput = {
    id?: number
    itemId: number
    label: string
    description?: string | null
    multiplier: number
    isDefault?: boolean
  }

  export type CalcConditionUpdateInput = {
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    multiplier?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    item?: CalcItemUpdateOneRequiredWithoutConditionsNestedInput
  }

  export type CalcConditionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    multiplier?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CalcConditionCreateManyInput = {
    id?: number
    itemId: number
    label: string
    description?: string | null
    multiplier: number
    isDefault?: boolean
  }

  export type CalcConditionUpdateManyMutationInput = {
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    multiplier?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CalcConditionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    itemId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    multiplier?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type WarrantyListRelationFilter = {
    every?: WarrantyWhereInput
    some?: WarrantyWhereInput
    none?: WarrantyWhereInput
  }

  export type CertificateListRelationFilter = {
    every?: CertificateWhereInput
    some?: CertificateWhereInput
    none?: CertificateWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type ClientProjectListRelationFilter = {
    every?: ClientProjectWhereInput
    some?: ClientProjectWhereInput
    none?: ClientProjectWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WarrantyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    lastLogin?: SortOrder
    isConfirmed?: SortOrder
    isActive?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    lastLogin?: SortOrder
    isConfirmed?: SortOrder
    isActive?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    lastLogin?: SortOrder
    isConfirmed?: SortOrder
    isActive?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumReviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewStatusFilter<$PrismaModel> | $Enums.ReviewStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProjectNullableScalarRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    clientName?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    status?: SortOrder
    companyReply?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    projectId?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    clientName?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    status?: SortOrder
    companyReply?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    clientName?: SortOrder
    rating?: SortOrder
    content?: SortOrder
    status?: SortOrder
    companyReply?: SortOrder
    createdAt?: SortOrder
    projectId?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    projectId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumReviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewStatusFilter<$PrismaModel>
    _max?: NestedEnumReviewStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    isFeatured?: SortOrder
    sortOrder?: SortOrder
    isHot?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    sortOrder?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    isFeatured?: SortOrder
    sortOrder?: SortOrder
    isHot?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    isFeatured?: SortOrder
    sortOrder?: SortOrder
    isHot?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    id?: SortOrder
    sortOrder?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type WarrantyCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
  }

  export type WarrantyAvgOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    durationMonths?: SortOrder
  }

  export type WarrantyMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
  }

  export type WarrantyMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    clientId?: SortOrder
    startDate?: SortOrder
    durationMonths?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
  }

  export type WarrantySumOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    durationMonths?: SortOrder
  }

  export type CertificateCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    fileUrl?: SortOrder
    title?: SortOrder
    issuedDate?: SortOrder
    createdAt?: SortOrder
  }

  export type CertificateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CertificateMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    fileUrl?: SortOrder
    title?: SortOrder
    issuedDate?: SortOrder
    createdAt?: SortOrder
  }

  export type CertificateMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    fileUrl?: SortOrder
    title?: SortOrder
    issuedDate?: SortOrder
    createdAt?: SortOrder
  }

  export type CertificateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    category?: SortOrder
    content?: SortOrder
    imagePath?: SortOrder
    seoTitle?: SortOrder
    seoDescription?: SortOrder
    seoKeywords?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    category?: SortOrder
    content?: SortOrder
    imagePath?: SortOrder
    seoTitle?: SortOrder
    seoDescription?: SortOrder
    seoKeywords?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    category?: SortOrder
    content?: SortOrder
    imagePath?: SortOrder
    seoTitle?: SortOrder
    seoDescription?: SortOrder
    seoKeywords?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionKey?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ChatSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionKey?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionKey?: SortOrder
    createdAt?: SortOrder
  }

  export type ChatSessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ChatSessionScalarRelationFilter = {
    is?: ChatSessionWhereInput
    isNot?: ChatSessionWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    chatSessionId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    isTransferred?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    chatSessionId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    chatSessionId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    isTransferred?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    chatSessionId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    isTransferred?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    chatSessionId?: SortOrder
  }

  export type KnowledgeBaseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type KnowledgeBaseAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KnowledgeBaseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type KnowledgeBaseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type KnowledgeBaseSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    content?: SortOrder
    imagePaths?: SortOrder
    videoUrl?: SortOrder
    category?: SortOrder
    tags?: SortOrder
    location?: SortOrder
    completionDate?: SortOrder
    seoTitle?: SortOrder
    seoDescription?: SortOrder
    seoKeywords?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    content?: SortOrder
    videoUrl?: SortOrder
    category?: SortOrder
    location?: SortOrder
    completionDate?: SortOrder
    seoTitle?: SortOrder
    seoDescription?: SortOrder
    seoKeywords?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    content?: SortOrder
    videoUrl?: SortOrder
    category?: SortOrder
    location?: SortOrder
    completionDate?: SortOrder
    seoTitle?: SortOrder
    seoDescription?: SortOrder
    seoKeywords?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type WorkPackageListRelationFilter = {
    every?: WorkPackageWhereInput
    some?: WorkPackageWhereInput
    none?: WorkPackageWhereInput
  }

  export type WorkPackageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    steps?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    steps?: SortOrder
  }

  export type ProjectTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    steps?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    icon?: SortOrder
    steps?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
  }

  export type ProjectTypeSumOrderByAggregateInput = {
    id?: SortOrder
    steps?: SortOrder
  }

  export type ProjectTypeScalarRelationFilter = {
    is?: ProjectTypeWhereInput
    isNot?: ProjectTypeWhereInput
  }

  export type ServiceItemListRelationFilter = {
    every?: ServiceItemWhereInput
    some?: ServiceItemWhereInput
    none?: ServiceItemWhereInput
  }

  export type ServiceItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkPackageCountOrderByAggregateInput = {
    id?: SortOrder
    projectTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkPackageAvgOrderByAggregateInput = {
    id?: SortOrder
    projectTypeId?: SortOrder
    sortOrder?: SortOrder
  }

  export type WorkPackageMaxOrderByAggregateInput = {
    id?: SortOrder
    projectTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkPackageMinOrderByAggregateInput = {
    id?: SortOrder
    projectTypeId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type WorkPackageSumOrderByAggregateInput = {
    id?: SortOrder
    projectTypeId?: SortOrder
    sortOrder?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type WorkPackageScalarRelationFilter = {
    is?: WorkPackageWhereInput
    isNot?: WorkPackageWhereInput
  }

  export type ServiceOptionListRelationFilter = {
    every?: ServiceOptionWhereInput
    some?: ServiceOptionWhereInput
    none?: ServiceOptionWhereInput
  }

  export type FollowUpListRelationFilter = {
    every?: FollowUpWhereInput
    some?: FollowUpWhereInput
    none?: FollowUpWhereInput
  }

  export type ServiceOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowUpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceItemCountOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    group?: SortOrder
    unit?: SortOrder
    basePrice?: SortOrder
    multiplier?: SortOrder
    required?: SortOrder
    visibleByDefault?: SortOrder
    aiSuggestible?: SortOrder
    additionalNotes?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceItemAvgOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    basePrice?: SortOrder
    multiplier?: SortOrder
    sortOrder?: SortOrder
  }

  export type ServiceItemMaxOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    group?: SortOrder
    unit?: SortOrder
    basePrice?: SortOrder
    multiplier?: SortOrder
    required?: SortOrder
    visibleByDefault?: SortOrder
    aiSuggestible?: SortOrder
    additionalNotes?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceItemMinOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    group?: SortOrder
    unit?: SortOrder
    basePrice?: SortOrder
    multiplier?: SortOrder
    required?: SortOrder
    visibleByDefault?: SortOrder
    aiSuggestible?: SortOrder
    additionalNotes?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceItemSumOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    basePrice?: SortOrder
    multiplier?: SortOrder
    sortOrder?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ServiceItemScalarRelationFilter = {
    is?: ServiceItemWhereInput
    isNot?: ServiceItemWhereInput
  }

  export type ServiceOptionCountOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    name?: SortOrder
    priceDelta?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceOptionAvgOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    priceDelta?: SortOrder
  }

  export type ServiceOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    name?: SortOrder
    priceDelta?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceOptionMinOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    name?: SortOrder
    priceDelta?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type ServiceOptionSumOrderByAggregateInput = {
    id?: SortOrder
    serviceId?: SortOrder
    priceDelta?: SortOrder
  }

  export type FollowUpCountOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    reason?: SortOrder
    condition?: SortOrder
  }

  export type FollowUpAvgOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
  }

  export type FollowUpMaxOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    reason?: SortOrder
    condition?: SortOrder
  }

  export type FollowUpMinOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
    reason?: SortOrder
    condition?: SortOrder
  }

  export type FollowUpSumOrderByAggregateInput = {
    id?: SortOrder
    sourceId?: SortOrder
    targetId?: SortOrder
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    issuedDate?: SortOrder
    totalAmount?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    issuedDate?: SortOrder
    totalAmount?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    fileUrl?: SortOrder
    issuedDate?: SortOrder
    totalAmount?: SortOrder
    projectName?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    id?: SortOrder
    totalAmount?: SortOrder
  }

  export type ClientProjectHistoryListRelationFilter = {
    every?: ClientProjectHistoryWhereInput
    some?: ClientProjectHistoryWhereInput
    none?: ClientProjectHistoryWhereInput
  }

  export type ClientProjectHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClientProjectCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientProjectAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientProjectMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClientProjectSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientProjectScalarRelationFilter = {
    is?: ClientProjectWhereInput
    isNot?: ClientProjectWhereInput
  }

  export type ClientProjectHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    clientProjectId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ClientProjectHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    clientProjectId?: SortOrder
  }

  export type ClientProjectHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    clientProjectId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ClientProjectHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    clientProjectId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    deletedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type ClientProjectHistorySumOrderByAggregateInput = {
    id?: SortOrder
    clientProjectId?: SortOrder
  }

  export type AiChatMessageListRelationFilter = {
    every?: AiChatMessageWhereInput
    some?: AiChatMessageWhereInput
    none?: AiChatMessageWhereInput
  }

  export type AiChatEscalationNullableScalarRelationFilter = {
    is?: AiChatEscalationWhereInput | null
    isNot?: AiChatEscalationWhereInput | null
  }

  export type AiChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AiChatThreadCountOrderByAggregateInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    isEscalated?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatThreadMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    isEscalated?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatThreadMinOrderByAggregateInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    isEscalated?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatThreadScalarRelationFilter = {
    is?: AiChatThreadWhereInput
    isNot?: AiChatThreadWhereInput
  }

  export type AiChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    sender?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatEscalationCountOrderByAggregateInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    name?: SortOrder
    email?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatEscalationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AiChatEscalationMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    name?: SortOrder
    email?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatEscalationMinOrderByAggregateInput = {
    id?: SortOrder
    sessionKey?: SortOrder
    name?: SortOrder
    email?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
  }

  export type AiChatEscalationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CalcProjectTypeNullableScalarRelationFilter = {
    is?: CalcProjectTypeWhereInput | null
    isNot?: CalcProjectTypeWhereInput | null
  }

  export type CalcItemListRelationFilter = {
    every?: CalcItemWhereInput
    some?: CalcItemWhereInput
    none?: CalcItemWhereInput
  }

  export type CalcItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CalcCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isPopular?: SortOrder
    projectTypeId?: SortOrder
  }

  export type CalcCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    projectTypeId?: SortOrder
  }

  export type CalcCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isPopular?: SortOrder
    projectTypeId?: SortOrder
  }

  export type CalcCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    isPopular?: SortOrder
    projectTypeId?: SortOrder
  }

  export type CalcCategorySumOrderByAggregateInput = {
    id?: SortOrder
    projectTypeId?: SortOrder
  }

  export type EnumCalcUnitTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CalcUnitType | EnumCalcUnitTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalcUnitType[] | ListEnumCalcUnitTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalcUnitType[] | ListEnumCalcUnitTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalcUnitTypeFilter<$PrismaModel> | $Enums.CalcUnitType
  }

  export type CalcCategoryScalarRelationFilter = {
    is?: CalcCategoryWhereInput
    isNot?: CalcCategoryWhereInput
  }

  export type CalcConditionListRelationFilter = {
    every?: CalcConditionWhereInput
    some?: CalcConditionWhereInput
    none?: CalcConditionWhereInput
  }

  export type CalcConditionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CalcItemCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    unitType?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    baseMin?: SortOrder
    baseMax?: SortOrder
    vatIncluded?: SortOrder
    visible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CalcItemAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    baseMin?: SortOrder
    baseMax?: SortOrder
  }

  export type CalcItemMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    unitType?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    baseMin?: SortOrder
    baseMax?: SortOrder
    vatIncluded?: SortOrder
    visible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CalcItemMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    unitType?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    baseMin?: SortOrder
    baseMax?: SortOrder
    vatIncluded?: SortOrder
    visible?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CalcItemSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    minPrice?: SortOrder
    maxPrice?: SortOrder
    baseMin?: SortOrder
    baseMax?: SortOrder
  }

  export type EnumCalcUnitTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CalcUnitType | EnumCalcUnitTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalcUnitType[] | ListEnumCalcUnitTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalcUnitType[] | ListEnumCalcUnitTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalcUnitTypeWithAggregatesFilter<$PrismaModel> | $Enums.CalcUnitType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCalcUnitTypeFilter<$PrismaModel>
    _max?: NestedEnumCalcUnitTypeFilter<$PrismaModel>
  }

  export type CalcSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    callOutThreshold?: SortOrder
    callOutFeeMin?: SortOrder
    callOutFeeMax?: SortOrder
    urgencyMultiplier?: SortOrder
    emergencyMultiplier?: SortOrder
    projectTrigger?: SortOrder
    projectFeePercent?: SortOrder
  }

  export type CalcSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    callOutThreshold?: SortOrder
    callOutFeeMin?: SortOrder
    callOutFeeMax?: SortOrder
    urgencyMultiplier?: SortOrder
    emergencyMultiplier?: SortOrder
    projectTrigger?: SortOrder
    projectFeePercent?: SortOrder
  }

  export type CalcSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    callOutThreshold?: SortOrder
    callOutFeeMin?: SortOrder
    callOutFeeMax?: SortOrder
    urgencyMultiplier?: SortOrder
    emergencyMultiplier?: SortOrder
    projectTrigger?: SortOrder
    projectFeePercent?: SortOrder
  }

  export type CalcSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    callOutThreshold?: SortOrder
    callOutFeeMin?: SortOrder
    callOutFeeMax?: SortOrder
    urgencyMultiplier?: SortOrder
    emergencyMultiplier?: SortOrder
    projectTrigger?: SortOrder
    projectFeePercent?: SortOrder
  }

  export type CalcSettingsSumOrderByAggregateInput = {
    id?: SortOrder
    callOutThreshold?: SortOrder
    callOutFeeMin?: SortOrder
    callOutFeeMax?: SortOrder
    urgencyMultiplier?: SortOrder
    emergencyMultiplier?: SortOrder
    projectTrigger?: SortOrder
    projectFeePercent?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CalcRequestCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    postcode?: SortOrder
    categorySlug?: SortOrder
    data?: SortOrder
    urgency?: SortOrder
    estimateMin?: SortOrder
    estimateMax?: SortOrder
    createdAt?: SortOrder
  }

  export type CalcRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    estimateMin?: SortOrder
    estimateMax?: SortOrder
  }

  export type CalcRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    postcode?: SortOrder
    categorySlug?: SortOrder
    urgency?: SortOrder
    estimateMin?: SortOrder
    estimateMax?: SortOrder
    createdAt?: SortOrder
  }

  export type CalcRequestMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    postcode?: SortOrder
    categorySlug?: SortOrder
    urgency?: SortOrder
    estimateMin?: SortOrder
    estimateMax?: SortOrder
    createdAt?: SortOrder
  }

  export type CalcRequestSumOrderByAggregateInput = {
    id?: SortOrder
    estimateMin?: SortOrder
    estimateMax?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type CalcCategoryListRelationFilter = {
    every?: CalcCategoryWhereInput
    some?: CalcCategoryWhereInput
    none?: CalcCategoryWhereInput
  }

  export type CalcCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CalcProjectTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type CalcProjectTypeAvgOrderByAggregateInput = {
    id?: SortOrder
    sortOrder?: SortOrder
  }

  export type CalcProjectTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type CalcProjectTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    sortOrder?: SortOrder
    createdAt?: SortOrder
  }

  export type CalcProjectTypeSumOrderByAggregateInput = {
    id?: SortOrder
    sortOrder?: SortOrder
  }

  export type CalcItemScalarRelationFilter = {
    is?: CalcItemWhereInput
    isNot?: CalcItemWhereInput
  }

  export type CalcConditionCountOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    label?: SortOrder
    description?: SortOrder
    multiplier?: SortOrder
    isDefault?: SortOrder
  }

  export type CalcConditionAvgOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    multiplier?: SortOrder
  }

  export type CalcConditionMaxOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    label?: SortOrder
    description?: SortOrder
    multiplier?: SortOrder
    isDefault?: SortOrder
  }

  export type CalcConditionMinOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    label?: SortOrder
    description?: SortOrder
    multiplier?: SortOrder
    isDefault?: SortOrder
  }

  export type CalcConditionSumOrderByAggregateInput = {
    id?: SortOrder
    itemId?: SortOrder
    multiplier?: SortOrder
  }

  export type WarrantyCreateNestedManyWithoutClientInput = {
    create?: XOR<WarrantyCreateWithoutClientInput, WarrantyUncheckedCreateWithoutClientInput> | WarrantyCreateWithoutClientInput[] | WarrantyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: WarrantyCreateOrConnectWithoutClientInput | WarrantyCreateOrConnectWithoutClientInput[]
    createMany?: WarrantyCreateManyClientInputEnvelope
    connect?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
  }

  export type CertificateCreateNestedManyWithoutClientInput = {
    create?: XOR<CertificateCreateWithoutClientInput, CertificateUncheckedCreateWithoutClientInput> | CertificateCreateWithoutClientInput[] | CertificateUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutClientInput | CertificateCreateOrConnectWithoutClientInput[]
    createMany?: CertificateCreateManyClientInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutClientInput = {
    create?: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput> | NotificationCreateWithoutClientInput[] | NotificationUncheckedCreateWithoutClientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClientInput | NotificationCreateOrConnectWithoutClientInput[]
    createMany?: NotificationCreateManyClientInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type InvoiceCreateNestedManyWithoutClientInput = {
    create?: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput> | InvoiceCreateWithoutClientInput[] | InvoiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientInput | InvoiceCreateOrConnectWithoutClientInput[]
    createMany?: InvoiceCreateManyClientInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type ClientProjectCreateNestedManyWithoutClientInput = {
    create?: XOR<ClientProjectCreateWithoutClientInput, ClientProjectUncheckedCreateWithoutClientInput> | ClientProjectCreateWithoutClientInput[] | ClientProjectUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ClientProjectCreateOrConnectWithoutClientInput | ClientProjectCreateOrConnectWithoutClientInput[]
    createMany?: ClientProjectCreateManyClientInputEnvelope
    connect?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
  }

  export type WarrantyUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<WarrantyCreateWithoutClientInput, WarrantyUncheckedCreateWithoutClientInput> | WarrantyCreateWithoutClientInput[] | WarrantyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: WarrantyCreateOrConnectWithoutClientInput | WarrantyCreateOrConnectWithoutClientInput[]
    createMany?: WarrantyCreateManyClientInputEnvelope
    connect?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
  }

  export type CertificateUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<CertificateCreateWithoutClientInput, CertificateUncheckedCreateWithoutClientInput> | CertificateCreateWithoutClientInput[] | CertificateUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutClientInput | CertificateCreateOrConnectWithoutClientInput[]
    createMany?: CertificateCreateManyClientInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput> | NotificationCreateWithoutClientInput[] | NotificationUncheckedCreateWithoutClientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClientInput | NotificationCreateOrConnectWithoutClientInput[]
    createMany?: NotificationCreateManyClientInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type InvoiceUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput> | InvoiceCreateWithoutClientInput[] | InvoiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientInput | InvoiceCreateOrConnectWithoutClientInput[]
    createMany?: InvoiceCreateManyClientInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type ClientProjectUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<ClientProjectCreateWithoutClientInput, ClientProjectUncheckedCreateWithoutClientInput> | ClientProjectCreateWithoutClientInput[] | ClientProjectUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ClientProjectCreateOrConnectWithoutClientInput | ClientProjectCreateOrConnectWithoutClientInput[]
    createMany?: ClientProjectCreateManyClientInputEnvelope
    connect?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type WarrantyUpdateManyWithoutClientNestedInput = {
    create?: XOR<WarrantyCreateWithoutClientInput, WarrantyUncheckedCreateWithoutClientInput> | WarrantyCreateWithoutClientInput[] | WarrantyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: WarrantyCreateOrConnectWithoutClientInput | WarrantyCreateOrConnectWithoutClientInput[]
    upsert?: WarrantyUpsertWithWhereUniqueWithoutClientInput | WarrantyUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: WarrantyCreateManyClientInputEnvelope
    set?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
    disconnect?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
    delete?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
    connect?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
    update?: WarrantyUpdateWithWhereUniqueWithoutClientInput | WarrantyUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: WarrantyUpdateManyWithWhereWithoutClientInput | WarrantyUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: WarrantyScalarWhereInput | WarrantyScalarWhereInput[]
  }

  export type CertificateUpdateManyWithoutClientNestedInput = {
    create?: XOR<CertificateCreateWithoutClientInput, CertificateUncheckedCreateWithoutClientInput> | CertificateCreateWithoutClientInput[] | CertificateUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutClientInput | CertificateCreateOrConnectWithoutClientInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutClientInput | CertificateUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CertificateCreateManyClientInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutClientInput | CertificateUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutClientInput | CertificateUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutClientNestedInput = {
    create?: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput> | NotificationCreateWithoutClientInput[] | NotificationUncheckedCreateWithoutClientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClientInput | NotificationCreateOrConnectWithoutClientInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutClientInput | NotificationUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: NotificationCreateManyClientInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutClientInput | NotificationUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutClientInput | NotificationUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type InvoiceUpdateManyWithoutClientNestedInput = {
    create?: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput> | InvoiceCreateWithoutClientInput[] | InvoiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientInput | InvoiceCreateOrConnectWithoutClientInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutClientInput | InvoiceUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: InvoiceCreateManyClientInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutClientInput | InvoiceUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutClientInput | InvoiceUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type ClientProjectUpdateManyWithoutClientNestedInput = {
    create?: XOR<ClientProjectCreateWithoutClientInput, ClientProjectUncheckedCreateWithoutClientInput> | ClientProjectCreateWithoutClientInput[] | ClientProjectUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ClientProjectCreateOrConnectWithoutClientInput | ClientProjectCreateOrConnectWithoutClientInput[]
    upsert?: ClientProjectUpsertWithWhereUniqueWithoutClientInput | ClientProjectUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ClientProjectCreateManyClientInputEnvelope
    set?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
    disconnect?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
    delete?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
    connect?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
    update?: ClientProjectUpdateWithWhereUniqueWithoutClientInput | ClientProjectUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ClientProjectUpdateManyWithWhereWithoutClientInput | ClientProjectUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ClientProjectScalarWhereInput | ClientProjectScalarWhereInput[]
  }

  export type WarrantyUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<WarrantyCreateWithoutClientInput, WarrantyUncheckedCreateWithoutClientInput> | WarrantyCreateWithoutClientInput[] | WarrantyUncheckedCreateWithoutClientInput[]
    connectOrCreate?: WarrantyCreateOrConnectWithoutClientInput | WarrantyCreateOrConnectWithoutClientInput[]
    upsert?: WarrantyUpsertWithWhereUniqueWithoutClientInput | WarrantyUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: WarrantyCreateManyClientInputEnvelope
    set?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
    disconnect?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
    delete?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
    connect?: WarrantyWhereUniqueInput | WarrantyWhereUniqueInput[]
    update?: WarrantyUpdateWithWhereUniqueWithoutClientInput | WarrantyUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: WarrantyUpdateManyWithWhereWithoutClientInput | WarrantyUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: WarrantyScalarWhereInput | WarrantyScalarWhereInput[]
  }

  export type CertificateUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<CertificateCreateWithoutClientInput, CertificateUncheckedCreateWithoutClientInput> | CertificateCreateWithoutClientInput[] | CertificateUncheckedCreateWithoutClientInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutClientInput | CertificateCreateOrConnectWithoutClientInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutClientInput | CertificateUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: CertificateCreateManyClientInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutClientInput | CertificateUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutClientInput | CertificateUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput> | NotificationCreateWithoutClientInput[] | NotificationUncheckedCreateWithoutClientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutClientInput | NotificationCreateOrConnectWithoutClientInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutClientInput | NotificationUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: NotificationCreateManyClientInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutClientInput | NotificationUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutClientInput | NotificationUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type InvoiceUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput> | InvoiceCreateWithoutClientInput[] | InvoiceUncheckedCreateWithoutClientInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutClientInput | InvoiceCreateOrConnectWithoutClientInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutClientInput | InvoiceUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: InvoiceCreateManyClientInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutClientInput | InvoiceUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutClientInput | InvoiceUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type ClientProjectUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<ClientProjectCreateWithoutClientInput, ClientProjectUncheckedCreateWithoutClientInput> | ClientProjectCreateWithoutClientInput[] | ClientProjectUncheckedCreateWithoutClientInput[]
    connectOrCreate?: ClientProjectCreateOrConnectWithoutClientInput | ClientProjectCreateOrConnectWithoutClientInput[]
    upsert?: ClientProjectUpsertWithWhereUniqueWithoutClientInput | ClientProjectUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: ClientProjectCreateManyClientInputEnvelope
    set?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
    disconnect?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
    delete?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
    connect?: ClientProjectWhereUniqueInput | ClientProjectWhereUniqueInput[]
    update?: ClientProjectUpdateWithWhereUniqueWithoutClientInput | ClientProjectUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: ClientProjectUpdateManyWithWhereWithoutClientInput | ClientProjectUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: ClientProjectScalarWhereInput | ClientProjectScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ProjectCreateWithoutReviewsInput, ProjectUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutReviewsInput
    connect?: ProjectWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumReviewStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReviewStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProjectUpdateOneWithoutReviewsNestedInput = {
    create?: XOR<ProjectCreateWithoutReviewsInput, ProjectUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutReviewsInput
    upsert?: ProjectUpsertWithoutReviewsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutReviewsInput, ProjectUpdateWithoutReviewsInput>, ProjectUncheckedUpdateWithoutReviewsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutWarrantiesInput = {
    create?: XOR<UserCreateWithoutWarrantiesInput, UserUncheckedCreateWithoutWarrantiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWarrantiesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutWarrantiesNestedInput = {
    create?: XOR<UserCreateWithoutWarrantiesInput, UserUncheckedCreateWithoutWarrantiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutWarrantiesInput
    upsert?: UserUpsertWithoutWarrantiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWarrantiesInput, UserUpdateWithoutWarrantiesInput>, UserUncheckedUpdateWithoutWarrantiesInput>
  }

  export type UserCreateNestedOneWithoutCertificatesInput = {
    create?: XOR<UserCreateWithoutCertificatesInput, UserUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCertificatesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCertificatesNestedInput = {
    create?: XOR<UserCreateWithoutCertificatesInput, UserUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCertificatesInput
    upsert?: UserUpsertWithoutCertificatesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCertificatesInput, UserUpdateWithoutCertificatesInput>, UserUncheckedUpdateWithoutCertificatesInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type MessageCreateNestedManyWithoutChatSessionInput = {
    create?: XOR<MessageCreateWithoutChatSessionInput, MessageUncheckedCreateWithoutChatSessionInput> | MessageCreateWithoutChatSessionInput[] | MessageUncheckedCreateWithoutChatSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatSessionInput | MessageCreateOrConnectWithoutChatSessionInput[]
    createMany?: MessageCreateManyChatSessionInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutChatSessionInput = {
    create?: XOR<MessageCreateWithoutChatSessionInput, MessageUncheckedCreateWithoutChatSessionInput> | MessageCreateWithoutChatSessionInput[] | MessageUncheckedCreateWithoutChatSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatSessionInput | MessageCreateOrConnectWithoutChatSessionInput[]
    createMany?: MessageCreateManyChatSessionInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUpdateManyWithoutChatSessionNestedInput = {
    create?: XOR<MessageCreateWithoutChatSessionInput, MessageUncheckedCreateWithoutChatSessionInput> | MessageCreateWithoutChatSessionInput[] | MessageUncheckedCreateWithoutChatSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatSessionInput | MessageCreateOrConnectWithoutChatSessionInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatSessionInput | MessageUpsertWithWhereUniqueWithoutChatSessionInput[]
    createMany?: MessageCreateManyChatSessionInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatSessionInput | MessageUpdateWithWhereUniqueWithoutChatSessionInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatSessionInput | MessageUpdateManyWithWhereWithoutChatSessionInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutChatSessionNestedInput = {
    create?: XOR<MessageCreateWithoutChatSessionInput, MessageUncheckedCreateWithoutChatSessionInput> | MessageCreateWithoutChatSessionInput[] | MessageUncheckedCreateWithoutChatSessionInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutChatSessionInput | MessageCreateOrConnectWithoutChatSessionInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutChatSessionInput | MessageUpsertWithWhereUniqueWithoutChatSessionInput[]
    createMany?: MessageCreateManyChatSessionInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutChatSessionInput | MessageUpdateWithWhereUniqueWithoutChatSessionInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutChatSessionInput | MessageUpdateManyWithWhereWithoutChatSessionInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type ChatSessionCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
  }

  export type ChatSessionUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatSessionCreateOrConnectWithoutMessagesInput
    upsert?: ChatSessionUpsertWithoutMessagesInput
    connect?: ChatSessionWhereUniqueInput
    update?: XOR<XOR<ChatSessionUpdateToOneWithWhereWithoutMessagesInput, ChatSessionUpdateWithoutMessagesInput>, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type ProjectCreateimagePathsInput = {
    set: string[]
  }

  export type ProjectCreatetagsInput = {
    set: string[]
  }

  export type ReviewCreateNestedManyWithoutProjectInput = {
    create?: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput> | ReviewCreateWithoutProjectInput[] | ReviewUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProjectInput | ReviewCreateOrConnectWithoutProjectInput[]
    createMany?: ReviewCreateManyProjectInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput> | ReviewCreateWithoutProjectInput[] | ReviewUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProjectInput | ReviewCreateOrConnectWithoutProjectInput[]
    createMany?: ReviewCreateManyProjectInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ProjectUpdateimagePathsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProjectUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ReviewUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput> | ReviewCreateWithoutProjectInput[] | ReviewUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProjectInput | ReviewCreateOrConnectWithoutProjectInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutProjectInput | ReviewUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ReviewCreateManyProjectInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutProjectInput | ReviewUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutProjectInput | ReviewUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput> | ReviewCreateWithoutProjectInput[] | ReviewUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProjectInput | ReviewCreateOrConnectWithoutProjectInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutProjectInput | ReviewUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ReviewCreateManyProjectInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutProjectInput | ReviewUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutProjectInput | ReviewUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type WorkPackageCreateNestedManyWithoutProjectTypeInput = {
    create?: XOR<WorkPackageCreateWithoutProjectTypeInput, WorkPackageUncheckedCreateWithoutProjectTypeInput> | WorkPackageCreateWithoutProjectTypeInput[] | WorkPackageUncheckedCreateWithoutProjectTypeInput[]
    connectOrCreate?: WorkPackageCreateOrConnectWithoutProjectTypeInput | WorkPackageCreateOrConnectWithoutProjectTypeInput[]
    createMany?: WorkPackageCreateManyProjectTypeInputEnvelope
    connect?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
  }

  export type WorkPackageUncheckedCreateNestedManyWithoutProjectTypeInput = {
    create?: XOR<WorkPackageCreateWithoutProjectTypeInput, WorkPackageUncheckedCreateWithoutProjectTypeInput> | WorkPackageCreateWithoutProjectTypeInput[] | WorkPackageUncheckedCreateWithoutProjectTypeInput[]
    connectOrCreate?: WorkPackageCreateOrConnectWithoutProjectTypeInput | WorkPackageCreateOrConnectWithoutProjectTypeInput[]
    createMany?: WorkPackageCreateManyProjectTypeInputEnvelope
    connect?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
  }

  export type WorkPackageUpdateManyWithoutProjectTypeNestedInput = {
    create?: XOR<WorkPackageCreateWithoutProjectTypeInput, WorkPackageUncheckedCreateWithoutProjectTypeInput> | WorkPackageCreateWithoutProjectTypeInput[] | WorkPackageUncheckedCreateWithoutProjectTypeInput[]
    connectOrCreate?: WorkPackageCreateOrConnectWithoutProjectTypeInput | WorkPackageCreateOrConnectWithoutProjectTypeInput[]
    upsert?: WorkPackageUpsertWithWhereUniqueWithoutProjectTypeInput | WorkPackageUpsertWithWhereUniqueWithoutProjectTypeInput[]
    createMany?: WorkPackageCreateManyProjectTypeInputEnvelope
    set?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
    disconnect?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
    delete?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
    connect?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
    update?: WorkPackageUpdateWithWhereUniqueWithoutProjectTypeInput | WorkPackageUpdateWithWhereUniqueWithoutProjectTypeInput[]
    updateMany?: WorkPackageUpdateManyWithWhereWithoutProjectTypeInput | WorkPackageUpdateManyWithWhereWithoutProjectTypeInput[]
    deleteMany?: WorkPackageScalarWhereInput | WorkPackageScalarWhereInput[]
  }

  export type WorkPackageUncheckedUpdateManyWithoutProjectTypeNestedInput = {
    create?: XOR<WorkPackageCreateWithoutProjectTypeInput, WorkPackageUncheckedCreateWithoutProjectTypeInput> | WorkPackageCreateWithoutProjectTypeInput[] | WorkPackageUncheckedCreateWithoutProjectTypeInput[]
    connectOrCreate?: WorkPackageCreateOrConnectWithoutProjectTypeInput | WorkPackageCreateOrConnectWithoutProjectTypeInput[]
    upsert?: WorkPackageUpsertWithWhereUniqueWithoutProjectTypeInput | WorkPackageUpsertWithWhereUniqueWithoutProjectTypeInput[]
    createMany?: WorkPackageCreateManyProjectTypeInputEnvelope
    set?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
    disconnect?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
    delete?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
    connect?: WorkPackageWhereUniqueInput | WorkPackageWhereUniqueInput[]
    update?: WorkPackageUpdateWithWhereUniqueWithoutProjectTypeInput | WorkPackageUpdateWithWhereUniqueWithoutProjectTypeInput[]
    updateMany?: WorkPackageUpdateManyWithWhereWithoutProjectTypeInput | WorkPackageUpdateManyWithWhereWithoutProjectTypeInput[]
    deleteMany?: WorkPackageScalarWhereInput | WorkPackageScalarWhereInput[]
  }

  export type ProjectTypeCreateNestedOneWithoutPackagesInput = {
    create?: XOR<ProjectTypeCreateWithoutPackagesInput, ProjectTypeUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: ProjectTypeCreateOrConnectWithoutPackagesInput
    connect?: ProjectTypeWhereUniqueInput
  }

  export type ServiceItemCreateNestedManyWithoutPackageInput = {
    create?: XOR<ServiceItemCreateWithoutPackageInput, ServiceItemUncheckedCreateWithoutPackageInput> | ServiceItemCreateWithoutPackageInput[] | ServiceItemUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: ServiceItemCreateOrConnectWithoutPackageInput | ServiceItemCreateOrConnectWithoutPackageInput[]
    createMany?: ServiceItemCreateManyPackageInputEnvelope
    connect?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
  }

  export type ServiceItemUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<ServiceItemCreateWithoutPackageInput, ServiceItemUncheckedCreateWithoutPackageInput> | ServiceItemCreateWithoutPackageInput[] | ServiceItemUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: ServiceItemCreateOrConnectWithoutPackageInput | ServiceItemCreateOrConnectWithoutPackageInput[]
    createMany?: ServiceItemCreateManyPackageInputEnvelope
    connect?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
  }

  export type ProjectTypeUpdateOneRequiredWithoutPackagesNestedInput = {
    create?: XOR<ProjectTypeCreateWithoutPackagesInput, ProjectTypeUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: ProjectTypeCreateOrConnectWithoutPackagesInput
    upsert?: ProjectTypeUpsertWithoutPackagesInput
    connect?: ProjectTypeWhereUniqueInput
    update?: XOR<XOR<ProjectTypeUpdateToOneWithWhereWithoutPackagesInput, ProjectTypeUpdateWithoutPackagesInput>, ProjectTypeUncheckedUpdateWithoutPackagesInput>
  }

  export type ServiceItemUpdateManyWithoutPackageNestedInput = {
    create?: XOR<ServiceItemCreateWithoutPackageInput, ServiceItemUncheckedCreateWithoutPackageInput> | ServiceItemCreateWithoutPackageInput[] | ServiceItemUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: ServiceItemCreateOrConnectWithoutPackageInput | ServiceItemCreateOrConnectWithoutPackageInput[]
    upsert?: ServiceItemUpsertWithWhereUniqueWithoutPackageInput | ServiceItemUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: ServiceItemCreateManyPackageInputEnvelope
    set?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
    disconnect?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
    delete?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
    connect?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
    update?: ServiceItemUpdateWithWhereUniqueWithoutPackageInput | ServiceItemUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: ServiceItemUpdateManyWithWhereWithoutPackageInput | ServiceItemUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: ServiceItemScalarWhereInput | ServiceItemScalarWhereInput[]
  }

  export type ServiceItemUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<ServiceItemCreateWithoutPackageInput, ServiceItemUncheckedCreateWithoutPackageInput> | ServiceItemCreateWithoutPackageInput[] | ServiceItemUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: ServiceItemCreateOrConnectWithoutPackageInput | ServiceItemCreateOrConnectWithoutPackageInput[]
    upsert?: ServiceItemUpsertWithWhereUniqueWithoutPackageInput | ServiceItemUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: ServiceItemCreateManyPackageInputEnvelope
    set?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
    disconnect?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
    delete?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
    connect?: ServiceItemWhereUniqueInput | ServiceItemWhereUniqueInput[]
    update?: ServiceItemUpdateWithWhereUniqueWithoutPackageInput | ServiceItemUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: ServiceItemUpdateManyWithWhereWithoutPackageInput | ServiceItemUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: ServiceItemScalarWhereInput | ServiceItemScalarWhereInput[]
  }

  export type WorkPackageCreateNestedOneWithoutServicesInput = {
    create?: XOR<WorkPackageCreateWithoutServicesInput, WorkPackageUncheckedCreateWithoutServicesInput>
    connectOrCreate?: WorkPackageCreateOrConnectWithoutServicesInput
    connect?: WorkPackageWhereUniqueInput
  }

  export type ServiceOptionCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceOptionCreateWithoutServiceInput, ServiceOptionUncheckedCreateWithoutServiceInput> | ServiceOptionCreateWithoutServiceInput[] | ServiceOptionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceOptionCreateOrConnectWithoutServiceInput | ServiceOptionCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceOptionCreateManyServiceInputEnvelope
    connect?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
  }

  export type FollowUpCreateNestedManyWithoutSourceInput = {
    create?: XOR<FollowUpCreateWithoutSourceInput, FollowUpUncheckedCreateWithoutSourceInput> | FollowUpCreateWithoutSourceInput[] | FollowUpUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: FollowUpCreateOrConnectWithoutSourceInput | FollowUpCreateOrConnectWithoutSourceInput[]
    createMany?: FollowUpCreateManySourceInputEnvelope
    connect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
  }

  export type FollowUpCreateNestedManyWithoutTargetInput = {
    create?: XOR<FollowUpCreateWithoutTargetInput, FollowUpUncheckedCreateWithoutTargetInput> | FollowUpCreateWithoutTargetInput[] | FollowUpUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: FollowUpCreateOrConnectWithoutTargetInput | FollowUpCreateOrConnectWithoutTargetInput[]
    createMany?: FollowUpCreateManyTargetInputEnvelope
    connect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
  }

  export type ServiceOptionUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceOptionCreateWithoutServiceInput, ServiceOptionUncheckedCreateWithoutServiceInput> | ServiceOptionCreateWithoutServiceInput[] | ServiceOptionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceOptionCreateOrConnectWithoutServiceInput | ServiceOptionCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceOptionCreateManyServiceInputEnvelope
    connect?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
  }

  export type FollowUpUncheckedCreateNestedManyWithoutSourceInput = {
    create?: XOR<FollowUpCreateWithoutSourceInput, FollowUpUncheckedCreateWithoutSourceInput> | FollowUpCreateWithoutSourceInput[] | FollowUpUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: FollowUpCreateOrConnectWithoutSourceInput | FollowUpCreateOrConnectWithoutSourceInput[]
    createMany?: FollowUpCreateManySourceInputEnvelope
    connect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
  }

  export type FollowUpUncheckedCreateNestedManyWithoutTargetInput = {
    create?: XOR<FollowUpCreateWithoutTargetInput, FollowUpUncheckedCreateWithoutTargetInput> | FollowUpCreateWithoutTargetInput[] | FollowUpUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: FollowUpCreateOrConnectWithoutTargetInput | FollowUpCreateOrConnectWithoutTargetInput[]
    createMany?: FollowUpCreateManyTargetInputEnvelope
    connect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WorkPackageUpdateOneRequiredWithoutServicesNestedInput = {
    create?: XOR<WorkPackageCreateWithoutServicesInput, WorkPackageUncheckedCreateWithoutServicesInput>
    connectOrCreate?: WorkPackageCreateOrConnectWithoutServicesInput
    upsert?: WorkPackageUpsertWithoutServicesInput
    connect?: WorkPackageWhereUniqueInput
    update?: XOR<XOR<WorkPackageUpdateToOneWithWhereWithoutServicesInput, WorkPackageUpdateWithoutServicesInput>, WorkPackageUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceOptionUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceOptionCreateWithoutServiceInput, ServiceOptionUncheckedCreateWithoutServiceInput> | ServiceOptionCreateWithoutServiceInput[] | ServiceOptionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceOptionCreateOrConnectWithoutServiceInput | ServiceOptionCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceOptionUpsertWithWhereUniqueWithoutServiceInput | ServiceOptionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceOptionCreateManyServiceInputEnvelope
    set?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
    disconnect?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
    delete?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
    connect?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
    update?: ServiceOptionUpdateWithWhereUniqueWithoutServiceInput | ServiceOptionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceOptionUpdateManyWithWhereWithoutServiceInput | ServiceOptionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceOptionScalarWhereInput | ServiceOptionScalarWhereInput[]
  }

  export type FollowUpUpdateManyWithoutSourceNestedInput = {
    create?: XOR<FollowUpCreateWithoutSourceInput, FollowUpUncheckedCreateWithoutSourceInput> | FollowUpCreateWithoutSourceInput[] | FollowUpUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: FollowUpCreateOrConnectWithoutSourceInput | FollowUpCreateOrConnectWithoutSourceInput[]
    upsert?: FollowUpUpsertWithWhereUniqueWithoutSourceInput | FollowUpUpsertWithWhereUniqueWithoutSourceInput[]
    createMany?: FollowUpCreateManySourceInputEnvelope
    set?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    disconnect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    delete?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    connect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    update?: FollowUpUpdateWithWhereUniqueWithoutSourceInput | FollowUpUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: FollowUpUpdateManyWithWhereWithoutSourceInput | FollowUpUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: FollowUpScalarWhereInput | FollowUpScalarWhereInput[]
  }

  export type FollowUpUpdateManyWithoutTargetNestedInput = {
    create?: XOR<FollowUpCreateWithoutTargetInput, FollowUpUncheckedCreateWithoutTargetInput> | FollowUpCreateWithoutTargetInput[] | FollowUpUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: FollowUpCreateOrConnectWithoutTargetInput | FollowUpCreateOrConnectWithoutTargetInput[]
    upsert?: FollowUpUpsertWithWhereUniqueWithoutTargetInput | FollowUpUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: FollowUpCreateManyTargetInputEnvelope
    set?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    disconnect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    delete?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    connect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    update?: FollowUpUpdateWithWhereUniqueWithoutTargetInput | FollowUpUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: FollowUpUpdateManyWithWhereWithoutTargetInput | FollowUpUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: FollowUpScalarWhereInput | FollowUpScalarWhereInput[]
  }

  export type ServiceOptionUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceOptionCreateWithoutServiceInput, ServiceOptionUncheckedCreateWithoutServiceInput> | ServiceOptionCreateWithoutServiceInput[] | ServiceOptionUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceOptionCreateOrConnectWithoutServiceInput | ServiceOptionCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceOptionUpsertWithWhereUniqueWithoutServiceInput | ServiceOptionUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceOptionCreateManyServiceInputEnvelope
    set?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
    disconnect?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
    delete?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
    connect?: ServiceOptionWhereUniqueInput | ServiceOptionWhereUniqueInput[]
    update?: ServiceOptionUpdateWithWhereUniqueWithoutServiceInput | ServiceOptionUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceOptionUpdateManyWithWhereWithoutServiceInput | ServiceOptionUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceOptionScalarWhereInput | ServiceOptionScalarWhereInput[]
  }

  export type FollowUpUncheckedUpdateManyWithoutSourceNestedInput = {
    create?: XOR<FollowUpCreateWithoutSourceInput, FollowUpUncheckedCreateWithoutSourceInput> | FollowUpCreateWithoutSourceInput[] | FollowUpUncheckedCreateWithoutSourceInput[]
    connectOrCreate?: FollowUpCreateOrConnectWithoutSourceInput | FollowUpCreateOrConnectWithoutSourceInput[]
    upsert?: FollowUpUpsertWithWhereUniqueWithoutSourceInput | FollowUpUpsertWithWhereUniqueWithoutSourceInput[]
    createMany?: FollowUpCreateManySourceInputEnvelope
    set?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    disconnect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    delete?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    connect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    update?: FollowUpUpdateWithWhereUniqueWithoutSourceInput | FollowUpUpdateWithWhereUniqueWithoutSourceInput[]
    updateMany?: FollowUpUpdateManyWithWhereWithoutSourceInput | FollowUpUpdateManyWithWhereWithoutSourceInput[]
    deleteMany?: FollowUpScalarWhereInput | FollowUpScalarWhereInput[]
  }

  export type FollowUpUncheckedUpdateManyWithoutTargetNestedInput = {
    create?: XOR<FollowUpCreateWithoutTargetInput, FollowUpUncheckedCreateWithoutTargetInput> | FollowUpCreateWithoutTargetInput[] | FollowUpUncheckedCreateWithoutTargetInput[]
    connectOrCreate?: FollowUpCreateOrConnectWithoutTargetInput | FollowUpCreateOrConnectWithoutTargetInput[]
    upsert?: FollowUpUpsertWithWhereUniqueWithoutTargetInput | FollowUpUpsertWithWhereUniqueWithoutTargetInput[]
    createMany?: FollowUpCreateManyTargetInputEnvelope
    set?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    disconnect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    delete?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    connect?: FollowUpWhereUniqueInput | FollowUpWhereUniqueInput[]
    update?: FollowUpUpdateWithWhereUniqueWithoutTargetInput | FollowUpUpdateWithWhereUniqueWithoutTargetInput[]
    updateMany?: FollowUpUpdateManyWithWhereWithoutTargetInput | FollowUpUpdateManyWithWhereWithoutTargetInput[]
    deleteMany?: FollowUpScalarWhereInput | FollowUpScalarWhereInput[]
  }

  export type ServiceItemCreateNestedOneWithoutOptionsInput = {
    create?: XOR<ServiceItemCreateWithoutOptionsInput, ServiceItemUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: ServiceItemCreateOrConnectWithoutOptionsInput
    connect?: ServiceItemWhereUniqueInput
  }

  export type ServiceItemUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<ServiceItemCreateWithoutOptionsInput, ServiceItemUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: ServiceItemCreateOrConnectWithoutOptionsInput
    upsert?: ServiceItemUpsertWithoutOptionsInput
    connect?: ServiceItemWhereUniqueInput
    update?: XOR<XOR<ServiceItemUpdateToOneWithWhereWithoutOptionsInput, ServiceItemUpdateWithoutOptionsInput>, ServiceItemUncheckedUpdateWithoutOptionsInput>
  }

  export type ServiceItemCreateNestedOneWithoutFollowUpsInput = {
    create?: XOR<ServiceItemCreateWithoutFollowUpsInput, ServiceItemUncheckedCreateWithoutFollowUpsInput>
    connectOrCreate?: ServiceItemCreateOrConnectWithoutFollowUpsInput
    connect?: ServiceItemWhereUniqueInput
  }

  export type ServiceItemCreateNestedOneWithoutSuggestedByInput = {
    create?: XOR<ServiceItemCreateWithoutSuggestedByInput, ServiceItemUncheckedCreateWithoutSuggestedByInput>
    connectOrCreate?: ServiceItemCreateOrConnectWithoutSuggestedByInput
    connect?: ServiceItemWhereUniqueInput
  }

  export type ServiceItemUpdateOneRequiredWithoutFollowUpsNestedInput = {
    create?: XOR<ServiceItemCreateWithoutFollowUpsInput, ServiceItemUncheckedCreateWithoutFollowUpsInput>
    connectOrCreate?: ServiceItemCreateOrConnectWithoutFollowUpsInput
    upsert?: ServiceItemUpsertWithoutFollowUpsInput
    connect?: ServiceItemWhereUniqueInput
    update?: XOR<XOR<ServiceItemUpdateToOneWithWhereWithoutFollowUpsInput, ServiceItemUpdateWithoutFollowUpsInput>, ServiceItemUncheckedUpdateWithoutFollowUpsInput>
  }

  export type ServiceItemUpdateOneRequiredWithoutSuggestedByNestedInput = {
    create?: XOR<ServiceItemCreateWithoutSuggestedByInput, ServiceItemUncheckedCreateWithoutSuggestedByInput>
    connectOrCreate?: ServiceItemCreateOrConnectWithoutSuggestedByInput
    upsert?: ServiceItemUpsertWithoutSuggestedByInput
    connect?: ServiceItemWhereUniqueInput
    update?: XOR<XOR<ServiceItemUpdateToOneWithWhereWithoutSuggestedByInput, ServiceItemUpdateWithoutSuggestedByInput>, ServiceItemUncheckedUpdateWithoutSuggestedByInput>
  }

  export type UserCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvoicesInput
    upsert?: UserUpsertWithoutInvoicesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvoicesInput, UserUpdateWithoutInvoicesInput>, UserUncheckedUpdateWithoutInvoicesInput>
  }

  export type UserCreateNestedOneWithoutClientProjectsInput = {
    create?: XOR<UserCreateWithoutClientProjectsInput, UserUncheckedCreateWithoutClientProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ClientProjectHistoryCreateNestedManyWithoutClientProjectInput = {
    create?: XOR<ClientProjectHistoryCreateWithoutClientProjectInput, ClientProjectHistoryUncheckedCreateWithoutClientProjectInput> | ClientProjectHistoryCreateWithoutClientProjectInput[] | ClientProjectHistoryUncheckedCreateWithoutClientProjectInput[]
    connectOrCreate?: ClientProjectHistoryCreateOrConnectWithoutClientProjectInput | ClientProjectHistoryCreateOrConnectWithoutClientProjectInput[]
    createMany?: ClientProjectHistoryCreateManyClientProjectInputEnvelope
    connect?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
  }

  export type ClientProjectHistoryUncheckedCreateNestedManyWithoutClientProjectInput = {
    create?: XOR<ClientProjectHistoryCreateWithoutClientProjectInput, ClientProjectHistoryUncheckedCreateWithoutClientProjectInput> | ClientProjectHistoryCreateWithoutClientProjectInput[] | ClientProjectHistoryUncheckedCreateWithoutClientProjectInput[]
    connectOrCreate?: ClientProjectHistoryCreateOrConnectWithoutClientProjectInput | ClientProjectHistoryCreateOrConnectWithoutClientProjectInput[]
    createMany?: ClientProjectHistoryCreateManyClientProjectInputEnvelope
    connect?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutClientProjectsNestedInput = {
    create?: XOR<UserCreateWithoutClientProjectsInput, UserUncheckedCreateWithoutClientProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutClientProjectsInput
    upsert?: UserUpsertWithoutClientProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClientProjectsInput, UserUpdateWithoutClientProjectsInput>, UserUncheckedUpdateWithoutClientProjectsInput>
  }

  export type ClientProjectHistoryUpdateManyWithoutClientProjectNestedInput = {
    create?: XOR<ClientProjectHistoryCreateWithoutClientProjectInput, ClientProjectHistoryUncheckedCreateWithoutClientProjectInput> | ClientProjectHistoryCreateWithoutClientProjectInput[] | ClientProjectHistoryUncheckedCreateWithoutClientProjectInput[]
    connectOrCreate?: ClientProjectHistoryCreateOrConnectWithoutClientProjectInput | ClientProjectHistoryCreateOrConnectWithoutClientProjectInput[]
    upsert?: ClientProjectHistoryUpsertWithWhereUniqueWithoutClientProjectInput | ClientProjectHistoryUpsertWithWhereUniqueWithoutClientProjectInput[]
    createMany?: ClientProjectHistoryCreateManyClientProjectInputEnvelope
    set?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
    disconnect?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
    delete?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
    connect?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
    update?: ClientProjectHistoryUpdateWithWhereUniqueWithoutClientProjectInput | ClientProjectHistoryUpdateWithWhereUniqueWithoutClientProjectInput[]
    updateMany?: ClientProjectHistoryUpdateManyWithWhereWithoutClientProjectInput | ClientProjectHistoryUpdateManyWithWhereWithoutClientProjectInput[]
    deleteMany?: ClientProjectHistoryScalarWhereInput | ClientProjectHistoryScalarWhereInput[]
  }

  export type ClientProjectHistoryUncheckedUpdateManyWithoutClientProjectNestedInput = {
    create?: XOR<ClientProjectHistoryCreateWithoutClientProjectInput, ClientProjectHistoryUncheckedCreateWithoutClientProjectInput> | ClientProjectHistoryCreateWithoutClientProjectInput[] | ClientProjectHistoryUncheckedCreateWithoutClientProjectInput[]
    connectOrCreate?: ClientProjectHistoryCreateOrConnectWithoutClientProjectInput | ClientProjectHistoryCreateOrConnectWithoutClientProjectInput[]
    upsert?: ClientProjectHistoryUpsertWithWhereUniqueWithoutClientProjectInput | ClientProjectHistoryUpsertWithWhereUniqueWithoutClientProjectInput[]
    createMany?: ClientProjectHistoryCreateManyClientProjectInputEnvelope
    set?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
    disconnect?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
    delete?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
    connect?: ClientProjectHistoryWhereUniqueInput | ClientProjectHistoryWhereUniqueInput[]
    update?: ClientProjectHistoryUpdateWithWhereUniqueWithoutClientProjectInput | ClientProjectHistoryUpdateWithWhereUniqueWithoutClientProjectInput[]
    updateMany?: ClientProjectHistoryUpdateManyWithWhereWithoutClientProjectInput | ClientProjectHistoryUpdateManyWithWhereWithoutClientProjectInput[]
    deleteMany?: ClientProjectHistoryScalarWhereInput | ClientProjectHistoryScalarWhereInput[]
  }

  export type ClientProjectCreateNestedOneWithoutHistoryInput = {
    create?: XOR<ClientProjectCreateWithoutHistoryInput, ClientProjectUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: ClientProjectCreateOrConnectWithoutHistoryInput
    connect?: ClientProjectWhereUniqueInput
  }

  export type ClientProjectUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<ClientProjectCreateWithoutHistoryInput, ClientProjectUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: ClientProjectCreateOrConnectWithoutHistoryInput
    upsert?: ClientProjectUpsertWithoutHistoryInput
    connect?: ClientProjectWhereUniqueInput
    update?: XOR<XOR<ClientProjectUpdateToOneWithWhereWithoutHistoryInput, ClientProjectUpdateWithoutHistoryInput>, ClientProjectUncheckedUpdateWithoutHistoryInput>
  }

  export type AiChatMessageCreateNestedManyWithoutThreadInput = {
    create?: XOR<AiChatMessageCreateWithoutThreadInput, AiChatMessageUncheckedCreateWithoutThreadInput> | AiChatMessageCreateWithoutThreadInput[] | AiChatMessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: AiChatMessageCreateOrConnectWithoutThreadInput | AiChatMessageCreateOrConnectWithoutThreadInput[]
    createMany?: AiChatMessageCreateManyThreadInputEnvelope
    connect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
  }

  export type AiChatEscalationCreateNestedOneWithoutThreadInput = {
    create?: XOR<AiChatEscalationCreateWithoutThreadInput, AiChatEscalationUncheckedCreateWithoutThreadInput>
    connectOrCreate?: AiChatEscalationCreateOrConnectWithoutThreadInput
    connect?: AiChatEscalationWhereUniqueInput
  }

  export type AiChatMessageUncheckedCreateNestedManyWithoutThreadInput = {
    create?: XOR<AiChatMessageCreateWithoutThreadInput, AiChatMessageUncheckedCreateWithoutThreadInput> | AiChatMessageCreateWithoutThreadInput[] | AiChatMessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: AiChatMessageCreateOrConnectWithoutThreadInput | AiChatMessageCreateOrConnectWithoutThreadInput[]
    createMany?: AiChatMessageCreateManyThreadInputEnvelope
    connect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
  }

  export type AiChatEscalationUncheckedCreateNestedOneWithoutThreadInput = {
    create?: XOR<AiChatEscalationCreateWithoutThreadInput, AiChatEscalationUncheckedCreateWithoutThreadInput>
    connectOrCreate?: AiChatEscalationCreateOrConnectWithoutThreadInput
    connect?: AiChatEscalationWhereUniqueInput
  }

  export type AiChatMessageUpdateManyWithoutThreadNestedInput = {
    create?: XOR<AiChatMessageCreateWithoutThreadInput, AiChatMessageUncheckedCreateWithoutThreadInput> | AiChatMessageCreateWithoutThreadInput[] | AiChatMessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: AiChatMessageCreateOrConnectWithoutThreadInput | AiChatMessageCreateOrConnectWithoutThreadInput[]
    upsert?: AiChatMessageUpsertWithWhereUniqueWithoutThreadInput | AiChatMessageUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: AiChatMessageCreateManyThreadInputEnvelope
    set?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    disconnect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    delete?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    connect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    update?: AiChatMessageUpdateWithWhereUniqueWithoutThreadInput | AiChatMessageUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: AiChatMessageUpdateManyWithWhereWithoutThreadInput | AiChatMessageUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: AiChatMessageScalarWhereInput | AiChatMessageScalarWhereInput[]
  }

  export type AiChatEscalationUpdateOneWithoutThreadNestedInput = {
    create?: XOR<AiChatEscalationCreateWithoutThreadInput, AiChatEscalationUncheckedCreateWithoutThreadInput>
    connectOrCreate?: AiChatEscalationCreateOrConnectWithoutThreadInput
    upsert?: AiChatEscalationUpsertWithoutThreadInput
    disconnect?: AiChatEscalationWhereInput | boolean
    delete?: AiChatEscalationWhereInput | boolean
    connect?: AiChatEscalationWhereUniqueInput
    update?: XOR<XOR<AiChatEscalationUpdateToOneWithWhereWithoutThreadInput, AiChatEscalationUpdateWithoutThreadInput>, AiChatEscalationUncheckedUpdateWithoutThreadInput>
  }

  export type AiChatMessageUncheckedUpdateManyWithoutThreadNestedInput = {
    create?: XOR<AiChatMessageCreateWithoutThreadInput, AiChatMessageUncheckedCreateWithoutThreadInput> | AiChatMessageCreateWithoutThreadInput[] | AiChatMessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: AiChatMessageCreateOrConnectWithoutThreadInput | AiChatMessageCreateOrConnectWithoutThreadInput[]
    upsert?: AiChatMessageUpsertWithWhereUniqueWithoutThreadInput | AiChatMessageUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: AiChatMessageCreateManyThreadInputEnvelope
    set?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    disconnect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    delete?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    connect?: AiChatMessageWhereUniqueInput | AiChatMessageWhereUniqueInput[]
    update?: AiChatMessageUpdateWithWhereUniqueWithoutThreadInput | AiChatMessageUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: AiChatMessageUpdateManyWithWhereWithoutThreadInput | AiChatMessageUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: AiChatMessageScalarWhereInput | AiChatMessageScalarWhereInput[]
  }

  export type AiChatEscalationUncheckedUpdateOneWithoutThreadNestedInput = {
    create?: XOR<AiChatEscalationCreateWithoutThreadInput, AiChatEscalationUncheckedCreateWithoutThreadInput>
    connectOrCreate?: AiChatEscalationCreateOrConnectWithoutThreadInput
    upsert?: AiChatEscalationUpsertWithoutThreadInput
    disconnect?: AiChatEscalationWhereInput | boolean
    delete?: AiChatEscalationWhereInput | boolean
    connect?: AiChatEscalationWhereUniqueInput
    update?: XOR<XOR<AiChatEscalationUpdateToOneWithWhereWithoutThreadInput, AiChatEscalationUpdateWithoutThreadInput>, AiChatEscalationUncheckedUpdateWithoutThreadInput>
  }

  export type AiChatThreadCreateNestedOneWithoutMessagesInput = {
    create?: XOR<AiChatThreadCreateWithoutMessagesInput, AiChatThreadUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AiChatThreadCreateOrConnectWithoutMessagesInput
    connect?: AiChatThreadWhereUniqueInput
  }

  export type AiChatThreadUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<AiChatThreadCreateWithoutMessagesInput, AiChatThreadUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: AiChatThreadCreateOrConnectWithoutMessagesInput
    upsert?: AiChatThreadUpsertWithoutMessagesInput
    connect?: AiChatThreadWhereUniqueInput
    update?: XOR<XOR<AiChatThreadUpdateToOneWithWhereWithoutMessagesInput, AiChatThreadUpdateWithoutMessagesInput>, AiChatThreadUncheckedUpdateWithoutMessagesInput>
  }

  export type AiChatThreadCreateNestedOneWithoutEscalationInput = {
    create?: XOR<AiChatThreadCreateWithoutEscalationInput, AiChatThreadUncheckedCreateWithoutEscalationInput>
    connectOrCreate?: AiChatThreadCreateOrConnectWithoutEscalationInput
    connect?: AiChatThreadWhereUniqueInput
  }

  export type AiChatThreadUpdateOneRequiredWithoutEscalationNestedInput = {
    create?: XOR<AiChatThreadCreateWithoutEscalationInput, AiChatThreadUncheckedCreateWithoutEscalationInput>
    connectOrCreate?: AiChatThreadCreateOrConnectWithoutEscalationInput
    upsert?: AiChatThreadUpsertWithoutEscalationInput
    connect?: AiChatThreadWhereUniqueInput
    update?: XOR<XOR<AiChatThreadUpdateToOneWithWhereWithoutEscalationInput, AiChatThreadUpdateWithoutEscalationInput>, AiChatThreadUncheckedUpdateWithoutEscalationInput>
  }

  export type CalcProjectTypeCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<CalcProjectTypeCreateWithoutCategoriesInput, CalcProjectTypeUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CalcProjectTypeCreateOrConnectWithoutCategoriesInput
    connect?: CalcProjectTypeWhereUniqueInput
  }

  export type CalcItemCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CalcItemCreateWithoutCategoryInput, CalcItemUncheckedCreateWithoutCategoryInput> | CalcItemCreateWithoutCategoryInput[] | CalcItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CalcItemCreateOrConnectWithoutCategoryInput | CalcItemCreateOrConnectWithoutCategoryInput[]
    createMany?: CalcItemCreateManyCategoryInputEnvelope
    connect?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
  }

  export type CalcItemUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CalcItemCreateWithoutCategoryInput, CalcItemUncheckedCreateWithoutCategoryInput> | CalcItemCreateWithoutCategoryInput[] | CalcItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CalcItemCreateOrConnectWithoutCategoryInput | CalcItemCreateOrConnectWithoutCategoryInput[]
    createMany?: CalcItemCreateManyCategoryInputEnvelope
    connect?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
  }

  export type CalcProjectTypeUpdateOneWithoutCategoriesNestedInput = {
    create?: XOR<CalcProjectTypeCreateWithoutCategoriesInput, CalcProjectTypeUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: CalcProjectTypeCreateOrConnectWithoutCategoriesInput
    upsert?: CalcProjectTypeUpsertWithoutCategoriesInput
    disconnect?: CalcProjectTypeWhereInput | boolean
    delete?: CalcProjectTypeWhereInput | boolean
    connect?: CalcProjectTypeWhereUniqueInput
    update?: XOR<XOR<CalcProjectTypeUpdateToOneWithWhereWithoutCategoriesInput, CalcProjectTypeUpdateWithoutCategoriesInput>, CalcProjectTypeUncheckedUpdateWithoutCategoriesInput>
  }

  export type CalcItemUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CalcItemCreateWithoutCategoryInput, CalcItemUncheckedCreateWithoutCategoryInput> | CalcItemCreateWithoutCategoryInput[] | CalcItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CalcItemCreateOrConnectWithoutCategoryInput | CalcItemCreateOrConnectWithoutCategoryInput[]
    upsert?: CalcItemUpsertWithWhereUniqueWithoutCategoryInput | CalcItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CalcItemCreateManyCategoryInputEnvelope
    set?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
    disconnect?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
    delete?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
    connect?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
    update?: CalcItemUpdateWithWhereUniqueWithoutCategoryInput | CalcItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CalcItemUpdateManyWithWhereWithoutCategoryInput | CalcItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CalcItemScalarWhereInput | CalcItemScalarWhereInput[]
  }

  export type CalcItemUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CalcItemCreateWithoutCategoryInput, CalcItemUncheckedCreateWithoutCategoryInput> | CalcItemCreateWithoutCategoryInput[] | CalcItemUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CalcItemCreateOrConnectWithoutCategoryInput | CalcItemCreateOrConnectWithoutCategoryInput[]
    upsert?: CalcItemUpsertWithWhereUniqueWithoutCategoryInput | CalcItemUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CalcItemCreateManyCategoryInputEnvelope
    set?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
    disconnect?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
    delete?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
    connect?: CalcItemWhereUniqueInput | CalcItemWhereUniqueInput[]
    update?: CalcItemUpdateWithWhereUniqueWithoutCategoryInput | CalcItemUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CalcItemUpdateManyWithWhereWithoutCategoryInput | CalcItemUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CalcItemScalarWhereInput | CalcItemScalarWhereInput[]
  }

  export type CalcCategoryCreateNestedOneWithoutItemsInput = {
    create?: XOR<CalcCategoryCreateWithoutItemsInput, CalcCategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CalcCategoryCreateOrConnectWithoutItemsInput
    connect?: CalcCategoryWhereUniqueInput
  }

  export type CalcConditionCreateNestedManyWithoutItemInput = {
    create?: XOR<CalcConditionCreateWithoutItemInput, CalcConditionUncheckedCreateWithoutItemInput> | CalcConditionCreateWithoutItemInput[] | CalcConditionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CalcConditionCreateOrConnectWithoutItemInput | CalcConditionCreateOrConnectWithoutItemInput[]
    createMany?: CalcConditionCreateManyItemInputEnvelope
    connect?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
  }

  export type CalcConditionUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<CalcConditionCreateWithoutItemInput, CalcConditionUncheckedCreateWithoutItemInput> | CalcConditionCreateWithoutItemInput[] | CalcConditionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CalcConditionCreateOrConnectWithoutItemInput | CalcConditionCreateOrConnectWithoutItemInput[]
    createMany?: CalcConditionCreateManyItemInputEnvelope
    connect?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
  }

  export type EnumCalcUnitTypeFieldUpdateOperationsInput = {
    set?: $Enums.CalcUnitType
  }

  export type CalcCategoryUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<CalcCategoryCreateWithoutItemsInput, CalcCategoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CalcCategoryCreateOrConnectWithoutItemsInput
    upsert?: CalcCategoryUpsertWithoutItemsInput
    connect?: CalcCategoryWhereUniqueInput
    update?: XOR<XOR<CalcCategoryUpdateToOneWithWhereWithoutItemsInput, CalcCategoryUpdateWithoutItemsInput>, CalcCategoryUncheckedUpdateWithoutItemsInput>
  }

  export type CalcConditionUpdateManyWithoutItemNestedInput = {
    create?: XOR<CalcConditionCreateWithoutItemInput, CalcConditionUncheckedCreateWithoutItemInput> | CalcConditionCreateWithoutItemInput[] | CalcConditionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CalcConditionCreateOrConnectWithoutItemInput | CalcConditionCreateOrConnectWithoutItemInput[]
    upsert?: CalcConditionUpsertWithWhereUniqueWithoutItemInput | CalcConditionUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: CalcConditionCreateManyItemInputEnvelope
    set?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
    disconnect?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
    delete?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
    connect?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
    update?: CalcConditionUpdateWithWhereUniqueWithoutItemInput | CalcConditionUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: CalcConditionUpdateManyWithWhereWithoutItemInput | CalcConditionUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: CalcConditionScalarWhereInput | CalcConditionScalarWhereInput[]
  }

  export type CalcConditionUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<CalcConditionCreateWithoutItemInput, CalcConditionUncheckedCreateWithoutItemInput> | CalcConditionCreateWithoutItemInput[] | CalcConditionUncheckedCreateWithoutItemInput[]
    connectOrCreate?: CalcConditionCreateOrConnectWithoutItemInput | CalcConditionCreateOrConnectWithoutItemInput[]
    upsert?: CalcConditionUpsertWithWhereUniqueWithoutItemInput | CalcConditionUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: CalcConditionCreateManyItemInputEnvelope
    set?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
    disconnect?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
    delete?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
    connect?: CalcConditionWhereUniqueInput | CalcConditionWhereUniqueInput[]
    update?: CalcConditionUpdateWithWhereUniqueWithoutItemInput | CalcConditionUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: CalcConditionUpdateManyWithWhereWithoutItemInput | CalcConditionUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: CalcConditionScalarWhereInput | CalcConditionScalarWhereInput[]
  }

  export type CalcCategoryCreateNestedManyWithoutProjectTypeInput = {
    create?: XOR<CalcCategoryCreateWithoutProjectTypeInput, CalcCategoryUncheckedCreateWithoutProjectTypeInput> | CalcCategoryCreateWithoutProjectTypeInput[] | CalcCategoryUncheckedCreateWithoutProjectTypeInput[]
    connectOrCreate?: CalcCategoryCreateOrConnectWithoutProjectTypeInput | CalcCategoryCreateOrConnectWithoutProjectTypeInput[]
    createMany?: CalcCategoryCreateManyProjectTypeInputEnvelope
    connect?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
  }

  export type CalcCategoryUncheckedCreateNestedManyWithoutProjectTypeInput = {
    create?: XOR<CalcCategoryCreateWithoutProjectTypeInput, CalcCategoryUncheckedCreateWithoutProjectTypeInput> | CalcCategoryCreateWithoutProjectTypeInput[] | CalcCategoryUncheckedCreateWithoutProjectTypeInput[]
    connectOrCreate?: CalcCategoryCreateOrConnectWithoutProjectTypeInput | CalcCategoryCreateOrConnectWithoutProjectTypeInput[]
    createMany?: CalcCategoryCreateManyProjectTypeInputEnvelope
    connect?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
  }

  export type CalcCategoryUpdateManyWithoutProjectTypeNestedInput = {
    create?: XOR<CalcCategoryCreateWithoutProjectTypeInput, CalcCategoryUncheckedCreateWithoutProjectTypeInput> | CalcCategoryCreateWithoutProjectTypeInput[] | CalcCategoryUncheckedCreateWithoutProjectTypeInput[]
    connectOrCreate?: CalcCategoryCreateOrConnectWithoutProjectTypeInput | CalcCategoryCreateOrConnectWithoutProjectTypeInput[]
    upsert?: CalcCategoryUpsertWithWhereUniqueWithoutProjectTypeInput | CalcCategoryUpsertWithWhereUniqueWithoutProjectTypeInput[]
    createMany?: CalcCategoryCreateManyProjectTypeInputEnvelope
    set?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
    disconnect?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
    delete?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
    connect?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
    update?: CalcCategoryUpdateWithWhereUniqueWithoutProjectTypeInput | CalcCategoryUpdateWithWhereUniqueWithoutProjectTypeInput[]
    updateMany?: CalcCategoryUpdateManyWithWhereWithoutProjectTypeInput | CalcCategoryUpdateManyWithWhereWithoutProjectTypeInput[]
    deleteMany?: CalcCategoryScalarWhereInput | CalcCategoryScalarWhereInput[]
  }

  export type CalcCategoryUncheckedUpdateManyWithoutProjectTypeNestedInput = {
    create?: XOR<CalcCategoryCreateWithoutProjectTypeInput, CalcCategoryUncheckedCreateWithoutProjectTypeInput> | CalcCategoryCreateWithoutProjectTypeInput[] | CalcCategoryUncheckedCreateWithoutProjectTypeInput[]
    connectOrCreate?: CalcCategoryCreateOrConnectWithoutProjectTypeInput | CalcCategoryCreateOrConnectWithoutProjectTypeInput[]
    upsert?: CalcCategoryUpsertWithWhereUniqueWithoutProjectTypeInput | CalcCategoryUpsertWithWhereUniqueWithoutProjectTypeInput[]
    createMany?: CalcCategoryCreateManyProjectTypeInputEnvelope
    set?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
    disconnect?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
    delete?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
    connect?: CalcCategoryWhereUniqueInput | CalcCategoryWhereUniqueInput[]
    update?: CalcCategoryUpdateWithWhereUniqueWithoutProjectTypeInput | CalcCategoryUpdateWithWhereUniqueWithoutProjectTypeInput[]
    updateMany?: CalcCategoryUpdateManyWithWhereWithoutProjectTypeInput | CalcCategoryUpdateManyWithWhereWithoutProjectTypeInput[]
    deleteMany?: CalcCategoryScalarWhereInput | CalcCategoryScalarWhereInput[]
  }

  export type CalcItemCreateNestedOneWithoutConditionsInput = {
    create?: XOR<CalcItemCreateWithoutConditionsInput, CalcItemUncheckedCreateWithoutConditionsInput>
    connectOrCreate?: CalcItemCreateOrConnectWithoutConditionsInput
    connect?: CalcItemWhereUniqueInput
  }

  export type CalcItemUpdateOneRequiredWithoutConditionsNestedInput = {
    create?: XOR<CalcItemCreateWithoutConditionsInput, CalcItemUncheckedCreateWithoutConditionsInput>
    connectOrCreate?: CalcItemCreateOrConnectWithoutConditionsInput
    upsert?: CalcItemUpsertWithoutConditionsInput
    connect?: CalcItemWhereUniqueInput
    update?: XOR<XOR<CalcItemUpdateToOneWithWhereWithoutConditionsInput, CalcItemUpdateWithoutConditionsInput>, CalcItemUncheckedUpdateWithoutConditionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumReviewStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewStatusFilter<$PrismaModel> | $Enums.ReviewStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumReviewStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewStatus | EnumReviewStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewStatus[] | ListEnumReviewStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReviewStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewStatusFilter<$PrismaModel>
    _max?: NestedEnumReviewStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumCalcUnitTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CalcUnitType | EnumCalcUnitTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalcUnitType[] | ListEnumCalcUnitTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalcUnitType[] | ListEnumCalcUnitTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalcUnitTypeFilter<$PrismaModel> | $Enums.CalcUnitType
  }

  export type NestedEnumCalcUnitTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CalcUnitType | EnumCalcUnitTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CalcUnitType[] | ListEnumCalcUnitTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalcUnitType[] | ListEnumCalcUnitTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCalcUnitTypeWithAggregatesFilter<$PrismaModel> | $Enums.CalcUnitType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCalcUnitTypeFilter<$PrismaModel>
    _max?: NestedEnumCalcUnitTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type WarrantyCreateWithoutClientInput = {
    projectId?: number | null
    startDate: Date | string
    durationMonths: number
    projectName: string
    createdAt?: Date | string
  }

  export type WarrantyUncheckedCreateWithoutClientInput = {
    id?: number
    projectId?: number | null
    startDate: Date | string
    durationMonths: number
    projectName: string
    createdAt?: Date | string
  }

  export type WarrantyCreateOrConnectWithoutClientInput = {
    where: WarrantyWhereUniqueInput
    create: XOR<WarrantyCreateWithoutClientInput, WarrantyUncheckedCreateWithoutClientInput>
  }

  export type WarrantyCreateManyClientInputEnvelope = {
    data: WarrantyCreateManyClientInput | WarrantyCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type CertificateCreateWithoutClientInput = {
    fileUrl: string
    title: string
    issuedDate: Date | string
    createdAt?: Date | string
  }

  export type CertificateUncheckedCreateWithoutClientInput = {
    id?: number
    fileUrl: string
    title: string
    issuedDate: Date | string
    createdAt?: Date | string
  }

  export type CertificateCreateOrConnectWithoutClientInput = {
    where: CertificateWhereUniqueInput
    create: XOR<CertificateCreateWithoutClientInput, CertificateUncheckedCreateWithoutClientInput>
  }

  export type CertificateCreateManyClientInputEnvelope = {
    data: CertificateCreateManyClientInput | CertificateCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutClientInput = {
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutClientInput = {
    id?: number
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutClientInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput>
  }

  export type NotificationCreateManyClientInputEnvelope = {
    data: NotificationCreateManyClientInput | NotificationCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type InvoiceCreateWithoutClientInput = {
    title: string
    fileUrl: string
    issuedDate?: Date | string
    totalAmount: number
    projectName: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InvoiceUncheckedCreateWithoutClientInput = {
    id?: number
    title: string
    fileUrl: string
    issuedDate?: Date | string
    totalAmount: number
    projectName: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type InvoiceCreateOrConnectWithoutClientInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput>
  }

  export type InvoiceCreateManyClientInputEnvelope = {
    data: InvoiceCreateManyClientInput | InvoiceCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type ClientProjectCreateWithoutClientInput = {
    name: string
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: ClientProjectHistoryCreateNestedManyWithoutClientProjectInput
  }

  export type ClientProjectUncheckedCreateWithoutClientInput = {
    id?: number
    name: string
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: ClientProjectHistoryUncheckedCreateNestedManyWithoutClientProjectInput
  }

  export type ClientProjectCreateOrConnectWithoutClientInput = {
    where: ClientProjectWhereUniqueInput
    create: XOR<ClientProjectCreateWithoutClientInput, ClientProjectUncheckedCreateWithoutClientInput>
  }

  export type ClientProjectCreateManyClientInputEnvelope = {
    data: ClientProjectCreateManyClientInput | ClientProjectCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type WarrantyUpsertWithWhereUniqueWithoutClientInput = {
    where: WarrantyWhereUniqueInput
    update: XOR<WarrantyUpdateWithoutClientInput, WarrantyUncheckedUpdateWithoutClientInput>
    create: XOR<WarrantyCreateWithoutClientInput, WarrantyUncheckedCreateWithoutClientInput>
  }

  export type WarrantyUpdateWithWhereUniqueWithoutClientInput = {
    where: WarrantyWhereUniqueInput
    data: XOR<WarrantyUpdateWithoutClientInput, WarrantyUncheckedUpdateWithoutClientInput>
  }

  export type WarrantyUpdateManyWithWhereWithoutClientInput = {
    where: WarrantyScalarWhereInput
    data: XOR<WarrantyUpdateManyMutationInput, WarrantyUncheckedUpdateManyWithoutClientInput>
  }

  export type WarrantyScalarWhereInput = {
    AND?: WarrantyScalarWhereInput | WarrantyScalarWhereInput[]
    OR?: WarrantyScalarWhereInput[]
    NOT?: WarrantyScalarWhereInput | WarrantyScalarWhereInput[]
    id?: IntFilter<"Warranty"> | number
    projectId?: IntNullableFilter<"Warranty"> | number | null
    clientId?: StringFilter<"Warranty"> | string
    startDate?: DateTimeFilter<"Warranty"> | Date | string
    durationMonths?: IntFilter<"Warranty"> | number
    projectName?: StringFilter<"Warranty"> | string
    createdAt?: DateTimeFilter<"Warranty"> | Date | string
  }

  export type CertificateUpsertWithWhereUniqueWithoutClientInput = {
    where: CertificateWhereUniqueInput
    update: XOR<CertificateUpdateWithoutClientInput, CertificateUncheckedUpdateWithoutClientInput>
    create: XOR<CertificateCreateWithoutClientInput, CertificateUncheckedCreateWithoutClientInput>
  }

  export type CertificateUpdateWithWhereUniqueWithoutClientInput = {
    where: CertificateWhereUniqueInput
    data: XOR<CertificateUpdateWithoutClientInput, CertificateUncheckedUpdateWithoutClientInput>
  }

  export type CertificateUpdateManyWithWhereWithoutClientInput = {
    where: CertificateScalarWhereInput
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyWithoutClientInput>
  }

  export type CertificateScalarWhereInput = {
    AND?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
    OR?: CertificateScalarWhereInput[]
    NOT?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
    id?: IntFilter<"Certificate"> | number
    clientId?: StringFilter<"Certificate"> | string
    fileUrl?: StringFilter<"Certificate"> | string
    title?: StringFilter<"Certificate"> | string
    issuedDate?: DateTimeFilter<"Certificate"> | Date | string
    createdAt?: DateTimeFilter<"Certificate"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutClientInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutClientInput, NotificationUncheckedUpdateWithoutClientInput>
    create: XOR<NotificationCreateWithoutClientInput, NotificationUncheckedCreateWithoutClientInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutClientInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutClientInput, NotificationUncheckedUpdateWithoutClientInput>
  }

  export type NotificationUpdateManyWithWhereWithoutClientInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutClientInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    clientId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type InvoiceUpsertWithWhereUniqueWithoutClientInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutClientInput, InvoiceUncheckedUpdateWithoutClientInput>
    create: XOR<InvoiceCreateWithoutClientInput, InvoiceUncheckedCreateWithoutClientInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutClientInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutClientInput, InvoiceUncheckedUpdateWithoutClientInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutClientInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutClientInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: IntFilter<"Invoice"> | number
    clientId?: StringFilter<"Invoice"> | string
    title?: StringFilter<"Invoice"> | string
    fileUrl?: StringFilter<"Invoice"> | string
    issuedDate?: DateTimeFilter<"Invoice"> | Date | string
    totalAmount?: FloatFilter<"Invoice"> | number
    projectName?: StringFilter<"Invoice"> | string
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Invoice"> | Date | string | null
  }

  export type ClientProjectUpsertWithWhereUniqueWithoutClientInput = {
    where: ClientProjectWhereUniqueInput
    update: XOR<ClientProjectUpdateWithoutClientInput, ClientProjectUncheckedUpdateWithoutClientInput>
    create: XOR<ClientProjectCreateWithoutClientInput, ClientProjectUncheckedCreateWithoutClientInput>
  }

  export type ClientProjectUpdateWithWhereUniqueWithoutClientInput = {
    where: ClientProjectWhereUniqueInput
    data: XOR<ClientProjectUpdateWithoutClientInput, ClientProjectUncheckedUpdateWithoutClientInput>
  }

  export type ClientProjectUpdateManyWithWhereWithoutClientInput = {
    where: ClientProjectScalarWhereInput
    data: XOR<ClientProjectUpdateManyMutationInput, ClientProjectUncheckedUpdateManyWithoutClientInput>
  }

  export type ClientProjectScalarWhereInput = {
    AND?: ClientProjectScalarWhereInput | ClientProjectScalarWhereInput[]
    OR?: ClientProjectScalarWhereInput[]
    NOT?: ClientProjectScalarWhereInput | ClientProjectScalarWhereInput[]
    id?: IntFilter<"ClientProject"> | number
    clientId?: StringFilter<"ClientProject"> | string
    name?: StringFilter<"ClientProject"> | string
    status?: StringFilter<"ClientProject"> | string
    startDate?: DateTimeFilter<"ClientProject"> | Date | string
    endDate?: DateTimeNullableFilter<"ClientProject"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"ClientProject"> | Date | string | null
    createdAt?: DateTimeFilter<"ClientProject"> | Date | string
    updatedAt?: DateTimeFilter<"ClientProject"> | Date | string
  }

  export type ProjectCreateWithoutReviewsInput = {
    title: string
    slug: string
    description: string
    content: string
    imagePaths?: ProjectCreateimagePathsInput | string[]
    videoUrl?: string | null
    category: string
    tags?: ProjectCreatetagsInput | string[]
    location?: string | null
    completionDate?: Date | string | null
    seoTitle?: string | null
    seoDescription?: string | null
    seoKeywords?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ProjectUncheckedCreateWithoutReviewsInput = {
    id?: number
    title: string
    slug: string
    description: string
    content: string
    imagePaths?: ProjectCreateimagePathsInput | string[]
    videoUrl?: string | null
    category: string
    tags?: ProjectCreatetagsInput | string[]
    location?: string | null
    completionDate?: Date | string | null
    seoTitle?: string | null
    seoDescription?: string | null
    seoKeywords?: string | null
    published?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ProjectCreateOrConnectWithoutReviewsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutReviewsInput, ProjectUncheckedCreateWithoutReviewsInput>
  }

  export type ProjectUpsertWithoutReviewsInput = {
    update: XOR<ProjectUpdateWithoutReviewsInput, ProjectUncheckedUpdateWithoutReviewsInput>
    create: XOR<ProjectCreateWithoutReviewsInput, ProjectUncheckedCreateWithoutReviewsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutReviewsInput, ProjectUncheckedUpdateWithoutReviewsInput>
  }

  export type ProjectUpdateWithoutReviewsInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePaths?: ProjectUpdateimagePathsInput | string[]
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: ProjectUpdatetagsInput | string[]
    location?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProjectUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    imagePaths?: ProjectUpdateimagePathsInput | string[]
    videoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    tags?: ProjectUpdatetagsInput | string[]
    location?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    seoTitle?: NullableStringFieldUpdateOperationsInput | string | null
    seoDescription?: NullableStringFieldUpdateOperationsInput | string | null
    seoKeywords?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutWarrantiesInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    certificates?: CertificateCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectCreateNestedManyWithoutClientInput
  }

  export type UserUncheckedCreateWithoutWarrantiesInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    certificates?: CertificateUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectUncheckedCreateNestedManyWithoutClientInput
  }

  export type UserCreateOrConnectWithoutWarrantiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWarrantiesInput, UserUncheckedCreateWithoutWarrantiesInput>
  }

  export type UserUpsertWithoutWarrantiesInput = {
    update: XOR<UserUpdateWithoutWarrantiesInput, UserUncheckedUpdateWithoutWarrantiesInput>
    create: XOR<UserCreateWithoutWarrantiesInput, UserUncheckedCreateWithoutWarrantiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWarrantiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWarrantiesInput, UserUncheckedUpdateWithoutWarrantiesInput>
  }

  export type UserUpdateWithoutWarrantiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certificates?: CertificateUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUpdateManyWithoutClientNestedInput
  }

  export type UserUncheckedUpdateWithoutWarrantiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    certificates?: CertificateUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUncheckedUpdateManyWithoutClientNestedInput
  }

  export type UserCreateWithoutCertificatesInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectCreateNestedManyWithoutClientInput
  }

  export type UserUncheckedCreateWithoutCertificatesInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectUncheckedCreateNestedManyWithoutClientInput
  }

  export type UserCreateOrConnectWithoutCertificatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCertificatesInput, UserUncheckedCreateWithoutCertificatesInput>
  }

  export type UserUpsertWithoutCertificatesInput = {
    update: XOR<UserUpdateWithoutCertificatesInput, UserUncheckedUpdateWithoutCertificatesInput>
    create: XOR<UserCreateWithoutCertificatesInput, UserUncheckedCreateWithoutCertificatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCertificatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCertificatesInput, UserUncheckedUpdateWithoutCertificatesInput>
  }

  export type UserUpdateWithoutCertificatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUpdateManyWithoutClientNestedInput
  }

  export type UserUncheckedUpdateWithoutCertificatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUncheckedUpdateManyWithoutClientNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyCreateNestedManyWithoutClientInput
    certificates?: CertificateCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectCreateNestedManyWithoutClientInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyUncheckedCreateNestedManyWithoutClientInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectUncheckedCreateNestedManyWithoutClientInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUpdateManyWithoutClientNestedInput
    certificates?: CertificateUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUpdateManyWithoutClientNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUncheckedUpdateManyWithoutClientNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUncheckedUpdateManyWithoutClientNestedInput
  }

  export type MessageCreateWithoutChatSessionInput = {
    sender: string
    content: string
    isTransferred?: boolean
    createdAt?: Date | string
  }

  export type MessageUncheckedCreateWithoutChatSessionInput = {
    id?: number
    sender: string
    content: string
    isTransferred?: boolean
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutChatSessionInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatSessionInput, MessageUncheckedCreateWithoutChatSessionInput>
  }

  export type MessageCreateManyChatSessionInputEnvelope = {
    data: MessageCreateManyChatSessionInput | MessageCreateManyChatSessionInput[]
    skipDuplicates?: boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutChatSessionInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatSessionInput, MessageUncheckedUpdateWithoutChatSessionInput>
    create: XOR<MessageCreateWithoutChatSessionInput, MessageUncheckedCreateWithoutChatSessionInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatSessionInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatSessionInput, MessageUncheckedUpdateWithoutChatSessionInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatSessionInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutChatSessionInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    chatSessionId?: IntFilter<"Message"> | number
    sender?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    isTransferred?: BoolFilter<"Message"> | boolean
    createdAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type ChatSessionCreateWithoutMessagesInput = {
    userId?: number | null
    sessionKey?: string | null
    createdAt?: Date | string
  }

  export type ChatSessionUncheckedCreateWithoutMessagesInput = {
    id?: number
    userId?: number | null
    sessionKey?: string | null
    createdAt?: Date | string
  }

  export type ChatSessionCreateOrConnectWithoutMessagesInput = {
    where: ChatSessionWhereUniqueInput
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
  }

  export type ChatSessionUpsertWithoutMessagesInput = {
    update: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatSessionCreateWithoutMessagesInput, ChatSessionUncheckedCreateWithoutMessagesInput>
    where?: ChatSessionWhereInput
  }

  export type ChatSessionUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatSessionWhereInput
    data: XOR<ChatSessionUpdateWithoutMessagesInput, ChatSessionUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatSessionUpdateWithoutMessagesInput = {
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatSessionUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    sessionKey?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateWithoutProjectInput = {
    clientName: string
    rating: number
    content: string
    status?: $Enums.ReviewStatus
    companyReply?: string | null
    createdAt?: Date | string
  }

  export type ReviewUncheckedCreateWithoutProjectInput = {
    id?: number
    clientName: string
    rating: number
    content: string
    status?: $Enums.ReviewStatus
    companyReply?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutProjectInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput>
  }

  export type ReviewCreateManyProjectInputEnvelope = {
    data: ReviewCreateManyProjectInput | ReviewCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ReviewUpsertWithWhereUniqueWithoutProjectInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutProjectInput, ReviewUncheckedUpdateWithoutProjectInput>
    create: XOR<ReviewCreateWithoutProjectInput, ReviewUncheckedCreateWithoutProjectInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutProjectInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutProjectInput, ReviewUncheckedUpdateWithoutProjectInput>
  }

  export type ReviewUpdateManyWithWhereWithoutProjectInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutProjectInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    clientName?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    content?: StringFilter<"Review"> | string
    status?: EnumReviewStatusFilter<"Review"> | $Enums.ReviewStatus
    companyReply?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    projectId?: IntNullableFilter<"Review"> | number | null
  }

  export type WorkPackageCreateWithoutProjectTypeInput = {
    name: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
    services?: ServiceItemCreateNestedManyWithoutPackageInput
  }

  export type WorkPackageUncheckedCreateWithoutProjectTypeInput = {
    id?: number
    name: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
    services?: ServiceItemUncheckedCreateNestedManyWithoutPackageInput
  }

  export type WorkPackageCreateOrConnectWithoutProjectTypeInput = {
    where: WorkPackageWhereUniqueInput
    create: XOR<WorkPackageCreateWithoutProjectTypeInput, WorkPackageUncheckedCreateWithoutProjectTypeInput>
  }

  export type WorkPackageCreateManyProjectTypeInputEnvelope = {
    data: WorkPackageCreateManyProjectTypeInput | WorkPackageCreateManyProjectTypeInput[]
    skipDuplicates?: boolean
  }

  export type WorkPackageUpsertWithWhereUniqueWithoutProjectTypeInput = {
    where: WorkPackageWhereUniqueInput
    update: XOR<WorkPackageUpdateWithoutProjectTypeInput, WorkPackageUncheckedUpdateWithoutProjectTypeInput>
    create: XOR<WorkPackageCreateWithoutProjectTypeInput, WorkPackageUncheckedCreateWithoutProjectTypeInput>
  }

  export type WorkPackageUpdateWithWhereUniqueWithoutProjectTypeInput = {
    where: WorkPackageWhereUniqueInput
    data: XOR<WorkPackageUpdateWithoutProjectTypeInput, WorkPackageUncheckedUpdateWithoutProjectTypeInput>
  }

  export type WorkPackageUpdateManyWithWhereWithoutProjectTypeInput = {
    where: WorkPackageScalarWhereInput
    data: XOR<WorkPackageUpdateManyMutationInput, WorkPackageUncheckedUpdateManyWithoutProjectTypeInput>
  }

  export type WorkPackageScalarWhereInput = {
    AND?: WorkPackageScalarWhereInput | WorkPackageScalarWhereInput[]
    OR?: WorkPackageScalarWhereInput[]
    NOT?: WorkPackageScalarWhereInput | WorkPackageScalarWhereInput[]
    id?: IntFilter<"WorkPackage"> | number
    projectTypeId?: IntFilter<"WorkPackage"> | number
    name?: StringFilter<"WorkPackage"> | string
    description?: StringNullableFilter<"WorkPackage"> | string | null
    sortOrder?: IntFilter<"WorkPackage"> | number
    createdAt?: DateTimeFilter<"WorkPackage"> | Date | string
  }

  export type ProjectTypeCreateWithoutPackagesInput = {
    name: string
    slug: string
    description?: string | null
    icon?: string | null
    steps?: number
    active?: boolean
    createdAt?: Date | string
  }

  export type ProjectTypeUncheckedCreateWithoutPackagesInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    icon?: string | null
    steps?: number
    active?: boolean
    createdAt?: Date | string
  }

  export type ProjectTypeCreateOrConnectWithoutPackagesInput = {
    where: ProjectTypeWhereUniqueInput
    create: XOR<ProjectTypeCreateWithoutPackagesInput, ProjectTypeUncheckedCreateWithoutPackagesInput>
  }

  export type ServiceItemCreateWithoutPackageInput = {
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    options?: ServiceOptionCreateNestedManyWithoutServiceInput
    followUps?: FollowUpCreateNestedManyWithoutSourceInput
    suggestedBy?: FollowUpCreateNestedManyWithoutTargetInput
  }

  export type ServiceItemUncheckedCreateWithoutPackageInput = {
    id?: number
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    options?: ServiceOptionUncheckedCreateNestedManyWithoutServiceInput
    followUps?: FollowUpUncheckedCreateNestedManyWithoutSourceInput
    suggestedBy?: FollowUpUncheckedCreateNestedManyWithoutTargetInput
  }

  export type ServiceItemCreateOrConnectWithoutPackageInput = {
    where: ServiceItemWhereUniqueInput
    create: XOR<ServiceItemCreateWithoutPackageInput, ServiceItemUncheckedCreateWithoutPackageInput>
  }

  export type ServiceItemCreateManyPackageInputEnvelope = {
    data: ServiceItemCreateManyPackageInput | ServiceItemCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type ProjectTypeUpsertWithoutPackagesInput = {
    update: XOR<ProjectTypeUpdateWithoutPackagesInput, ProjectTypeUncheckedUpdateWithoutPackagesInput>
    create: XOR<ProjectTypeCreateWithoutPackagesInput, ProjectTypeUncheckedCreateWithoutPackagesInput>
    where?: ProjectTypeWhereInput
  }

  export type ProjectTypeUpdateToOneWithWhereWithoutPackagesInput = {
    where?: ProjectTypeWhereInput
    data: XOR<ProjectTypeUpdateWithoutPackagesInput, ProjectTypeUncheckedUpdateWithoutPackagesInput>
  }

  export type ProjectTypeUpdateWithoutPackagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectTypeUncheckedUpdateWithoutPackagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceItemUpsertWithWhereUniqueWithoutPackageInput = {
    where: ServiceItemWhereUniqueInput
    update: XOR<ServiceItemUpdateWithoutPackageInput, ServiceItemUncheckedUpdateWithoutPackageInput>
    create: XOR<ServiceItemCreateWithoutPackageInput, ServiceItemUncheckedCreateWithoutPackageInput>
  }

  export type ServiceItemUpdateWithWhereUniqueWithoutPackageInput = {
    where: ServiceItemWhereUniqueInput
    data: XOR<ServiceItemUpdateWithoutPackageInput, ServiceItemUncheckedUpdateWithoutPackageInput>
  }

  export type ServiceItemUpdateManyWithWhereWithoutPackageInput = {
    where: ServiceItemScalarWhereInput
    data: XOR<ServiceItemUpdateManyMutationInput, ServiceItemUncheckedUpdateManyWithoutPackageInput>
  }

  export type ServiceItemScalarWhereInput = {
    AND?: ServiceItemScalarWhereInput | ServiceItemScalarWhereInput[]
    OR?: ServiceItemScalarWhereInput[]
    NOT?: ServiceItemScalarWhereInput | ServiceItemScalarWhereInput[]
    id?: IntFilter<"ServiceItem"> | number
    packageId?: IntFilter<"ServiceItem"> | number
    name?: StringFilter<"ServiceItem"> | string
    description?: StringNullableFilter<"ServiceItem"> | string | null
    group?: StringNullableFilter<"ServiceItem"> | string | null
    unit?: StringFilter<"ServiceItem"> | string
    basePrice?: FloatFilter<"ServiceItem"> | number
    multiplier?: FloatNullableFilter<"ServiceItem"> | number | null
    required?: BoolFilter<"ServiceItem"> | boolean
    visibleByDefault?: BoolFilter<"ServiceItem"> | boolean
    aiSuggestible?: BoolFilter<"ServiceItem"> | boolean
    additionalNotes?: StringNullableFilter<"ServiceItem"> | string | null
    sortOrder?: IntFilter<"ServiceItem"> | number
    createdAt?: DateTimeFilter<"ServiceItem"> | Date | string
  }

  export type WorkPackageCreateWithoutServicesInput = {
    name: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
    projectType: ProjectTypeCreateNestedOneWithoutPackagesInput
  }

  export type WorkPackageUncheckedCreateWithoutServicesInput = {
    id?: number
    projectTypeId: number
    name: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type WorkPackageCreateOrConnectWithoutServicesInput = {
    where: WorkPackageWhereUniqueInput
    create: XOR<WorkPackageCreateWithoutServicesInput, WorkPackageUncheckedCreateWithoutServicesInput>
  }

  export type ServiceOptionCreateWithoutServiceInput = {
    name: string
    priceDelta: number
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type ServiceOptionUncheckedCreateWithoutServiceInput = {
    id?: number
    name: string
    priceDelta: number
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type ServiceOptionCreateOrConnectWithoutServiceInput = {
    where: ServiceOptionWhereUniqueInput
    create: XOR<ServiceOptionCreateWithoutServiceInput, ServiceOptionUncheckedCreateWithoutServiceInput>
  }

  export type ServiceOptionCreateManyServiceInputEnvelope = {
    data: ServiceOptionCreateManyServiceInput | ServiceOptionCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type FollowUpCreateWithoutSourceInput = {
    reason?: string | null
    condition?: string | null
    target: ServiceItemCreateNestedOneWithoutSuggestedByInput
  }

  export type FollowUpUncheckedCreateWithoutSourceInput = {
    id?: number
    targetId: number
    reason?: string | null
    condition?: string | null
  }

  export type FollowUpCreateOrConnectWithoutSourceInput = {
    where: FollowUpWhereUniqueInput
    create: XOR<FollowUpCreateWithoutSourceInput, FollowUpUncheckedCreateWithoutSourceInput>
  }

  export type FollowUpCreateManySourceInputEnvelope = {
    data: FollowUpCreateManySourceInput | FollowUpCreateManySourceInput[]
    skipDuplicates?: boolean
  }

  export type FollowUpCreateWithoutTargetInput = {
    reason?: string | null
    condition?: string | null
    source: ServiceItemCreateNestedOneWithoutFollowUpsInput
  }

  export type FollowUpUncheckedCreateWithoutTargetInput = {
    id?: number
    sourceId: number
    reason?: string | null
    condition?: string | null
  }

  export type FollowUpCreateOrConnectWithoutTargetInput = {
    where: FollowUpWhereUniqueInput
    create: XOR<FollowUpCreateWithoutTargetInput, FollowUpUncheckedCreateWithoutTargetInput>
  }

  export type FollowUpCreateManyTargetInputEnvelope = {
    data: FollowUpCreateManyTargetInput | FollowUpCreateManyTargetInput[]
    skipDuplicates?: boolean
  }

  export type WorkPackageUpsertWithoutServicesInput = {
    update: XOR<WorkPackageUpdateWithoutServicesInput, WorkPackageUncheckedUpdateWithoutServicesInput>
    create: XOR<WorkPackageCreateWithoutServicesInput, WorkPackageUncheckedCreateWithoutServicesInput>
    where?: WorkPackageWhereInput
  }

  export type WorkPackageUpdateToOneWithWhereWithoutServicesInput = {
    where?: WorkPackageWhereInput
    data: XOR<WorkPackageUpdateWithoutServicesInput, WorkPackageUncheckedUpdateWithoutServicesInput>
  }

  export type WorkPackageUpdateWithoutServicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projectType?: ProjectTypeUpdateOneRequiredWithoutPackagesNestedInput
  }

  export type WorkPackageUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectTypeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceOptionUpsertWithWhereUniqueWithoutServiceInput = {
    where: ServiceOptionWhereUniqueInput
    update: XOR<ServiceOptionUpdateWithoutServiceInput, ServiceOptionUncheckedUpdateWithoutServiceInput>
    create: XOR<ServiceOptionCreateWithoutServiceInput, ServiceOptionUncheckedCreateWithoutServiceInput>
  }

  export type ServiceOptionUpdateWithWhereUniqueWithoutServiceInput = {
    where: ServiceOptionWhereUniqueInput
    data: XOR<ServiceOptionUpdateWithoutServiceInput, ServiceOptionUncheckedUpdateWithoutServiceInput>
  }

  export type ServiceOptionUpdateManyWithWhereWithoutServiceInput = {
    where: ServiceOptionScalarWhereInput
    data: XOR<ServiceOptionUpdateManyMutationInput, ServiceOptionUncheckedUpdateManyWithoutServiceInput>
  }

  export type ServiceOptionScalarWhereInput = {
    AND?: ServiceOptionScalarWhereInput | ServiceOptionScalarWhereInput[]
    OR?: ServiceOptionScalarWhereInput[]
    NOT?: ServiceOptionScalarWhereInput | ServiceOptionScalarWhereInput[]
    id?: IntFilter<"ServiceOption"> | number
    serviceId?: IntFilter<"ServiceOption"> | number
    name?: StringFilter<"ServiceOption"> | string
    priceDelta?: FloatFilter<"ServiceOption"> | number
    description?: StringNullableFilter<"ServiceOption"> | string | null
    imageUrl?: StringNullableFilter<"ServiceOption"> | string | null
    createdAt?: DateTimeFilter<"ServiceOption"> | Date | string
  }

  export type FollowUpUpsertWithWhereUniqueWithoutSourceInput = {
    where: FollowUpWhereUniqueInput
    update: XOR<FollowUpUpdateWithoutSourceInput, FollowUpUncheckedUpdateWithoutSourceInput>
    create: XOR<FollowUpCreateWithoutSourceInput, FollowUpUncheckedCreateWithoutSourceInput>
  }

  export type FollowUpUpdateWithWhereUniqueWithoutSourceInput = {
    where: FollowUpWhereUniqueInput
    data: XOR<FollowUpUpdateWithoutSourceInput, FollowUpUncheckedUpdateWithoutSourceInput>
  }

  export type FollowUpUpdateManyWithWhereWithoutSourceInput = {
    where: FollowUpScalarWhereInput
    data: XOR<FollowUpUpdateManyMutationInput, FollowUpUncheckedUpdateManyWithoutSourceInput>
  }

  export type FollowUpScalarWhereInput = {
    AND?: FollowUpScalarWhereInput | FollowUpScalarWhereInput[]
    OR?: FollowUpScalarWhereInput[]
    NOT?: FollowUpScalarWhereInput | FollowUpScalarWhereInput[]
    id?: IntFilter<"FollowUp"> | number
    sourceId?: IntFilter<"FollowUp"> | number
    targetId?: IntFilter<"FollowUp"> | number
    reason?: StringNullableFilter<"FollowUp"> | string | null
    condition?: StringNullableFilter<"FollowUp"> | string | null
  }

  export type FollowUpUpsertWithWhereUniqueWithoutTargetInput = {
    where: FollowUpWhereUniqueInput
    update: XOR<FollowUpUpdateWithoutTargetInput, FollowUpUncheckedUpdateWithoutTargetInput>
    create: XOR<FollowUpCreateWithoutTargetInput, FollowUpUncheckedCreateWithoutTargetInput>
  }

  export type FollowUpUpdateWithWhereUniqueWithoutTargetInput = {
    where: FollowUpWhereUniqueInput
    data: XOR<FollowUpUpdateWithoutTargetInput, FollowUpUncheckedUpdateWithoutTargetInput>
  }

  export type FollowUpUpdateManyWithWhereWithoutTargetInput = {
    where: FollowUpScalarWhereInput
    data: XOR<FollowUpUpdateManyMutationInput, FollowUpUncheckedUpdateManyWithoutTargetInput>
  }

  export type ServiceItemCreateWithoutOptionsInput = {
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    package: WorkPackageCreateNestedOneWithoutServicesInput
    followUps?: FollowUpCreateNestedManyWithoutSourceInput
    suggestedBy?: FollowUpCreateNestedManyWithoutTargetInput
  }

  export type ServiceItemUncheckedCreateWithoutOptionsInput = {
    id?: number
    packageId: number
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    followUps?: FollowUpUncheckedCreateNestedManyWithoutSourceInput
    suggestedBy?: FollowUpUncheckedCreateNestedManyWithoutTargetInput
  }

  export type ServiceItemCreateOrConnectWithoutOptionsInput = {
    where: ServiceItemWhereUniqueInput
    create: XOR<ServiceItemCreateWithoutOptionsInput, ServiceItemUncheckedCreateWithoutOptionsInput>
  }

  export type ServiceItemUpsertWithoutOptionsInput = {
    update: XOR<ServiceItemUpdateWithoutOptionsInput, ServiceItemUncheckedUpdateWithoutOptionsInput>
    create: XOR<ServiceItemCreateWithoutOptionsInput, ServiceItemUncheckedCreateWithoutOptionsInput>
    where?: ServiceItemWhereInput
  }

  export type ServiceItemUpdateToOneWithWhereWithoutOptionsInput = {
    where?: ServiceItemWhereInput
    data: XOR<ServiceItemUpdateWithoutOptionsInput, ServiceItemUncheckedUpdateWithoutOptionsInput>
  }

  export type ServiceItemUpdateWithoutOptionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: WorkPackageUpdateOneRequiredWithoutServicesNestedInput
    followUps?: FollowUpUpdateManyWithoutSourceNestedInput
    suggestedBy?: FollowUpUpdateManyWithoutTargetNestedInput
  }

  export type ServiceItemUncheckedUpdateWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followUps?: FollowUpUncheckedUpdateManyWithoutSourceNestedInput
    suggestedBy?: FollowUpUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type ServiceItemCreateWithoutFollowUpsInput = {
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    package: WorkPackageCreateNestedOneWithoutServicesInput
    options?: ServiceOptionCreateNestedManyWithoutServiceInput
    suggestedBy?: FollowUpCreateNestedManyWithoutTargetInput
  }

  export type ServiceItemUncheckedCreateWithoutFollowUpsInput = {
    id?: number
    packageId: number
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    options?: ServiceOptionUncheckedCreateNestedManyWithoutServiceInput
    suggestedBy?: FollowUpUncheckedCreateNestedManyWithoutTargetInput
  }

  export type ServiceItemCreateOrConnectWithoutFollowUpsInput = {
    where: ServiceItemWhereUniqueInput
    create: XOR<ServiceItemCreateWithoutFollowUpsInput, ServiceItemUncheckedCreateWithoutFollowUpsInput>
  }

  export type ServiceItemCreateWithoutSuggestedByInput = {
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    package: WorkPackageCreateNestedOneWithoutServicesInput
    options?: ServiceOptionCreateNestedManyWithoutServiceInput
    followUps?: FollowUpCreateNestedManyWithoutSourceInput
  }

  export type ServiceItemUncheckedCreateWithoutSuggestedByInput = {
    id?: number
    packageId: number
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
    options?: ServiceOptionUncheckedCreateNestedManyWithoutServiceInput
    followUps?: FollowUpUncheckedCreateNestedManyWithoutSourceInput
  }

  export type ServiceItemCreateOrConnectWithoutSuggestedByInput = {
    where: ServiceItemWhereUniqueInput
    create: XOR<ServiceItemCreateWithoutSuggestedByInput, ServiceItemUncheckedCreateWithoutSuggestedByInput>
  }

  export type ServiceItemUpsertWithoutFollowUpsInput = {
    update: XOR<ServiceItemUpdateWithoutFollowUpsInput, ServiceItemUncheckedUpdateWithoutFollowUpsInput>
    create: XOR<ServiceItemCreateWithoutFollowUpsInput, ServiceItemUncheckedCreateWithoutFollowUpsInput>
    where?: ServiceItemWhereInput
  }

  export type ServiceItemUpdateToOneWithWhereWithoutFollowUpsInput = {
    where?: ServiceItemWhereInput
    data: XOR<ServiceItemUpdateWithoutFollowUpsInput, ServiceItemUncheckedUpdateWithoutFollowUpsInput>
  }

  export type ServiceItemUpdateWithoutFollowUpsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: WorkPackageUpdateOneRequiredWithoutServicesNestedInput
    options?: ServiceOptionUpdateManyWithoutServiceNestedInput
    suggestedBy?: FollowUpUpdateManyWithoutTargetNestedInput
  }

  export type ServiceItemUncheckedUpdateWithoutFollowUpsInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: ServiceOptionUncheckedUpdateManyWithoutServiceNestedInput
    suggestedBy?: FollowUpUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type ServiceItemUpsertWithoutSuggestedByInput = {
    update: XOR<ServiceItemUpdateWithoutSuggestedByInput, ServiceItemUncheckedUpdateWithoutSuggestedByInput>
    create: XOR<ServiceItemCreateWithoutSuggestedByInput, ServiceItemUncheckedCreateWithoutSuggestedByInput>
    where?: ServiceItemWhereInput
  }

  export type ServiceItemUpdateToOneWithWhereWithoutSuggestedByInput = {
    where?: ServiceItemWhereInput
    data: XOR<ServiceItemUpdateWithoutSuggestedByInput, ServiceItemUncheckedUpdateWithoutSuggestedByInput>
  }

  export type ServiceItemUpdateWithoutSuggestedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: WorkPackageUpdateOneRequiredWithoutServicesNestedInput
    options?: ServiceOptionUpdateManyWithoutServiceNestedInput
    followUps?: FollowUpUpdateManyWithoutSourceNestedInput
  }

  export type ServiceItemUncheckedUpdateWithoutSuggestedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: ServiceOptionUncheckedUpdateManyWithoutServiceNestedInput
    followUps?: FollowUpUncheckedUpdateManyWithoutSourceNestedInput
  }

  export type UserCreateWithoutInvoicesInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyCreateNestedManyWithoutClientInput
    certificates?: CertificateCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectCreateNestedManyWithoutClientInput
  }

  export type UserUncheckedCreateWithoutInvoicesInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyUncheckedCreateNestedManyWithoutClientInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
    clientProjects?: ClientProjectUncheckedCreateNestedManyWithoutClientInput
  }

  export type UserCreateOrConnectWithoutInvoicesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
  }

  export type UserUpsertWithoutInvoicesInput = {
    update: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
    create: XOR<UserCreateWithoutInvoicesInput, UserUncheckedCreateWithoutInvoicesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvoicesInput, UserUncheckedUpdateWithoutInvoicesInput>
  }

  export type UserUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUpdateManyWithoutClientNestedInput
    certificates?: CertificateUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUpdateManyWithoutClientNestedInput
  }

  export type UserUncheckedUpdateWithoutInvoicesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUncheckedUpdateManyWithoutClientNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
    clientProjects?: ClientProjectUncheckedUpdateManyWithoutClientNestedInput
  }

  export type UserCreateWithoutClientProjectsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyCreateNestedManyWithoutClientInput
    certificates?: CertificateCreateNestedManyWithoutClientInput
    notifications?: NotificationCreateNestedManyWithoutClientInput
    invoices?: InvoiceCreateNestedManyWithoutClientInput
  }

  export type UserUncheckedCreateWithoutClientProjectsInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.Role
    name?: string | null
    address?: string | null
    phone?: string | null
    lastLogin?: Date | string | null
    isConfirmed?: boolean
    isActive?: boolean
    warranties?: WarrantyUncheckedCreateNestedManyWithoutClientInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutClientInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutClientInput
    invoices?: InvoiceUncheckedCreateNestedManyWithoutClientInput
  }

  export type UserCreateOrConnectWithoutClientProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClientProjectsInput, UserUncheckedCreateWithoutClientProjectsInput>
  }

  export type ClientProjectHistoryCreateWithoutClientProjectInput = {
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ClientProjectHistoryUncheckedCreateWithoutClientProjectInput = {
    id?: number
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ClientProjectHistoryCreateOrConnectWithoutClientProjectInput = {
    where: ClientProjectHistoryWhereUniqueInput
    create: XOR<ClientProjectHistoryCreateWithoutClientProjectInput, ClientProjectHistoryUncheckedCreateWithoutClientProjectInput>
  }

  export type ClientProjectHistoryCreateManyClientProjectInputEnvelope = {
    data: ClientProjectHistoryCreateManyClientProjectInput | ClientProjectHistoryCreateManyClientProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutClientProjectsInput = {
    update: XOR<UserUpdateWithoutClientProjectsInput, UserUncheckedUpdateWithoutClientProjectsInput>
    create: XOR<UserCreateWithoutClientProjectsInput, UserUncheckedCreateWithoutClientProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClientProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClientProjectsInput, UserUncheckedUpdateWithoutClientProjectsInput>
  }

  export type UserUpdateWithoutClientProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUpdateManyWithoutClientNestedInput
    certificates?: CertificateUpdateManyWithoutClientNestedInput
    notifications?: NotificationUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUpdateManyWithoutClientNestedInput
  }

  export type UserUncheckedUpdateWithoutClientProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    name?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isConfirmed?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    warranties?: WarrantyUncheckedUpdateManyWithoutClientNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutClientNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutClientNestedInput
    invoices?: InvoiceUncheckedUpdateManyWithoutClientNestedInput
  }

  export type ClientProjectHistoryUpsertWithWhereUniqueWithoutClientProjectInput = {
    where: ClientProjectHistoryWhereUniqueInput
    update: XOR<ClientProjectHistoryUpdateWithoutClientProjectInput, ClientProjectHistoryUncheckedUpdateWithoutClientProjectInput>
    create: XOR<ClientProjectHistoryCreateWithoutClientProjectInput, ClientProjectHistoryUncheckedCreateWithoutClientProjectInput>
  }

  export type ClientProjectHistoryUpdateWithWhereUniqueWithoutClientProjectInput = {
    where: ClientProjectHistoryWhereUniqueInput
    data: XOR<ClientProjectHistoryUpdateWithoutClientProjectInput, ClientProjectHistoryUncheckedUpdateWithoutClientProjectInput>
  }

  export type ClientProjectHistoryUpdateManyWithWhereWithoutClientProjectInput = {
    where: ClientProjectHistoryScalarWhereInput
    data: XOR<ClientProjectHistoryUpdateManyMutationInput, ClientProjectHistoryUncheckedUpdateManyWithoutClientProjectInput>
  }

  export type ClientProjectHistoryScalarWhereInput = {
    AND?: ClientProjectHistoryScalarWhereInput | ClientProjectHistoryScalarWhereInput[]
    OR?: ClientProjectHistoryScalarWhereInput[]
    NOT?: ClientProjectHistoryScalarWhereInput | ClientProjectHistoryScalarWhereInput[]
    id?: IntFilter<"ClientProjectHistory"> | number
    clientProjectId?: IntFilter<"ClientProjectHistory"> | number
    status?: StringFilter<"ClientProjectHistory"> | string
    startDate?: DateTimeFilter<"ClientProjectHistory"> | Date | string
    endDate?: DateTimeNullableFilter<"ClientProjectHistory"> | Date | string | null
    deletedAt?: DateTimeNullableFilter<"ClientProjectHistory"> | Date | string | null
    createdAt?: DateTimeFilter<"ClientProjectHistory"> | Date | string
  }

  export type ClientProjectCreateWithoutHistoryInput = {
    name: string
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    client: UserCreateNestedOneWithoutClientProjectsInput
  }

  export type ClientProjectUncheckedCreateWithoutHistoryInput = {
    id?: number
    clientId: string
    name: string
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClientProjectCreateOrConnectWithoutHistoryInput = {
    where: ClientProjectWhereUniqueInput
    create: XOR<ClientProjectCreateWithoutHistoryInput, ClientProjectUncheckedCreateWithoutHistoryInput>
  }

  export type ClientProjectUpsertWithoutHistoryInput = {
    update: XOR<ClientProjectUpdateWithoutHistoryInput, ClientProjectUncheckedUpdateWithoutHistoryInput>
    create: XOR<ClientProjectCreateWithoutHistoryInput, ClientProjectUncheckedCreateWithoutHistoryInput>
    where?: ClientProjectWhereInput
  }

  export type ClientProjectUpdateToOneWithWhereWithoutHistoryInput = {
    where?: ClientProjectWhereInput
    data: XOR<ClientProjectUpdateWithoutHistoryInput, ClientProjectUncheckedUpdateWithoutHistoryInput>
  }

  export type ClientProjectUpdateWithoutHistoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: UserUpdateOneRequiredWithoutClientProjectsNestedInput
  }

  export type ClientProjectUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatMessageCreateWithoutThreadInput = {
    id?: string
    sender: string
    content: string
    createdAt?: Date | string
  }

  export type AiChatMessageUncheckedCreateWithoutThreadInput = {
    id?: string
    sender: string
    content: string
    createdAt?: Date | string
  }

  export type AiChatMessageCreateOrConnectWithoutThreadInput = {
    where: AiChatMessageWhereUniqueInput
    create: XOR<AiChatMessageCreateWithoutThreadInput, AiChatMessageUncheckedCreateWithoutThreadInput>
  }

  export type AiChatMessageCreateManyThreadInputEnvelope = {
    data: AiChatMessageCreateManyThreadInput | AiChatMessageCreateManyThreadInput[]
    skipDuplicates?: boolean
  }

  export type AiChatEscalationCreateWithoutThreadInput = {
    name?: string | null
    email: string
    message?: string | null
    createdAt?: Date | string
  }

  export type AiChatEscalationUncheckedCreateWithoutThreadInput = {
    id?: number
    name?: string | null
    email: string
    message?: string | null
    createdAt?: Date | string
  }

  export type AiChatEscalationCreateOrConnectWithoutThreadInput = {
    where: AiChatEscalationWhereUniqueInput
    create: XOR<AiChatEscalationCreateWithoutThreadInput, AiChatEscalationUncheckedCreateWithoutThreadInput>
  }

  export type AiChatMessageUpsertWithWhereUniqueWithoutThreadInput = {
    where: AiChatMessageWhereUniqueInput
    update: XOR<AiChatMessageUpdateWithoutThreadInput, AiChatMessageUncheckedUpdateWithoutThreadInput>
    create: XOR<AiChatMessageCreateWithoutThreadInput, AiChatMessageUncheckedCreateWithoutThreadInput>
  }

  export type AiChatMessageUpdateWithWhereUniqueWithoutThreadInput = {
    where: AiChatMessageWhereUniqueInput
    data: XOR<AiChatMessageUpdateWithoutThreadInput, AiChatMessageUncheckedUpdateWithoutThreadInput>
  }

  export type AiChatMessageUpdateManyWithWhereWithoutThreadInput = {
    where: AiChatMessageScalarWhereInput
    data: XOR<AiChatMessageUpdateManyMutationInput, AiChatMessageUncheckedUpdateManyWithoutThreadInput>
  }

  export type AiChatMessageScalarWhereInput = {
    AND?: AiChatMessageScalarWhereInput | AiChatMessageScalarWhereInput[]
    OR?: AiChatMessageScalarWhereInput[]
    NOT?: AiChatMessageScalarWhereInput | AiChatMessageScalarWhereInput[]
    id?: StringFilter<"AiChatMessage"> | string
    threadId?: StringFilter<"AiChatMessage"> | string
    sender?: StringFilter<"AiChatMessage"> | string
    content?: StringFilter<"AiChatMessage"> | string
    createdAt?: DateTimeFilter<"AiChatMessage"> | Date | string
  }

  export type AiChatEscalationUpsertWithoutThreadInput = {
    update: XOR<AiChatEscalationUpdateWithoutThreadInput, AiChatEscalationUncheckedUpdateWithoutThreadInput>
    create: XOR<AiChatEscalationCreateWithoutThreadInput, AiChatEscalationUncheckedCreateWithoutThreadInput>
    where?: AiChatEscalationWhereInput
  }

  export type AiChatEscalationUpdateToOneWithWhereWithoutThreadInput = {
    where?: AiChatEscalationWhereInput
    data: XOR<AiChatEscalationUpdateWithoutThreadInput, AiChatEscalationUncheckedUpdateWithoutThreadInput>
  }

  export type AiChatEscalationUpdateWithoutThreadInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatEscalationUncheckedUpdateWithoutThreadInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatThreadCreateWithoutMessagesInput = {
    id?: string
    sessionKey: string
    isEscalated?: boolean
    createdAt?: Date | string
    escalation?: AiChatEscalationCreateNestedOneWithoutThreadInput
  }

  export type AiChatThreadUncheckedCreateWithoutMessagesInput = {
    id?: string
    sessionKey: string
    isEscalated?: boolean
    createdAt?: Date | string
    escalation?: AiChatEscalationUncheckedCreateNestedOneWithoutThreadInput
  }

  export type AiChatThreadCreateOrConnectWithoutMessagesInput = {
    where: AiChatThreadWhereUniqueInput
    create: XOR<AiChatThreadCreateWithoutMessagesInput, AiChatThreadUncheckedCreateWithoutMessagesInput>
  }

  export type AiChatThreadUpsertWithoutMessagesInput = {
    update: XOR<AiChatThreadUpdateWithoutMessagesInput, AiChatThreadUncheckedUpdateWithoutMessagesInput>
    create: XOR<AiChatThreadCreateWithoutMessagesInput, AiChatThreadUncheckedCreateWithoutMessagesInput>
    where?: AiChatThreadWhereInput
  }

  export type AiChatThreadUpdateToOneWithWhereWithoutMessagesInput = {
    where?: AiChatThreadWhereInput
    data: XOR<AiChatThreadUpdateWithoutMessagesInput, AiChatThreadUncheckedUpdateWithoutMessagesInput>
  }

  export type AiChatThreadUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    isEscalated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    escalation?: AiChatEscalationUpdateOneWithoutThreadNestedInput
  }

  export type AiChatThreadUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    isEscalated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    escalation?: AiChatEscalationUncheckedUpdateOneWithoutThreadNestedInput
  }

  export type AiChatThreadCreateWithoutEscalationInput = {
    id?: string
    sessionKey: string
    isEscalated?: boolean
    createdAt?: Date | string
    messages?: AiChatMessageCreateNestedManyWithoutThreadInput
  }

  export type AiChatThreadUncheckedCreateWithoutEscalationInput = {
    id?: string
    sessionKey: string
    isEscalated?: boolean
    createdAt?: Date | string
    messages?: AiChatMessageUncheckedCreateNestedManyWithoutThreadInput
  }

  export type AiChatThreadCreateOrConnectWithoutEscalationInput = {
    where: AiChatThreadWhereUniqueInput
    create: XOR<AiChatThreadCreateWithoutEscalationInput, AiChatThreadUncheckedCreateWithoutEscalationInput>
  }

  export type AiChatThreadUpsertWithoutEscalationInput = {
    update: XOR<AiChatThreadUpdateWithoutEscalationInput, AiChatThreadUncheckedUpdateWithoutEscalationInput>
    create: XOR<AiChatThreadCreateWithoutEscalationInput, AiChatThreadUncheckedCreateWithoutEscalationInput>
    where?: AiChatThreadWhereInput
  }

  export type AiChatThreadUpdateToOneWithWhereWithoutEscalationInput = {
    where?: AiChatThreadWhereInput
    data: XOR<AiChatThreadUpdateWithoutEscalationInput, AiChatThreadUncheckedUpdateWithoutEscalationInput>
  }

  export type AiChatThreadUpdateWithoutEscalationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    isEscalated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: AiChatMessageUpdateManyWithoutThreadNestedInput
  }

  export type AiChatThreadUncheckedUpdateWithoutEscalationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionKey?: StringFieldUpdateOperationsInput | string
    isEscalated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: AiChatMessageUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type CalcProjectTypeCreateWithoutCategoriesInput = {
    name: string
    slug: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type CalcProjectTypeUncheckedCreateWithoutCategoriesInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type CalcProjectTypeCreateOrConnectWithoutCategoriesInput = {
    where: CalcProjectTypeWhereUniqueInput
    create: XOR<CalcProjectTypeCreateWithoutCategoriesInput, CalcProjectTypeUncheckedCreateWithoutCategoriesInput>
  }

  export type CalcItemCreateWithoutCategoryInput = {
    name: string
    description?: string | null
    unitType: $Enums.CalcUnitType
    minPrice: number
    maxPrice: number
    baseMin?: number
    baseMax?: number
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: CalcConditionCreateNestedManyWithoutItemInput
  }

  export type CalcItemUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    description?: string | null
    unitType: $Enums.CalcUnitType
    minPrice: number
    maxPrice: number
    baseMin?: number
    baseMax?: number
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    conditions?: CalcConditionUncheckedCreateNestedManyWithoutItemInput
  }

  export type CalcItemCreateOrConnectWithoutCategoryInput = {
    where: CalcItemWhereUniqueInput
    create: XOR<CalcItemCreateWithoutCategoryInput, CalcItemUncheckedCreateWithoutCategoryInput>
  }

  export type CalcItemCreateManyCategoryInputEnvelope = {
    data: CalcItemCreateManyCategoryInput | CalcItemCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CalcProjectTypeUpsertWithoutCategoriesInput = {
    update: XOR<CalcProjectTypeUpdateWithoutCategoriesInput, CalcProjectTypeUncheckedUpdateWithoutCategoriesInput>
    create: XOR<CalcProjectTypeCreateWithoutCategoriesInput, CalcProjectTypeUncheckedCreateWithoutCategoriesInput>
    where?: CalcProjectTypeWhereInput
  }

  export type CalcProjectTypeUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: CalcProjectTypeWhereInput
    data: XOR<CalcProjectTypeUpdateWithoutCategoriesInput, CalcProjectTypeUncheckedUpdateWithoutCategoriesInput>
  }

  export type CalcProjectTypeUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcProjectTypeUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcItemUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CalcItemWhereUniqueInput
    update: XOR<CalcItemUpdateWithoutCategoryInput, CalcItemUncheckedUpdateWithoutCategoryInput>
    create: XOR<CalcItemCreateWithoutCategoryInput, CalcItemUncheckedCreateWithoutCategoryInput>
  }

  export type CalcItemUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CalcItemWhereUniqueInput
    data: XOR<CalcItemUpdateWithoutCategoryInput, CalcItemUncheckedUpdateWithoutCategoryInput>
  }

  export type CalcItemUpdateManyWithWhereWithoutCategoryInput = {
    where: CalcItemScalarWhereInput
    data: XOR<CalcItemUpdateManyMutationInput, CalcItemUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CalcItemScalarWhereInput = {
    AND?: CalcItemScalarWhereInput | CalcItemScalarWhereInput[]
    OR?: CalcItemScalarWhereInput[]
    NOT?: CalcItemScalarWhereInput | CalcItemScalarWhereInput[]
    id?: IntFilter<"CalcItem"> | number
    categoryId?: IntFilter<"CalcItem"> | number
    name?: StringFilter<"CalcItem"> | string
    description?: StringNullableFilter<"CalcItem"> | string | null
    unitType?: EnumCalcUnitTypeFilter<"CalcItem"> | $Enums.CalcUnitType
    minPrice?: FloatFilter<"CalcItem"> | number
    maxPrice?: FloatFilter<"CalcItem"> | number
    baseMin?: FloatFilter<"CalcItem"> | number
    baseMax?: FloatFilter<"CalcItem"> | number
    vatIncluded?: BoolFilter<"CalcItem"> | boolean
    visible?: BoolFilter<"CalcItem"> | boolean
    createdAt?: DateTimeFilter<"CalcItem"> | Date | string
    updatedAt?: DateTimeFilter<"CalcItem"> | Date | string
  }

  export type CalcCategoryCreateWithoutItemsInput = {
    name: string
    slug: string
    description?: string | null
    isPopular?: boolean
    projectType?: CalcProjectTypeCreateNestedOneWithoutCategoriesInput
  }

  export type CalcCategoryUncheckedCreateWithoutItemsInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isPopular?: boolean
    projectTypeId?: number | null
  }

  export type CalcCategoryCreateOrConnectWithoutItemsInput = {
    where: CalcCategoryWhereUniqueInput
    create: XOR<CalcCategoryCreateWithoutItemsInput, CalcCategoryUncheckedCreateWithoutItemsInput>
  }

  export type CalcConditionCreateWithoutItemInput = {
    label: string
    description?: string | null
    multiplier: number
    isDefault?: boolean
  }

  export type CalcConditionUncheckedCreateWithoutItemInput = {
    id?: number
    label: string
    description?: string | null
    multiplier: number
    isDefault?: boolean
  }

  export type CalcConditionCreateOrConnectWithoutItemInput = {
    where: CalcConditionWhereUniqueInput
    create: XOR<CalcConditionCreateWithoutItemInput, CalcConditionUncheckedCreateWithoutItemInput>
  }

  export type CalcConditionCreateManyItemInputEnvelope = {
    data: CalcConditionCreateManyItemInput | CalcConditionCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type CalcCategoryUpsertWithoutItemsInput = {
    update: XOR<CalcCategoryUpdateWithoutItemsInput, CalcCategoryUncheckedUpdateWithoutItemsInput>
    create: XOR<CalcCategoryCreateWithoutItemsInput, CalcCategoryUncheckedCreateWithoutItemsInput>
    where?: CalcCategoryWhereInput
  }

  export type CalcCategoryUpdateToOneWithWhereWithoutItemsInput = {
    where?: CalcCategoryWhereInput
    data: XOR<CalcCategoryUpdateWithoutItemsInput, CalcCategoryUncheckedUpdateWithoutItemsInput>
  }

  export type CalcCategoryUpdateWithoutItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPopular?: BoolFieldUpdateOperationsInput | boolean
    projectType?: CalcProjectTypeUpdateOneWithoutCategoriesNestedInput
  }

  export type CalcCategoryUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPopular?: BoolFieldUpdateOperationsInput | boolean
    projectTypeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CalcConditionUpsertWithWhereUniqueWithoutItemInput = {
    where: CalcConditionWhereUniqueInput
    update: XOR<CalcConditionUpdateWithoutItemInput, CalcConditionUncheckedUpdateWithoutItemInput>
    create: XOR<CalcConditionCreateWithoutItemInput, CalcConditionUncheckedCreateWithoutItemInput>
  }

  export type CalcConditionUpdateWithWhereUniqueWithoutItemInput = {
    where: CalcConditionWhereUniqueInput
    data: XOR<CalcConditionUpdateWithoutItemInput, CalcConditionUncheckedUpdateWithoutItemInput>
  }

  export type CalcConditionUpdateManyWithWhereWithoutItemInput = {
    where: CalcConditionScalarWhereInput
    data: XOR<CalcConditionUpdateManyMutationInput, CalcConditionUncheckedUpdateManyWithoutItemInput>
  }

  export type CalcConditionScalarWhereInput = {
    AND?: CalcConditionScalarWhereInput | CalcConditionScalarWhereInput[]
    OR?: CalcConditionScalarWhereInput[]
    NOT?: CalcConditionScalarWhereInput | CalcConditionScalarWhereInput[]
    id?: IntFilter<"CalcCondition"> | number
    itemId?: IntFilter<"CalcCondition"> | number
    label?: StringFilter<"CalcCondition"> | string
    description?: StringNullableFilter<"CalcCondition"> | string | null
    multiplier?: FloatFilter<"CalcCondition"> | number
    isDefault?: BoolFilter<"CalcCondition"> | boolean
  }

  export type CalcCategoryCreateWithoutProjectTypeInput = {
    name: string
    slug: string
    description?: string | null
    isPopular?: boolean
    items?: CalcItemCreateNestedManyWithoutCategoryInput
  }

  export type CalcCategoryUncheckedCreateWithoutProjectTypeInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isPopular?: boolean
    items?: CalcItemUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CalcCategoryCreateOrConnectWithoutProjectTypeInput = {
    where: CalcCategoryWhereUniqueInput
    create: XOR<CalcCategoryCreateWithoutProjectTypeInput, CalcCategoryUncheckedCreateWithoutProjectTypeInput>
  }

  export type CalcCategoryCreateManyProjectTypeInputEnvelope = {
    data: CalcCategoryCreateManyProjectTypeInput | CalcCategoryCreateManyProjectTypeInput[]
    skipDuplicates?: boolean
  }

  export type CalcCategoryUpsertWithWhereUniqueWithoutProjectTypeInput = {
    where: CalcCategoryWhereUniqueInput
    update: XOR<CalcCategoryUpdateWithoutProjectTypeInput, CalcCategoryUncheckedUpdateWithoutProjectTypeInput>
    create: XOR<CalcCategoryCreateWithoutProjectTypeInput, CalcCategoryUncheckedCreateWithoutProjectTypeInput>
  }

  export type CalcCategoryUpdateWithWhereUniqueWithoutProjectTypeInput = {
    where: CalcCategoryWhereUniqueInput
    data: XOR<CalcCategoryUpdateWithoutProjectTypeInput, CalcCategoryUncheckedUpdateWithoutProjectTypeInput>
  }

  export type CalcCategoryUpdateManyWithWhereWithoutProjectTypeInput = {
    where: CalcCategoryScalarWhereInput
    data: XOR<CalcCategoryUpdateManyMutationInput, CalcCategoryUncheckedUpdateManyWithoutProjectTypeInput>
  }

  export type CalcCategoryScalarWhereInput = {
    AND?: CalcCategoryScalarWhereInput | CalcCategoryScalarWhereInput[]
    OR?: CalcCategoryScalarWhereInput[]
    NOT?: CalcCategoryScalarWhereInput | CalcCategoryScalarWhereInput[]
    id?: IntFilter<"CalcCategory"> | number
    name?: StringFilter<"CalcCategory"> | string
    slug?: StringFilter<"CalcCategory"> | string
    description?: StringNullableFilter<"CalcCategory"> | string | null
    isPopular?: BoolFilter<"CalcCategory"> | boolean
    projectTypeId?: IntNullableFilter<"CalcCategory"> | number | null
  }

  export type CalcItemCreateWithoutConditionsInput = {
    name: string
    description?: string | null
    unitType: $Enums.CalcUnitType
    minPrice: number
    maxPrice: number
    baseMin?: number
    baseMax?: number
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    category: CalcCategoryCreateNestedOneWithoutItemsInput
  }

  export type CalcItemUncheckedCreateWithoutConditionsInput = {
    id?: number
    categoryId: number
    name: string
    description?: string | null
    unitType: $Enums.CalcUnitType
    minPrice: number
    maxPrice: number
    baseMin?: number
    baseMax?: number
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalcItemCreateOrConnectWithoutConditionsInput = {
    where: CalcItemWhereUniqueInput
    create: XOR<CalcItemCreateWithoutConditionsInput, CalcItemUncheckedCreateWithoutConditionsInput>
  }

  export type CalcItemUpsertWithoutConditionsInput = {
    update: XOR<CalcItemUpdateWithoutConditionsInput, CalcItemUncheckedUpdateWithoutConditionsInput>
    create: XOR<CalcItemCreateWithoutConditionsInput, CalcItemUncheckedCreateWithoutConditionsInput>
    where?: CalcItemWhereInput
  }

  export type CalcItemUpdateToOneWithWhereWithoutConditionsInput = {
    where?: CalcItemWhereInput
    data: XOR<CalcItemUpdateWithoutConditionsInput, CalcItemUncheckedUpdateWithoutConditionsInput>
  }

  export type CalcItemUpdateWithoutConditionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitType?: EnumCalcUnitTypeFieldUpdateOperationsInput | $Enums.CalcUnitType
    minPrice?: FloatFieldUpdateOperationsInput | number
    maxPrice?: FloatFieldUpdateOperationsInput | number
    baseMin?: FloatFieldUpdateOperationsInput | number
    baseMax?: FloatFieldUpdateOperationsInput | number
    vatIncluded?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CalcCategoryUpdateOneRequiredWithoutItemsNestedInput
  }

  export type CalcItemUncheckedUpdateWithoutConditionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitType?: EnumCalcUnitTypeFieldUpdateOperationsInput | $Enums.CalcUnitType
    minPrice?: FloatFieldUpdateOperationsInput | number
    maxPrice?: FloatFieldUpdateOperationsInput | number
    baseMin?: FloatFieldUpdateOperationsInput | number
    baseMax?: FloatFieldUpdateOperationsInput | number
    vatIncluded?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarrantyCreateManyClientInput = {
    id?: number
    projectId?: number | null
    startDate: Date | string
    durationMonths: number
    projectName: string
    createdAt?: Date | string
  }

  export type CertificateCreateManyClientInput = {
    id?: number
    fileUrl: string
    title: string
    issuedDate: Date | string
    createdAt?: Date | string
  }

  export type NotificationCreateManyClientInput = {
    id?: number
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
  }

  export type InvoiceCreateManyClientInput = {
    id?: number
    title: string
    fileUrl: string
    issuedDate?: Date | string
    totalAmount: number
    projectName: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type ClientProjectCreateManyClientInput = {
    id?: number
    name: string
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WarrantyUpdateWithoutClientInput = {
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarrantyUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarrantyUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: NullableIntFieldUpdateOperationsInput | number | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    durationMonths?: IntFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUpdateWithoutClientInput = {
    fileUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileUrl?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutClientInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUpdateWithoutClientInput = {
    title?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvoiceUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InvoiceUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    fileUrl?: StringFieldUpdateOperationsInput | string
    issuedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    totalAmount?: FloatFieldUpdateOperationsInput | number
    projectName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientProjectUpdateWithoutClientInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: ClientProjectHistoryUpdateManyWithoutClientProjectNestedInput
  }

  export type ClientProjectUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: ClientProjectHistoryUncheckedUpdateManyWithoutClientProjectNestedInput
  }

  export type ClientProjectUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyChatSessionInput = {
    id?: number
    sender: string
    content: string
    isTransferred?: boolean
    createdAt?: Date | string
  }

  export type MessageUpdateWithoutChatSessionInput = {
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTransferred?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateWithoutChatSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTransferred?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutChatSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    isTransferred?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyProjectInput = {
    id?: number
    clientName: string
    rating: number
    content: string
    status?: $Enums.ReviewStatus
    companyReply?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateWithoutProjectInput = {
    clientName?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    companyReply?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    companyReply?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientName?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    status?: EnumReviewStatusFieldUpdateOperationsInput | $Enums.ReviewStatus
    companyReply?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkPackageCreateManyProjectTypeInput = {
    id?: number
    name: string
    description?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type WorkPackageUpdateWithoutProjectTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceItemUpdateManyWithoutPackageNestedInput
  }

  export type WorkPackageUncheckedUpdateWithoutProjectTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    services?: ServiceItemUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type WorkPackageUncheckedUpdateManyWithoutProjectTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceItemCreateManyPackageInput = {
    id?: number
    name: string
    description?: string | null
    group?: string | null
    unit: string
    basePrice: number
    multiplier?: number | null
    required?: boolean
    visibleByDefault?: boolean
    aiSuggestible?: boolean
    additionalNotes?: string | null
    sortOrder?: number
    createdAt?: Date | string
  }

  export type ServiceItemUpdateWithoutPackageInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: ServiceOptionUpdateManyWithoutServiceNestedInput
    followUps?: FollowUpUpdateManyWithoutSourceNestedInput
    suggestedBy?: FollowUpUpdateManyWithoutTargetNestedInput
  }

  export type ServiceItemUncheckedUpdateWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: ServiceOptionUncheckedUpdateManyWithoutServiceNestedInput
    followUps?: FollowUpUncheckedUpdateManyWithoutSourceNestedInput
    suggestedBy?: FollowUpUncheckedUpdateManyWithoutTargetNestedInput
  }

  export type ServiceItemUncheckedUpdateManyWithoutPackageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    group?: NullableStringFieldUpdateOperationsInput | string | null
    unit?: StringFieldUpdateOperationsInput | string
    basePrice?: FloatFieldUpdateOperationsInput | number
    multiplier?: NullableFloatFieldUpdateOperationsInput | number | null
    required?: BoolFieldUpdateOperationsInput | boolean
    visibleByDefault?: BoolFieldUpdateOperationsInput | boolean
    aiSuggestible?: BoolFieldUpdateOperationsInput | boolean
    additionalNotes?: NullableStringFieldUpdateOperationsInput | string | null
    sortOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceOptionCreateManyServiceInput = {
    id?: number
    name: string
    priceDelta: number
    description?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type FollowUpCreateManySourceInput = {
    id?: number
    targetId: number
    reason?: string | null
    condition?: string | null
  }

  export type FollowUpCreateManyTargetInput = {
    id?: number
    sourceId: number
    reason?: string | null
    condition?: string | null
  }

  export type ServiceOptionUpdateWithoutServiceInput = {
    name?: StringFieldUpdateOperationsInput | string
    priceDelta?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceOptionUncheckedUpdateWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    priceDelta?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceOptionUncheckedUpdateManyWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    priceDelta?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowUpUpdateWithoutSourceInput = {
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    target?: ServiceItemUpdateOneRequiredWithoutSuggestedByNestedInput
  }

  export type FollowUpUncheckedUpdateWithoutSourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FollowUpUncheckedUpdateManyWithoutSourceInput = {
    id?: IntFieldUpdateOperationsInput | number
    targetId?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FollowUpUpdateWithoutTargetInput = {
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
    source?: ServiceItemUpdateOneRequiredWithoutFollowUpsNestedInput
  }

  export type FollowUpUncheckedUpdateWithoutTargetInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceId?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FollowUpUncheckedUpdateManyWithoutTargetInput = {
    id?: IntFieldUpdateOperationsInput | number
    sourceId?: IntFieldUpdateOperationsInput | number
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    condition?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClientProjectHistoryCreateManyClientProjectInput = {
    id?: number
    status: string
    startDate: Date | string
    endDate?: Date | string | null
    deletedAt?: Date | string | null
    createdAt?: Date | string
  }

  export type ClientProjectHistoryUpdateWithoutClientProjectInput = {
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientProjectHistoryUncheckedUpdateWithoutClientProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientProjectHistoryUncheckedUpdateManyWithoutClientProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatMessageCreateManyThreadInput = {
    id?: string
    sender: string
    content: string
    createdAt?: Date | string
  }

  export type AiChatMessageUpdateWithoutThreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatMessageUncheckedUpdateWithoutThreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiChatMessageUncheckedUpdateManyWithoutThreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    sender?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcItemCreateManyCategoryInput = {
    id?: number
    name: string
    description?: string | null
    unitType: $Enums.CalcUnitType
    minPrice: number
    maxPrice: number
    baseMin?: number
    baseMax?: number
    vatIncluded?: boolean
    visible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalcItemUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitType?: EnumCalcUnitTypeFieldUpdateOperationsInput | $Enums.CalcUnitType
    minPrice?: FloatFieldUpdateOperationsInput | number
    maxPrice?: FloatFieldUpdateOperationsInput | number
    baseMin?: FloatFieldUpdateOperationsInput | number
    baseMax?: FloatFieldUpdateOperationsInput | number
    vatIncluded?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: CalcConditionUpdateManyWithoutItemNestedInput
  }

  export type CalcItemUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitType?: EnumCalcUnitTypeFieldUpdateOperationsInput | $Enums.CalcUnitType
    minPrice?: FloatFieldUpdateOperationsInput | number
    maxPrice?: FloatFieldUpdateOperationsInput | number
    baseMin?: FloatFieldUpdateOperationsInput | number
    baseMax?: FloatFieldUpdateOperationsInput | number
    vatIncluded?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conditions?: CalcConditionUncheckedUpdateManyWithoutItemNestedInput
  }

  export type CalcItemUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    unitType?: EnumCalcUnitTypeFieldUpdateOperationsInput | $Enums.CalcUnitType
    minPrice?: FloatFieldUpdateOperationsInput | number
    maxPrice?: FloatFieldUpdateOperationsInput | number
    baseMin?: FloatFieldUpdateOperationsInput | number
    baseMax?: FloatFieldUpdateOperationsInput | number
    vatIncluded?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalcConditionCreateManyItemInput = {
    id?: number
    label: string
    description?: string | null
    multiplier: number
    isDefault?: boolean
  }

  export type CalcConditionUpdateWithoutItemInput = {
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    multiplier?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CalcConditionUncheckedUpdateWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    multiplier?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CalcConditionUncheckedUpdateManyWithoutItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    multiplier?: FloatFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CalcCategoryCreateManyProjectTypeInput = {
    id?: number
    name: string
    slug: string
    description?: string | null
    isPopular?: boolean
  }

  export type CalcCategoryUpdateWithoutProjectTypeInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPopular?: BoolFieldUpdateOperationsInput | boolean
    items?: CalcItemUpdateManyWithoutCategoryNestedInput
  }

  export type CalcCategoryUncheckedUpdateWithoutProjectTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPopular?: BoolFieldUpdateOperationsInput | boolean
    items?: CalcItemUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CalcCategoryUncheckedUpdateManyWithoutProjectTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPopular?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}